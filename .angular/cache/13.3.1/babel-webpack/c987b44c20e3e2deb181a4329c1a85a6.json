{"ast":null,"code":"import * as signalR from '@aspnet/signalr';\nimport { delay, retryWhen, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../services/authentication.service\";\nimport * as i4 from \"ngx-electron\";\nimport * as i5 from \"../../services/chain.service\";\nimport * as i6 from \"../../services/logger.service\";\nimport * as i7 from \"../../services/api.service\";\nimport * as i8 from \"../../services/storage.service\";\nimport * as i9 from \"../../services/application-state.service\";\nimport * as i10 from \"../../shared/logo/logo.component\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/forms\";\nimport * as i15 from \"@angular/material/core\";\nimport * as i16 from \"@angular/material/button\";\nimport * as i17 from \"@angular/material/expansion\";\nimport * as i18 from \"@angular/material/icon\";\nimport * as i19 from \"@angular/material/checkbox\";\nimport * as i20 from \"@angular/material/input\";\nimport * as i21 from \"@angular/material/progress-bar\";\nimport * as i22 from \"@angular/material/progress-spinner\";\nimport * as i23 from \"../../shared/pipes/bytes.pipe\";\n\nfunction LoadComponent_ng_template_2_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const network_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", network_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", network_r11.name, \" \");\n  }\n}\n\nfunction LoadComponent_ng_template_2_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const mode_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", mode_r12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", mode_r12.name, \" \");\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_16_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_16_div_5_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(3);\n      return ctx_r14.clearNodePath();\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"clear\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.appState.daemon.path, \" \");\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_16_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.chooseNodeExecutable();\n    });\n    i0.ɵɵtext(3, \"Node executable:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtemplate(5, LoadComponent_ng_template_2_div_16_div_5_Template, 6, 1, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.appState.daemon.path);\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_18_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"span\", 17)(3, \"a\", 19);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_18_div_5_Template_a_click_3_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(3);\n      return ctx_r19.openFolder(ctx_r19.appState.daemon.datafolder);\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_18_div_5_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext(3);\n      return ctx_r21.clearDataFolder();\n    });\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"clear\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r18.appState.daemon.datafolder);\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_18_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.chooseDataFolder();\n    });\n    i0.ɵɵtext(3, \"Choose data folder:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtemplate(5, LoadComponent_ng_template_2_div_18_div_5_Template, 8, 1, \"div\", 16);\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.appState.daemon.datafolder);\n  }\n}\n\nfunction LoadComponent_ng_template_2_button_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_button_38_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return ctx_r24.downloadUrl = \"\";\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\")(2, \"br\");\n    i0.ɵɵtext(3, \" Downloading:\");\n    i0.ɵɵelement(4, \"br\")(5, \"br\")(6, \"mat-progress-bar\", 21)(7, \"br\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"bytes\");\n    i0.ɵɵpipe(10, \"bytes\");\n    i0.ɵɵelement(11, \"br\")(12, \"br\");\n    i0.ɵɵelementStart(13, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_div_42_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return ctx_r26.cancelDownload();\n    });\n    i0.ɵɵtext(14, \"Cancel\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"value\", ctx_r8.downloadProgress.progress);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(9, 3, ctx_r8.downloadProgress.downloaded), \" of \", i0.ɵɵpipeBind1(10, 5, ctx_r8.downloadProgress.size), \" \");\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\")(2, \"br\");\n    i0.ɵɵtext(3, \" Unpacking:\");\n    i0.ɵɵelement(4, \"br\")(5, \"br\")(6, \"mat-progress-bar\", 22);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoadComponent_ng_template_2_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\")(2, \"br\");\n    i0.ɵɵtext(3, \" Download and unpacking completed.\");\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtext(5, \" You can now continue by clicking Start. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoadComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-form-field\")(1, \"mat-select\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function LoadComponent_ng_template_2_Template_mat_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.appState.activeChain = $event;\n    });\n    i0.ɵɵtemplate(2, LoadComponent_ng_template_2_mat_option_2_Template, 2, 2, \"mat-option\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.launch();\n    });\n    i0.ɵɵtext(4, \"Start\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-accordion\", 6)(6, \"mat-expansion-panel\")(7, \"mat-expansion-panel-header\")(8, \"mat-panel-description\");\n    i0.ɵɵtext(9, \" Configuration \");\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"build\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\")(13, \"mat-form-field\")(14, \"mat-select\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function LoadComponent_ng_template_2_Template_mat_select_ngModelChange_14_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.selectedMode = $event;\n    });\n    i0.ɵɵtemplate(15, LoadComponent_ng_template_2_mat_option_15_Template, 2, 2, \"mat-option\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(16, LoadComponent_ng_template_2_div_16_Template, 6, 1, \"div\", 8);\n    i0.ɵɵelement(17, \"br\");\n    i0.ɵɵtemplate(18, LoadComponent_ng_template_2_div_18_Template, 7, 1, \"div\", 8);\n    i0.ɵɵelement(19, \"br\");\n    i0.ɵɵelementStart(20, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function LoadComponent_ng_template_2_Template_mat_checkbox_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.listTestNetworks = $event;\n    });\n    i0.ɵɵtext(21, \"Show Test networks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"br\")(23, \"br\");\n    i0.ɵɵelementStart(24, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function LoadComponent_ng_template_2_Template_mat_checkbox_ngModelChange_24_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.remember = $event;\n    });\n    i0.ɵɵtext(25, \"Remember\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"br\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"mat-expansion-panel\")(28, \"mat-expansion-panel-header\")(29, \"mat-panel-description\");\n    i0.ɵɵtext(30, \" Advanced \");\n    i0.ɵɵelementStart(31, \"mat-icon\");\n    i0.ɵɵtext(32, \"build\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"div\")(34, \"mat-form-field\", 10)(35, \"mat-label\");\n    i0.ɵɵtext(36, \"Blockchain Database Package URL:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function LoadComponent_ng_template_2_Template_input_ngModelChange_37_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.downloadUrl = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(38, LoadComponent_ng_template_2_button_38_Template, 3, 0, \"button\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(39, \"br\");\n    i0.ɵɵelementStart(40, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_2_Template_button_click_40_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return ctx_r35.downloadAndUnpack(ctx_r35.downloadUrl);\n    });\n    i0.ɵɵtext(41, \"Download and unpack\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(42, LoadComponent_ng_template_2_div_42_Template, 15, 7, \"div\", 8);\n    i0.ɵɵtemplate(43, LoadComponent_ng_template_2_div_43_Template, 7, 0, \"div\", 8);\n    i0.ɵɵtemplate(44, LoadComponent_ng_template_2_div_44_Template, 6, 0, \"div\", 8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelement(45, \"mat-accordion\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.appState.activeChain);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.filteredAvailableChains);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.selectedMode === null || ctx_r0.appState.activeChain === null);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.modes);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.selectedMode == null ? null : ctx_r0.selectedMode.id) === \"local\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.selectedMode == null ? null : ctx_r0.selectedMode.id) !== \"mobile\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.listTestNetworks);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.remember);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.downloadUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.downloadUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.downloadUrl || ctx_r0.downloading || ctx_r0.unpacking);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.downloading && ctx_r0.downloadProgress);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.unpacking);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.unpacked);\n  }\n}\n\nfunction LoadComponent_ng_template_3_div_8_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"task_alt\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoadComponent_ng_template_3_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"div\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 27);\n    i0.ɵɵtemplate(4, LoadComponent_ng_template_3_div_8_mat_icon_4_Template, 2, 0, \"mat-icon\", 8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const feature_r38 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(feature_r38.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", feature_r38.initialized);\n  }\n}\n\nfunction LoadComponent_ng_template_3_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"button\", 28);\n    i0.ɵɵtext(3, \"Advanced\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\u00A0 \");\n    i0.ɵɵelementStart(5, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function LoadComponent_ng_template_3_span_11_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r41);\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return ctx_r40.cancel();\n    });\n    i0.ɵɵtext(6, \"Cancel\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoadComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n    i0.ɵɵelementStart(1, \"span\", 23);\n    i0.ɵɵtext(2, \"Loading \");\n    i0.ɵɵelementStart(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"... please wait.\");\n    i0.ɵɵelement(6, \"br\")(7, \"br\");\n    i0.ɵɵtemplate(8, LoadComponent_ng_template_3_div_8_Template, 5, 2, \"div\", 24);\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, LoadComponent_ng_template_3_span_11_Template, 7, 0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.appState.activeChain.name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.featureStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Release \", ctx_r2.appState.release, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.delayed);\n  }\n}\n\nexport class LoadComponent {\n  route;\n  http;\n  authService;\n  electronService;\n  router;\n  chains;\n  log;\n  zone;\n  cd;\n  apiService;\n  storage;\n  appState;\n  hostClass = true;\n  selectedMode; // selectedNetwork: Chain;\n\n  loading;\n  hasWallet = false;\n  modes = [];\n  networks = [];\n  remember;\n  connection;\n  delayed = false;\n  apiSubscription;\n  routingSubscription;\n  downloadUrl; // dataFolder: string;\n  // nodePath: string;\n\n  downloading = false;\n  downloadProgress;\n  unpacking = false;\n  unpacked = false;\n  featureStatus;\n  subscription;\n  statusIntervalSubscription;\n  TryDelayMilliseconds = 3000;\n  MaxRetryCount = 50;\n  loadingFailed = false;\n  apiConnected = false;\n  ipc;\n\n  constructor(route, http, authService, electronService, router, chains, log, zone, cd, apiService, storage, appState) {\n    this.route = route;\n    this.http = http;\n    this.authService = authService;\n    this.electronService = electronService;\n    this.router = router;\n    this.chains = chains;\n    this.log = log;\n    this.zone = zone;\n    this.cd = cd;\n    this.apiService = apiService;\n    this.storage = storage;\n    this.appState = appState;\n    this.modes = [{\n      id: 'full',\n      name: 'Full'\n    }];\n\n    if (!environment.production) {\n      this.modes.push( // { id: 'demo', name: 'Demo' }, // Auto-wallet creation, etc.\n      {\n        id: 'local',\n        name: 'Custom'\n      }, // Launches the daemon by specifying path to .dll file.\n      {\n        id: 'manual',\n        name: 'Manual'\n      }, // Manual startup of daemon, does not send shutdown messages. Useful when you debug node with Visual Studio.\n      {\n        id: 'simple',\n        name: 'Mobile'\n      }); // API Wallet mode.\n      // { id: 'light', name: 'Light' }, // Full Node in Purge mode and other features disabled.\n      // { id: 'pos', name: 'Point-of-Sale (POS)' },\n      // { id: 'readonly', name: 'Read-only' });\n    }\n\n    this.selectedMode = this.modes.find(mode => mode.id === this.appState.daemon.mode);\n\n    if (this.appState.isChangingToChain) {\n      // If the user has selected a new chain to change to, just do it automatically.\n      this.appState.activeChain = this.appState.changeToChain; // Important to update this, it will be used by API Service to initialize the correct node daemon.\n\n      this.appState.daemon.network = this.appState.activeChain.network; // this.appState.changeToChain = null;\n      // if (this.appState.changeToChain) {\n      //     this.appState.changeToChain = null;\n      // }\n    } else {\n      // Make sure that the chain setup is available in the appstate.\n      this.appState.activeChain = this.chains.availableChains.find(network => network.network === this.appState.daemon.network);\n    }\n\n    this.remember = true;\n    this.log.info('Mode:', this.selectedMode);\n    this.log.info('Network:', this.appState.activeChain);\n    this.log.info('Daemon App State:', JSON.stringify(this.appState.daemon));\n    this.ipc = electronService.ipcRenderer;\n    this.ipc.on('choose-data-folder', (event, path) => {\n      // notificationService.show({ title: 'Checking for update...', body: JSON.stringify(info) });\n      console.log('choose-data-folder: ', path);\n      this.appState.daemon.datafolder = path; // We must force a detection here to make it update immediately.\n\n      this.cd.detectChanges();\n    });\n    this.ipc.on('choose-node-path', (event, path) => {\n      // notificationService.show({ title: 'Checking for update...', body: JSON.stringify(info) });\n      console.log('choose-node-path: ', path); // this.nodePath = path;\n\n      this.appState.daemon.path = path; // We must force a detection here to make it update immediately.\n\n      this.cd.detectChanges();\n    });\n    this.ipc.on('download-blockchain-package-finished', (event, finished, progress, error) => {\n      if (error) {\n        console.error('Error during downloading: ' + error);\n      }\n\n      this.downloadProgress = progress;\n\n      if (finished) {\n        // If finished with error, we won't unpack.\n        if (progress.status == 'Done') {\n          this.downloading = false;\n          this.unpack(progress.target);\n        } else {\n          this.downloading = false;\n        } // Clear the download progress.\n\n\n        this.downloadProgress = null;\n      } // We must force a detection here to make it update immediately.\n\n\n      this.cd.detectChanges();\n    });\n    this.ipc.on('unpack-blockchain-package-finished', error => {\n      this.unpacking = false;\n      this.unpacked = true;\n\n      if (error) {\n        console.error('Error during downloading: ' + error);\n      } else {} // We must force a detection here to make it update immediately.\n\n\n      this.cd.detectChanges();\n    });\n  }\n\n  initialize() {\n    this.apiService.initialize(); // TODO: Should send the correct network, hard-coded to city main for now.\n    // Do this always now, we need this information in the UI for identity handling.\n    // const network = coininfo('city').toBitcoinJS();\n    // this.appState.networkDefinition = network;\n\n    this.appState.networkParams = {\n      private: this.appState.activeChain.private,\n      public: this.appState.activeChain.public // PubKeyHash\n\n    }; // this.appState.networkParams = {\n    //     private: network.wif,\n    //     public: network.pubKeyHash\n    // };\n\n    console.log('INITILIZE!....', this.appState.daemon);\n    console.log(this.appState); // Update the overlay icon to visualize current chain.\n\n    this.electronService.ipcRenderer.send('update-icon', {\n      icon: '/src/assets/' + this.appState.chain + '/logo.png',\n      title: this.appState.chain\n    });\n\n    if (this.appState.daemon.mode === 'full' || this.appState.daemon.mode === 'local' || this.appState.daemon.mode === 'light') {\n      this.loading = true;\n      this.appState.connected = false;\n      this.cd.detectChanges();\n      this.fullNodeConnect();\n    } else if (this.appState.daemon.mode === 'manual') {\n      this.loading = false;\n      this.appState.connected = true;\n      this.cd.detectChanges();\n      this.fullNodeConnect();\n    } else if (this.appState.daemon.mode === 'simple') {\n      // TODO: Should send the correct network, hard-coded to city main for now.\n      // const network = coininfo('city').toBitcoinJS();\n      // this.appState.networkDefinition = network;\n      // this.appState.networkParams = {\n      //     private: network.wif,\n      //     public: network.pubKeyHash\n      // };\n      this.loading = false;\n      this.appState.connected = true;\n      this.router.navigateByUrl('/login');\n    }\n  }\n\n  get listTestNetworks() {\n    return this.storage.getValue('Network:ListTestNetworks') === 'true';\n  }\n\n  set listTestNetworks(value) {\n    this.storage.setValue('Network:ListTestNetworks', value.toString());\n  }\n\n  get filteredAvailableChains() {\n    return this.listTestNetworks ? this.chains.availableChains : this.chains.availableChains.filter(language => !language.test);\n  }\n\n  onDaemonFolderChange(event) {\n    this.log.info('Daemon folder changed:', event);\n\n    if (event.target.files.length > 0) {\n      this.appState.daemon.path = event.target.files[0].path;\n    } else {\n      this.appState.daemon.path = '';\n    }\n  }\n\n  chooseNodeExecutable() {\n    this.electronService.ipcRenderer.send('choose-node-path');\n  }\n\n  clearNodePath() {\n    this.appState.daemon.path = '';\n  }\n\n  chooseDataFolder() {\n    this.electronService.ipcRenderer.send('choose-data-folder');\n  }\n\n  clearDataFolder() {\n    this.appState.daemon.datafolder = '';\n  }\n\n  onDataFolderChange(event) {\n    this.log.info('Data folder changed:', event);\n\n    if (event.target.files.length > 0) {\n      this.appState.daemon.datafolder = event.target.files[0].path;\n    } else {\n      this.appState.daemon.datafolder = '';\n    }\n  }\n\n  launch() {\n    this.appState.updateNetworkSelection(this.remember, this.selectedMode.id, this.appState.activeChain.network, this.appState.daemon.path, this.appState.daemon.datafolder); // If the selected mode is not 'local', we'll reset the path and data folder.\n\n    if (this.appState.daemon.mode !== 'local') {\n      localStorage.removeItem('Network:Path');\n      localStorage.removeItem('Network:DataFolder');\n    }\n\n    this.initialize();\n  }\n\n  fullNodeConnect() {\n    // Do we need to keep a pointer to this timeout and remove it, or does the zone handle that?\n    this.zone.run(() => {\n      setTimeout(() => {\n        this.delayed = true;\n      }, 60000); // 60000 Make sure it is fairly high, we don't want users to immediatly perform advanced reset options when they don't need to.\n    });\n    this.tryStart();\n  }\n\n  downloadAndUnpack(url) {\n    // If user does \"Copy as path\" we must ensure we replace the quotes.\n    url = url.replaceAll('\"', ''); // replaceAll is a very recent addition to ECMAScript, so we had to make url the type of any.\n\n    var isAbsolute = new RegExp('^([a-z]+://|//)', 'i');\n\n    if (isAbsolute.test(url)) {\n      console.log('Download: ' + url);\n      this.downloading = true; // Send array of path information to be used in path.join to get native full path in the main process.\n\n      const pathInfo = [this.appState.daemon.datafolder, this.appState.activeChain.rootFolderName, this.appState.activeChain.network];\n      const downloadInfo = {\n        url: url,\n        path: pathInfo\n      };\n      this.log.info('Target Folder...', downloadInfo);\n      this.electronService.ipcRenderer.sendSync('download-blockchain-package', downloadInfo); // this.appState.daemon.datafolder\n    } else {\n      // If the user supplies an relative / local path, we'll go ahead and unpack directly.\n      this.unpack(url);\n    }\n  }\n\n  openFolder(directory) {\n    this.electronService.shell.openPath(directory);\n  }\n\n  unpack(source) {\n    // Send array of path information to be used in path.join to get native full path in the main process.\n    const pathInfo = [this.appState.daemon.datafolder, this.appState.activeChain.rootFolderName, this.appState.activeChain.network];\n    const downloadInfo = {\n      source: source,\n      path: pathInfo\n    };\n    this.unpacking = true; // unpack-blockchain-package\n\n    this.electronService.ipcRenderer.sendSync('unpack-blockchain-package', downloadInfo);\n  }\n\n  cancelDownload() {\n    this.electronService.ipcRenderer.sendSync('download-blockchain-package-abort');\n    this.downloading = false;\n  } // Attempts to initialise the wallet by contacting the daemon.  Will try to do this MaxRetryCount times.\n\n\n  tryStart() {\n    let retry = 0;\n    const stream$ = this.apiService.getNodeStatus().pipe(retryWhen(errors => errors.pipe(delay(this.TryDelayMilliseconds)).pipe(tap(errorStatus => {\n      if (retry++ === this.MaxRetryCount) {\n        throw errorStatus;\n      }\n\n      this.log.info(`Retrying ${retry}...`);\n    }))));\n    this.subscription = stream$.subscribe(data => {\n      this.apiConnected = true;\n      this.statusIntervalSubscription = this.apiService.getNodeStatusCustomInterval(350) // Get status quickly during initial load.\n      .subscribe(response => {\n        this.featureStatus = response.featuresData.map(d => {\n          return {\n            name: d.namespace.split('.').pop(),\n            state: d.state,\n            initialized: d.state === 'Initialized'\n          };\n        });\n        let loadingStatus = this.featureStatus.filter(x => x.name == 'WalletFeature');\n\n        if (loadingStatus.length > 0 && loadingStatus[0].initialized) {\n          this.statusIntervalSubscription.unsubscribe();\n          this.start();\n        }\n      });\n    }, error => {\n      this.log.info('Failed to start wallet');\n      this.loading = false;\n      this.loadingFailed = true;\n    });\n  }\n\n  start() {\n    // this.simpleWalletConnect();\n    // We have successful connection with daemon, make sure we inform the main process of |.\n    this.electronService.ipcRenderer.send('daemon-started');\n    this.loading = false;\n    this.appState.connected = true;\n    this.router.navigateByUrl('/login');\n  }\n\n  ngOnInit() {\n    this.routingSubscription = this.route.queryParams.subscribe(params => {\n      if (params.loading == true) {\n        // params will be strings, so can be 'true' or 'false' in this case. So double equal to ensure it triggers on both.\n        this.loading = true;\n        this.loadingFailed = false;\n        this.appState.connected = false;\n      } else {\n        this.loading = false;\n      }\n\n      if (params.changing) {// this.initialize();\n      }\n    }); // this.unsubscribe(); // Make sure we unsubscribe existing listeners.\n    // this.launch();\n    // this.initialize();\n    // }\n    // else {\n    //     const existingMode = localStorage.getItem('Network:Mode');\n    //     // If user has choosen to remember mode, we'll redirect directly to login, when connected.\n    //     if (existingMode != null) {\n    //         this.initialize();\n    //     }\n    // }\n\n    if (this.appState.changeToChain && this.appState.isChangingToChain) {\n      this.appState.isChangingToChain = false;\n      this.initialize();\n    }\n\n    const existingMode = localStorage.getItem('Network:Mode'); // If user has choosen to remember mode, we'll redirect directly to login, when connected.\n\n    if (existingMode != null) {\n      this.initialize();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe();\n  }\n\n  unsubscribe() {\n    if (this.routingSubscription) {\n      this.routingSubscription.unsubscribe();\n    }\n\n    if (this.apiSubscription) {\n      this.apiSubscription.unsubscribe();\n    }\n  }\n\n  cancel() {\n    this.unsubscribe();\n    this.appState.connected = false;\n    this.loading = false;\n    this.delayed = false;\n    this.appState.daemon.mode = null;\n  }\n\n  simpleWalletConnect() {\n    this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:4337/node').build();\n    this.connection.on('BlockConnected', block => {\n      console.log('BlockConnected:' + block);\n    });\n    this.connection.on('TransactionReceived', trx => {\n      console.log('TransactionReceived:' + trx);\n    });\n    this.connection.on('txs', transactions => {\n      console.log(transactions); // TODO: Update a bitcore-lib fork to add support for Stratis/City Chain.\n      // var tx1 = transactions[0];\n      // var tx = bitcoin.Transaction.fromHex(tx1.value.hex);\n    });\n    const self = this; // Transport fallback functionality is now built into start.\n\n    this.connection.start().then(() => {\n      console.log('connection started');\n      self.connection.send('Subscribe', {\n        events: ['TransactionReceived', 'BlockConnected']\n      });\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n\n  static ɵfac = function LoadComponent_Factory(t) {\n    return new (t || LoadComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.ElectronService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i5.ChainService), i0.ɵɵdirectiveInject(i6.Logger), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i7.ApiService), i0.ɵɵdirectiveInject(i8.StorageService), i0.ɵɵdirectiveInject(i9.ApplicationStateService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoadComponent,\n    selectors: [[\"app-load\"]],\n    hostVars: 2,\n    hostBindings: function LoadComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"load\", ctx.hostClass);\n      }\n    },\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"splash-container\", \"not-selectable\"], [3, \"ngIf\", \"ngIfElse\"], [\"spinner\", \"\"], [\"placeholder\", \"Select network\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"start-button\", 3, \"disabled\", \"click\"], [\"multi\", \"\", 1, \"setup-headers-align\"], [\"placeholder\", \"Select mode\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngIf\"], [3, \"ngModel\", \"ngModelChange\"], [1, \"advanced-form-field\"], [\"matInput\", \"\", \"type\", \"url\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", 3, \"disabled\", \"click\"], [3, \"value\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"class\", \"path\", 4, \"ngIf\"], [1, \"path\"], [\"mat-icon-button\", \"\", 3, \"click\"], [\"href\", \"javascript:void(0)\", 3, \"click\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [\"mode\", \"determinate\", 3, \"value\"], [\"mode\", \"indeterminate\"], [1, \"load-text\"], [\"class\", \"load-feature-status\", 4, \"ngFor\", \"ngForOf\"], [1, \"load-feature-status\"], [1, \"name\"], [1, \"status\"], [\"routerLink\", \"/advanced\", \"mat-raised-button\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function LoadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-logo\");\n        i0.ɵɵtemplate(2, LoadComponent_ng_template_2_Template, 46, 15, \"ng-template\", 1);\n        i0.ɵɵtemplate(3, LoadComponent_ng_template_3_Template, 12, 4, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(4);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i10.LogoComponent, i11.NgIf, i12.MatFormField, i13.MatSelect, i14.NgControlStatus, i14.NgModel, i11.NgForOf, i15.MatOption, i16.MatButton, i17.MatAccordion, i17.MatExpansionPanel, i17.MatExpansionPanelHeader, i17.MatExpansionPanelDescription, i18.MatIcon, i19.MatCheckbox, i12.MatLabel, i20.MatInput, i14.DefaultValueAccessor, i12.MatSuffix, i21.MatProgressBar, i22.MatProgressSpinner, i1.RouterLink],\n    pipes: [i23.BytesPipe],\n    styles: [\".load .load-text {\\n  margin-top: 20px;\\n  text-align: center;\\n}\\n\\n.custom-file-mode {\\n  width: 186px;\\n}\\n\\n.path {\\n  overflow-wrap: break-word;\\n  max-width: 300px;\\n}\\n\\n.setup-headers-align {\\n  padding-bottom: 2em;\\n  padding-top: 2em;\\n}\\n\\n.setup-headers-align .mat-expansion-panel-header-title,\\n.setup-headers-align .mat-expansion-panel-header-description {\\n  flex-basis: 0;\\n}\\n\\n.setup-headers-align .mat-expansion-panel-header-description {\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n.start-button {\\n  margin-bottom: 2em;\\n}\\n\\n.advanced-form-field {\\n  width: 100%;\\n}\\n\\n.load-feature-status {\\n  text-align: left;\\n  color: silver;\\n  margin-left: 6em;\\n  margin-bottom: 0.1em;\\n  display: grid;\\n  grid-template-columns: 1fr 1fr;\\n  grid-template-rows: 1fr;\\n  grid-gap: 2em 2em;\\n  gap: 2em 2em;\\n  grid-template-areas: \\\"name status\\\";\\n}\\n\\n.load-feature-status .name {\\n  grid-area: name;\\n  height: 24px;\\n  display: flex;\\n  justify-content: left;\\n  align-items: center;\\n}\\n\\n.load-feature-status .status {\\n  grid-area: status;\\n  text-align: left;\\n  height: 24px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.load-feature-status mat-icon {\\n  font-size: 24px !important;\\n  color: green;\\n}\"],\n    encapsulation: 2\n  });\n}","map":null,"metadata":{},"sourceType":"module"}