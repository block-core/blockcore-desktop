{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ApplicationStateService } from '../../services/application-state.service';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/cdk/clipboard\";\nimport * as i3 from \"../../services/application-state.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/button\";\n\nfunction ReportComponent_p_19_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"json\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var arg_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                \", i0.ɵɵpipeBind1(2, 1, arg_r3), \"\\n            \");\n  }\n}\n\nfunction ReportComponent_p_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵpipe(3, \"json\");\n    i0.ɵɵtemplate(4, ReportComponent_p_19_span_4_Template, 3, 3, \"span\", 12);\n    i0.ɵɵtext(5, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var line_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\\n            \", i0.ɵɵpipeBind2(2, 3, line_r1.timestamp, \"HH:mm\"), \": \", i0.ɵɵpipeBind1(3, 6, line_r1.message), \"\\n\\n            \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", line_r1.args);\n  }\n}\n\nexport var ReportComponent = /*#__PURE__*/(function () {\n  var ReportComponent = /*#__PURE__*/function () {\n    function ReportComponent(snackBar, clipboard, appState, dialogRef, data) {\n      _classCallCheck(this, ReportComponent);\n\n      this.snackBar = snackBar;\n      this.clipboard = clipboard;\n      this.appState = appState;\n      this.dialogRef = dialogRef;\n      this.data = data;\n    }\n\n    _createClass(ReportComponent, [{\n      key: \"shutdown\",\n      value: function shutdown() {\n        // When we exit from this error report dialog, we'll reset the daemon selection options to start fresh.\n        this.appState.resetNetworkSelection();\n        window.close();\n      }\n    }, {\n      key: \"onCopiedClick\",\n      value: function onCopiedClick() {\n        this.clipboard.copy(document.getElementById('error-lines').innerText);\n        this.snackBar.open('The error log has been copied to your clipboard.', null, {\n          duration: 3000\n        });\n        return false;\n      }\n    }]);\n\n    return ReportComponent;\n  }();\n\n  /** @nocollapse */\n  ReportComponent.ɵfac = function ReportComponent_Factory(t) {\n    return new (t || ReportComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.Clipboard), i0.ɵɵdirectiveInject(i3.ApplicationStateService), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  /** @nocollapse */\n\n\n  ReportComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: ReportComponent,\n    selectors: [[\"app-report-component\"]],\n    decls: 35,\n    vars: 5,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"mat-typography\"], [1, \"report-header\"], [1, \"report-icon\"], [1, \"report-description\"], [\"id\", \"error-lines\"], [\"class\", \"log-line\", 4, \"ngFor\", \"ngForOf\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"ngbTooltip\", \"Copy to clipboard\", 3, \"click\"], [\"mat-button\", \"\", 3, \"mat-dialog-close\"], [\"mat-button\", \"\", \"color\", \"primary\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\", \"click\"], [1, \"log-line\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function ReportComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(2, \"\\n\");\n        i0.ɵɵelementStart(3, \"mat-dialog-content\", 1);\n        i0.ɵɵtext(4, \"\\n    \");\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵtext(6, \"\\n        \");\n        i0.ɵɵelementStart(7, \"mat-icon\", 3);\n        i0.ɵɵtext(8, \"error\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \"\\n        \");\n        i0.ɵɵelementStart(10, \"span\", 4);\n        i0.ɵɵtext(11, \"Blockcore Hub will attempt to start the node background daemon (process) at startup. This dialog appears due to failure to load node daemon. You can copy the errors and report\\n            them to the development team for support.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(12, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \"\\n\\n    \");\n        i0.ɵɵelementStart(14, \"h3\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16, \"\\n\\n    \");\n        i0.ɵɵelementStart(17, \"div\", 5);\n        i0.ɵɵtext(18, \"\\n        \");\n        i0.ɵɵtemplate(19, ReportComponent_p_19_Template, 6, 8, \"p\", 6);\n        i0.ɵɵtext(20, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(21, \"\\n\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \"\\n\");\n        i0.ɵɵelementStart(23, \"mat-dialog-actions\", 7);\n        i0.ɵɵtext(24, \"\\n    \");\n        i0.ɵɵelementStart(25, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ReportComponent_Template_button_click_25_listener() {\n          return ctx.onCopiedClick();\n        });\n        i0.ɵɵtext(26, \"Copy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(27, \"\\n    \");\n        i0.ɵɵelementStart(28, \"button\", 9);\n        i0.ɵɵtext(29, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(30, \"\\n    \");\n        i0.ɵɵelementStart(31, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function ReportComponent_Template_button_click_31_listener() {\n          return ctx.shutdown();\n        });\n        i0.ɵɵtext(32, \"Exit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(33, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(34, \"\\n\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.data.title);\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate1(\"Last \", ctx.data.lines.length, \" log messages:\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.data.lines);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n      }\n    },\n    directives: [i4.MatDialogTitle, i4.MatDialogContent, i5.MatIcon, i6.NgForOf, i4.MatDialogActions, i7.MatButton, i4.MatDialogClose],\n    pipes: [i6.DatePipe, i6.JsonPipe],\n    styles: [\".log-line {\\n  border-bottom: 1px solid rgba(192, 192, 192, 0.25);\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n  margin: 0;\\n}\\n\\n.report-icon {\\n  font-size: 3em;\\n  max-width: 60px;\\n}\\n\\n.report-header {\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-content: space-between;\\n}\\n\\n.report-header > * {\\n  flex: 1 1 200px;\\n}\"],\n    encapsulation: 2\n  });\n  return ReportComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}