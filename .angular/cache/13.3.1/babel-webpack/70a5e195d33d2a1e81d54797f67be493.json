{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./settings.service\";\nexport class HubService {\n  settings;\n  static singletonInstance;\n  hubs;\n\n  constructor(settings) {\n    this.settings = settings;\n\n    if (!HubService.singletonInstance) {\n      HubService.singletonInstance = this;\n    } // If we don't have any hubs, make sure we initialize it.\n\n\n    if (settings.hubs == null || settings.hubs.length === 0) {\n      this.hubs = this.initialize();\n    } else {\n      this.hubs = settings.hubs;\n    } // Handle empty hubs array that can happen on new or clean clients.\n\n\n    if (this.hubs == null) {\n      this.hubs = [];\n    }\n\n    return HubService.singletonInstance;\n  }\n\n  api(url, method = 'GET', data) {\n    return fetch(url, {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    });\n  }\n\n  persist() {\n    this.settings.hubs = this.hubs;\n  }\n\n  put(signedDocument, type) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const hub = _this.getHub();\n\n      console.log('CONTAINER:', signedDocument); // TODO: Use the URL from the Hub. For now relay on the City Chain Identity host.\n      // const url = hub.content.url + '/api/' + type;\n\n      const url = 'http://localhost:4335/api/' + type; // const url = 'http://localhost:4335/api/' + signedDocument.id; // .id is a shortcut of '@type/' + id.\n      // const url = 'https://identity.city-chain.org/' + signedDocument.container + '/' + signedDocument.id;\n\n      console.log('url', url);\n      const results = yield _this.api(url, 'PUT', signedDocument);\n      console.log('RESULTS:', results);\n    })();\n  }\n\n  download(url) {\n    return _asyncToGenerator(function* () {\n      const MSGPACK_TYPE = 'application/x-msgpack';\n      const response = yield fetch(url);\n      const contentType = response.headers.get('Content-Type');\n\n      if (contentType && contentType.startsWith(MSGPACK_TYPE) && response.body != null) {\n        // TODO: FIX!\n        // const object = await decodeAsync(response.body);\n        const object = null; // do something with object\n      } else {\n        /* handle errors */\n      }\n    })();\n  }\n\n  getHub() {\n    const hub = this.hubs.find(h => h.content.identifier === this.settings.hub);\n    return hub;\n  }\n  /**\r\n   * Remvoe a hub hub\r\n   */\n\n\n  remove(id) {\n    const index = this.hubs.findIndex(h => h.content.identifier === id);\n    console.log('Found index:' + index);\n\n    if (index > -1) {\n      console.log('splicing...');\n      this.hubs.splice(index, 1);\n      this.persist();\n    }\n  } // async refresh(hub: HubContainer) {\n  //     const originalUrl = hub.originalUrl;\n  //     const wellKnownUrl = hub.wellKnownUrl;\n  //     console.log('HUB1:', hub);\n  //     try {\n  //         hub = await this.api<HubContainer>(hub.wellKnownUrl);\n  //         hub.originalUrl = originalUrl;\n  //         hub.wellKnownUrl = wellKnownUrl;\n  //         hub.status = 'Online';\n  //         console.log('HUB2:', hub);\n  //     }\n  //     catch (err) {\n  //         hub.status = 'Error: ' + err;\n  //     }\n  // }\n\n  /**\r\n   * Add a hub\r\n   */\n\n\n  add(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let hubUrl = url; // Build the entire URL for retreiving the identity of specified hub.\n\n      if (hubUrl.indexOf('.well-known') === -1) {\n        if (hubUrl.substring(hubUrl.length - 1) !== '/') {\n          hubUrl += '/';\n        }\n\n        hubUrl += '.well-known/blockcore/node/identity';\n      }\n\n      let hub = null;\n\n      try {\n        hub = yield _this2.api(hubUrl);\n        hub.originalUrl = url;\n        hub.wellKnownUrl = hubUrl;\n        hub.status = 'Online'; // If this hub already exists, simply replace it.\n\n        const existingIndex = _this2.hubs.findIndex(h => h.content.identifier === hub.content.identifier);\n\n        if (existingIndex > -1) {\n          console.log('ALREADY EXISTS, REMOVE IT!');\n\n          _this2.hubs.splice(existingIndex, 1);\n        }\n      } catch (err) {\n        hub.status = 'Error: ' + err;\n      }\n\n      if (hub) {\n        _this2.hubs.push(hub); // If there is only a single hub entry, make sure it's the default one.\n\n\n        if (_this2.hubs.length === 1) {\n          _this2.settings.hub = hub.content.identifier;\n        }\n      }\n\n      _this2.persist();\n    })();\n  }\n\n  initialize() {\n    this.hubs = [];\n    return this.hubs;\n  }\n\n  static ɵfac = function HubService_Factory(t) {\n    return new (t || HubService)(i0.ɵɵinject(i1.SettingsService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HubService,\n    factory: HubService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}