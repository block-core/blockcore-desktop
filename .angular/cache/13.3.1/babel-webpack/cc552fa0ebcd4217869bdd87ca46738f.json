{"ast":null,"code":"import _createForOfIteratorHelper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Subject } from 'rxjs';\nimport { GlobalService } from './global.service';\nimport { WalletInfo } from '../classes/wallet-info';\nimport { TransactionInfo } from '../classes/transaction-info';\nimport { ApplicationStateService } from './application-state.service';\nimport { ApiService } from './api.service';\nimport { Logger } from './logger.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./global.service\";\nimport * as i3 from \"./logger.service\";\nimport * as i4 from \"./application-state.service\";\nexport var WalletService = /*#__PURE__*/(function () {\n  var WalletService = /*#__PURE__*/function () {\n    function WalletService(apiService, globalService, log, appState) {\n      _classCallCheck(this, WalletService);\n\n      this.apiService = apiService;\n      this.globalService = globalService;\n      this.log = log;\n      this.appState = appState;\n      /** Set to true to make the wallet update wallet status at higher frequency. Set to false when high refresh rate is not needed. */\n\n      this.active = false;\n      this.hasBalance = false;\n      this.percentSyncedNumber = 0;\n      this.percentSynced = '0%'; // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle, id-blacklist, id-match\n\n      this._history = new Subject();\n      this.history$ = this._history.asObservable();\n\n      if (!WalletService.singletonInstance) {\n        WalletService.singletonInstance = this;\n      }\n\n      return WalletService.singletonInstance;\n    }\n\n    _createClass(WalletService, [{\n      key: \"walletMode\",\n      get: function get() {\n        return localStorage.getItem('Settings:WalletMode') || 'multi';\n      }\n    }, {\n      key: \"isMultiAddressMode\",\n      get: function get() {\n        return this.walletMode !== 'single';\n      }\n    }, {\n      key: \"isSingleAddressMode\",\n      get: function get() {\n        return this.walletMode === 'single';\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        this.walletName = this.globalService.getWalletName();\n        this.coinUnit = this.globalService.getCoinUnit();\n        this.startSubscriptions();\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.walletName = '';\n        this.coinUnit = '';\n        this.confirmedBalance = null;\n        this.unconfirmedBalance = null;\n        this.active = false;\n        this.transactionArray = [];\n        this.cancelSubscriptions();\n      }\n    }, {\n      key: \"startStaking\",\n      value: function startStaking(password) {\n        var _this = this;\n\n        this.isStarting = true;\n        this.isStopping = false;\n        var walletData = {\n          name: this.globalService.getWalletName(),\n          password: password\n        };\n        this.apiService.startStaking(walletData).subscribe(function (response) {\n          _this.log.info('Start staking:', response);\n\n          _this.stakingEnabled = true;\n          _this.isStarting = false;\n        }, function (error) {\n          _this.isStarting = false;\n          _this.stakingEnabled = false;\n\n          _this.apiService.handleException(error);\n        });\n      }\n    }, {\n      key: \"stopStaking\",\n      value: function stopStaking() {\n        var _this2 = this;\n\n        this.isStopping = true;\n        this.isStarting = false;\n        this.apiService.stopStaking().subscribe(function (response) {\n          _this2.log.info('Stop staking:', response);\n\n          _this2.stakingEnabled = false;\n        }, function (error) {\n          _this2.apiService.handleException(error);\n        });\n      }\n    }, {\n      key: \"resync\",\n      value: function resync() {\n        var _this3 = this;\n\n        this.apiService.removeHistory(this.globalService.getWalletName()).subscribe(function () {\n          // Clear the transaction history so UI updates.\n          _this3.transactionArray = [];\n\n          _this3._history.next(_this3.transactionArray);\n        }, function (error) {\n          console.error(error);\n        });\n      }\n    }, {\n      key: \"cancelSubscriptions\",\n      value: function cancelSubscriptions() {\n        if (this.walletBalanceSubscription) {\n          this.walletBalanceSubscription.unsubscribe();\n        }\n\n        if (this.walletHistorySubscription) {\n          this.walletHistorySubscription.unsubscribe();\n        }\n\n        if (this.stakingInfoSubscription) {\n          this.stakingInfoSubscription.unsubscribe();\n        }\n\n        if (this.generalWalletInfoSubscription) {\n          this.generalWalletInfoSubscription.unsubscribe();\n        }\n      }\n    }, {\n      key: \"startSubscriptions\",\n      value: function startSubscriptions() {\n        this.getWalletBalance();\n        this.getHistory();\n\n        if (this.appState.activeChain.pos) {\n          this.getStakingInfo();\n        }\n\n        this.getGeneralWalletInfo();\n      }\n      /** Called to cancel and restart all subscriptions. */\n\n    }, {\n      key: \"reactivate\",\n      value: function reactivate() {\n        this.cancelSubscriptions();\n        this.startSubscriptions();\n      }\n    }, {\n      key: \"getWalletBalance\",\n      value: function getWalletBalance() {\n        var _this4 = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.walletBalanceSubscription = this.apiService.getWalletBalance(walletInfo).subscribe(function (response) {\n          _this4.log.info('Get wallet balance:', response);\n\n          var balanceResponse = response;\n          _this4.confirmedBalance = balanceResponse.balances[0].amountConfirmed;\n          _this4.unconfirmedBalance = balanceResponse.balances[0].amountUnconfirmed;\n\n          if (_this4.confirmedBalance + _this4.unconfirmedBalance > 0) {\n            _this4.hasBalance = true;\n          } else {\n            _this4.hasBalance = false;\n          }\n        }, function (error) {\n          _this4.apiService.handleException(error); // this.reactivate();\n\n        });\n      }\n    }, {\n      key: \"getHistory\",\n      value: function getHistory() {\n        var _this5 = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        var historyResponse;\n        this.walletHistorySubscription = this.apiService.getWalletHistory(walletInfo).subscribe(function (response) {\n          if (!!response.history && response.history[0].transactionsHistory.length > 0) {\n            historyResponse = response.history[0].transactionsHistory;\n\n            _this5.getTransactionInfo(historyResponse);\n          }\n        }, function (error) {\n          _this5.apiService.handleException(error); // this.reactivate();\n\n        });\n      }\n    }, {\n      key: \"getTransactionInfo\",\n      value: function getTransactionInfo(transactions) {\n        this.transactionArray = [];\n\n        var _iterator = _createForOfIteratorHelper(transactions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var transaction = _step.value;\n            var transactionType = void 0;\n\n            if (transaction.type === 'send') {\n              transactionType = 'sent';\n            } else if (transaction.type === 'received') {\n              transactionType = 'received';\n            } else if (transaction.type === 'staked') {\n              transactionType = 'staked';\n            }\n\n            var transactionId = transaction.id;\n            var transactionAmount = transaction.amount;\n            var transactionFee = void 0;\n\n            if (transaction.fee) {\n              transactionFee = transaction.fee;\n            } else {\n              transactionFee = 0;\n            }\n\n            var transactionConfirmedInBlock = transaction.confirmedInBlock;\n            var transactionTimestamp = transaction.timestamp;\n            this.transactionArray.push(new TransactionInfo(transactionType, transactionId, transactionAmount, transactionFee, transactionConfirmedInBlock, transactionTimestamp));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._history.next(this.transactionArray);\n      } // \"{\"enabled\":true,\"staking\":true,\"errors\":null,\"currentBlockSize\":151,\"currentBlockTx\":1,\"pooledTx\":0,\"difficulty\":143238.23770936558,\"searchInterval\":16,\"weight\":173749360622480,\"netStakeWeight\":16433501129748,\"expectedTime\":6}\"\n\n    }, {\n      key: \"getStakingInfo\",\n      value: function getStakingInfo() {\n        var _this6 = this;\n\n        this.stakingInfoSubscription = this.apiService.getStakingInfo().subscribe(function (response) {\n          _this6.log.info('Get staking info:', response);\n\n          var stakingResponse = response;\n          _this6.stakingInfo = stakingResponse;\n          _this6.stakingEnabled = stakingResponse.enabled;\n          _this6.stakingActive = stakingResponse.staking;\n          _this6.stakingWeight = stakingResponse.weight;\n          _this6.netStakingWeight = stakingResponse.netStakeWeight;\n          _this6.expectedTime = stakingResponse.expectedTime;\n          _this6.dateTime = _this6.secondsToString(_this6.expectedTime);\n\n          if (_this6.stakingActive) {\n            _this6.isStarting = false;\n          } else {\n            _this6.isStopping = false;\n          }\n        }, function (error) {\n          _this6.apiService.handleException(error); // this.reactivate();\n\n        });\n      }\n    }, {\n      key: \"getGeneralWalletInfo\",\n      value: function getGeneralWalletInfo() {\n        var _this7 = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.generalWalletInfoSubscription = this.apiService.getGeneralInfoTyped(walletInfo).subscribe(function (response) {\n          _this7.log.info('Get wallet info:', response);\n\n          _this7.generalInfo = response;\n          _this7.lastBlockSyncedHeight = _this7.generalInfo.lastBlockSyncedHeight; // Translate the epoch value to a proper JavaScript date.\n\n          _this7.generalInfo.creationTime = new Date(_this7.generalInfo.creationTime * 1000);\n\n          if (_this7.generalInfo.lastBlockSyncedHeight) {\n            _this7.percentSyncedNumber = _this7.generalInfo.lastBlockSyncedHeight / _this7.generalInfo.chainTip * 100;\n\n            if (_this7.percentSyncedNumber.toFixed(0) === '100' && _this7.generalInfo.lastBlockSyncedHeight !== _this7.generalInfo.chainTip) {\n              _this7.percentSyncedNumber = 99;\n            }\n\n            _this7.percentSynced = _this7.percentSyncedNumber.toFixed(0) + '%';\n          }\n        }, function (error) {\n          _this7.apiService.handleException(error); // this.reactivate();\n\n        });\n      }\n    }, {\n      key: \"secondsToString\",\n      value: function secondsToString(seconds) {\n        var numDays = Math.floor(seconds / 86400);\n        var numHours = Math.floor(seconds % 86400 / 3600);\n        var numMinutes = Math.floor(seconds % 86400 % 3600 / 60);\n        var numSeconds = seconds % 86400 % 3600 % 60;\n        var dateString = '';\n\n        if (numDays > 0) {\n          if (numDays > 1) {\n            dateString += numDays + ' days ';\n          } else {\n            dateString += numDays + ' day ';\n          }\n        }\n\n        if (numHours > 0) {\n          if (numHours > 1) {\n            dateString += numHours + ' hours ';\n          } else {\n            dateString += numHours + ' hour ';\n          }\n        }\n\n        if (numMinutes > 0) {\n          if (numMinutes > 1) {\n            dateString += numMinutes + ' minutes ';\n          } else {\n            dateString += numMinutes + ' minute ';\n          }\n        }\n\n        if (dateString === '') {\n          // If dateString is empty at this time, we'll append the seconds. Normally we don't care to show the seconds.\n          dateString = numSeconds + ' seconds';\n        }\n\n        return dateString;\n      }\n    }]);\n\n    return WalletService;\n  }();\n\n  /** @nocollapse */\n  WalletService.ɵfac = function WalletService_Factory(t) {\n    return new (t || WalletService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.GlobalService), i0.ɵɵinject(i3.Logger), i0.ɵɵinject(i4.ApplicationStateService));\n  };\n  /** @nocollapse */\n\n\n  WalletService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: WalletService,\n    factory: WalletService.ɵfac,\n    providedIn: 'root'\n  });\n  return WalletService;\n})();","map":null,"metadata":{},"sourceType":"module"}