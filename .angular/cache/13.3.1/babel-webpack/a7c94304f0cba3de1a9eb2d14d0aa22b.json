{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a;\n\nimport { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { finalize, tap } from 'rxjs/operators';\nimport { Logger } from 'src/app/services/logger.service';\n\nvar LoggingInterceptor = /*#__PURE__*/function () {\n  function LoggingInterceptor(log) {\n    _classCallCheck(this, LoggingInterceptor);\n\n    this.log = log;\n  }\n\n  _createClass(LoggingInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var _this = this;\n\n      var started = Date.now();\n      var ok; // extend server response observable with logging\n\n      return next.handle(req).pipe(tap( // Succeeds when there is a response; ignore other events\n      function (event) {\n        return ok = event instanceof HttpResponse ? 'succeeded' : '';\n      }, // Operation failed; error is an HttpErrorResponse\n      function (error) {\n        return ok = 'failed';\n      }), // Log when response observable either completes or errors\n      finalize(function () {\n        var elapsed = Date.now() - started;\n        var msg = \"\".concat(req.method, \" \\\"\").concat(req.urlWithParams, \"\\\"\\n             \").concat(ok, \" in \").concat(elapsed, \" ms.\");\n\n        _this.log.info(msg);\n      }));\n    }\n  }]);\n\n  return LoggingInterceptor;\n}();\n\nLoggingInterceptor = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_a = typeof Logger !== \"undefined\" && Logger) === \"function\" ? _a : Object])], LoggingInterceptor);\nexport { LoggingInterceptor };","map":null,"metadata":{},"sourceType":"module"}