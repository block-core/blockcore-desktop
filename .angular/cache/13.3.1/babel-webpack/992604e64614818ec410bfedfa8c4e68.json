{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n  var count = Infinity;\n  var delay;\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      var _countOrConfig$count = countOrConfig.count;\n      count = _countOrConfig$count === void 0 ? Infinity : _countOrConfig$count;\n      delay = countOrConfig.delay;\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var sourceSub;\n\n    var resubscribe = function resubscribe() {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n\n      if (delay != null) {\n        var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n        var notifierSubscriber = createOperatorSubscriber(subscriber, function () {\n          notifierSubscriber.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber);\n      } else {\n        subscribeToSource();\n      }\n    };\n\n    var subscribeToSource = function subscribeToSource() {\n      var syncUnsub = false;\n      sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n\n    subscribeToSource();\n  });\n} //# sourceMappingURL=repeat.js.map","map":null,"metadata":{},"sourceType":"module"}