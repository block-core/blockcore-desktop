{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logger.service\";\nimport * as i2 from \"@angular/cdk/overlay\"; // import { APP_CONFIG } from '../../core/injection-tokens/app-config-token';\n// import { AppConfig } from '../../../../environments/app-config.model';\n\nexport var Theme = /*#__PURE__*/(() => {\n  (function (Theme) {\n    Theme[\"Light\"] = \"app-light-theme\";\n    Theme[\"Dark\"] = \"app-dark-theme\";\n  })(Theme || (Theme = {}));\n\n  return Theme;\n})();\nexport class Theming {\n  log;\n  overlayContainer;\n  static singletonInstance;\n  currentThemeSubject = new BehaviorSubject(this.getCurrentTheme());\n\n  constructor(log, overlayContainer) {\n    this.log = log;\n    this.overlayContainer = overlayContainer;\n\n    if (!Theming.singletonInstance) {\n      Theming.singletonInstance = this;\n    }\n\n    return Theming.singletonInstance;\n  }\n\n  get currentTheme() {\n    return this.getCurrentTheme();\n  }\n\n  get currentTheme$() {\n    return this.currentThemeSubject.asObservable();\n  }\n\n  start() {\n    if (this.currentTheme === Theme.Dark) {\n      this.switchToDark();\n    } else {\n      this.switchToLight();\n    }\n  }\n\n  light() {\n    this.switchToLight();\n    this.setCurrentTheme(Theme.Light);\n  }\n\n  dark() {\n    this.switchToDark();\n    this.setCurrentTheme(Theme.Dark);\n  }\n\n  toggle() {\n    if (this.currentTheme === Theme.Dark) {\n      this.log.verbose('Toggle theme to \"Light\" theme.');\n      this.light();\n    } else {\n      this.log.verbose('Toggle theme to \"Dark\" theme.');\n      this.dark();\n    }\n  }\n\n  getCurrentTheme() {\n    return localStorage.getItem('Settings:Theme') || Theme.Dark;\n  }\n\n  setCurrentTheme(theme) {\n    localStorage.setItem('Settings:Theme', theme);\n    this.currentThemeSubject.next(theme);\n  }\n\n  switchToLight() {\n    this.switchTheme(Theme.Dark, Theme.Light);\n  }\n\n  switchToDark() {\n    this.switchTheme(Theme.Light, Theme.Dark);\n  }\n\n  switchTheme(from, to) {\n    this.overlayContainer.getContainerElement().classList.remove(from);\n    this.overlayContainer.getContainerElement().classList.add(to);\n    document.body.classList.remove(from);\n    document.body.classList.add(to);\n  }\n\n  static ɵfac = function Theming_Factory(t) {\n    return new (t || Theming)(i0.ɵɵinject(i1.Logger), i0.ɵɵinject(i2.OverlayContainer));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Theming,\n    factory: Theming.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}