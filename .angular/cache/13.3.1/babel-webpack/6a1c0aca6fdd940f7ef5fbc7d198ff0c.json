{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { SettingsService } from './settings.service';\nimport { HubContainer } from '@models/hub';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./settings.service\";\nexport var HubService = /*#__PURE__*/(function () {\n  var HubService = /*#__PURE__*/function () {\n    function HubService(settings) {\n      _classCallCheck(this, HubService);\n\n      this.settings = settings;\n\n      if (!HubService.singletonInstance) {\n        HubService.singletonInstance = this;\n      } // If we don't have any hubs, make sure we initialize it.\n\n\n      if (settings.hubs == null || settings.hubs.length === 0) {\n        this.hubs = this.initialize();\n      } else {\n        this.hubs = settings.hubs;\n      } // Handle empty hubs array that can happen on new or clean clients.\n\n\n      if (this.hubs == null) {\n        this.hubs = [];\n      }\n\n      return HubService.singletonInstance;\n    }\n\n    _createClass(HubService, [{\n      key: \"api\",\n      value: function api(url) {\n        var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n        var data = arguments.length > 2 ? arguments[2] : undefined;\n        return fetch(url, {\n          method: method,\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(function (response) {\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          return response.json();\n        });\n      }\n    }, {\n      key: \"persist\",\n      value: function persist() {\n        this.settings.hubs = this.hubs;\n      }\n    }, {\n      key: \"put\",\n      value: function put(signedDocument, type) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var hub, url, results;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  hub = this.getHub();\n                  console.log('CONTAINER:', signedDocument); // TODO: Use the URL from the Hub. For now relay on the City Chain Identity host.\n                  // const url = hub.content.url + '/api/' + type;\n\n                  url = 'http://localhost:4335/api/' + type; // const url = 'http://localhost:4335/api/' + signedDocument.id; // .id is a shortcut of '@type/' + id.\n                  // const url = 'https://identity.city-chain.org/' + signedDocument.container + '/' + signedDocument.id;\n\n                  console.log('url', url);\n                  _context.next = 6;\n                  return this.api(url, 'PUT', signedDocument);\n\n                case 6:\n                  results = _context.sent;\n                  console.log('RESULTS:', results);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"download\",\n      value: function download(url) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var MSGPACK_TYPE, response, contentType, object;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  MSGPACK_TYPE = 'application/x-msgpack';\n                  _context2.next = 3;\n                  return fetch(url);\n\n                case 3:\n                  response = _context2.sent;\n                  contentType = response.headers.get('Content-Type');\n\n                  if (contentType && contentType.startsWith(MSGPACK_TYPE) && response.body != null) {\n                    // TODO: FIX!\n                    // const object = await decodeAsync(response.body);\n                    object = null; // do something with object\n                  } else {\n                    /* handle errors */\n                  }\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n      }\n    }, {\n      key: \"getHub\",\n      value: function getHub() {\n        var _this = this;\n\n        var hub = this.hubs.find(function (h) {\n          return h.content.identifier === _this.settings.hub;\n        });\n        return hub;\n      }\n      /**\r\n       * Remvoe a hub hub\r\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(id) {\n        var index = this.hubs.findIndex(function (h) {\n          return h.content.identifier === id;\n        });\n        console.log('Found index:' + index);\n\n        if (index > -1) {\n          console.log('splicing...');\n          this.hubs.splice(index, 1);\n          this.persist();\n        }\n      } // async refresh(hub: HubContainer) {\n      //     const originalUrl = hub.originalUrl;\n      //     const wellKnownUrl = hub.wellKnownUrl;\n      //     console.log('HUB1:', hub);\n      //     try {\n      //         hub = await this.api<HubContainer>(hub.wellKnownUrl);\n      //         hub.originalUrl = originalUrl;\n      //         hub.wellKnownUrl = wellKnownUrl;\n      //         hub.status = 'Online';\n      //         console.log('HUB2:', hub);\n      //     }\n      //     catch (err) {\n      //         hub.status = 'Error: ' + err;\n      //     }\n      // }\n\n      /**\r\n       * Add a hub\r\n       */\n\n    }, {\n      key: \"add\",\n      value: function add(url) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          var hubUrl, hub, existingIndex;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  hubUrl = url; // Build the entire URL for retreiving the identity of specified hub.\n\n                  if (hubUrl.indexOf('.well-known') === -1) {\n                    if (hubUrl.substring(hubUrl.length - 1) !== '/') {\n                      hubUrl += '/';\n                    }\n\n                    hubUrl += '.well-known/blockcore/node/identity';\n                  }\n\n                  hub = null;\n                  _context3.prev = 3;\n                  _context3.next = 6;\n                  return this.api(hubUrl);\n\n                case 6:\n                  hub = _context3.sent;\n                  hub.originalUrl = url;\n                  hub.wellKnownUrl = hubUrl;\n                  hub.status = 'Online'; // If this hub already exists, simply replace it.\n\n                  existingIndex = this.hubs.findIndex(function (h) {\n                    return h.content.identifier === hub.content.identifier;\n                  });\n\n                  if (existingIndex > -1) {\n                    console.log('ALREADY EXISTS, REMOVE IT!');\n                    this.hubs.splice(existingIndex, 1);\n                  }\n\n                  _context3.next = 17;\n                  break;\n\n                case 14:\n                  _context3.prev = 14;\n                  _context3.t0 = _context3[\"catch\"](3);\n                  hub.status = 'Error: ' + _context3.t0;\n\n                case 17:\n                  if (hub) {\n                    this.hubs.push(hub); // If there is only a single hub entry, make sure it's the default one.\n\n                    if (this.hubs.length === 1) {\n                      this.settings.hub = hub.content.identifier;\n                    }\n                  }\n\n                  this.persist();\n\n                case 19:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this, [[3, 14]]);\n        }));\n      }\n    }, {\n      key: \"initialize\",\n      value: function initialize() {\n        this.hubs = [];\n        return this.hubs;\n      }\n    }]);\n\n    return HubService;\n  }();\n\n  /** @nocollapse */\n  HubService.ɵfac = function HubService_Factory(t) {\n    return new (t || HubService)(i0.ɵɵinject(i1.SettingsService));\n  };\n  /** @nocollapse */\n\n\n  HubService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: HubService,\n    factory: HubService.ɵfac,\n    providedIn: 'root'\n  });\n  return HubService;\n})();","map":null,"metadata":{},"sourceType":"module"}