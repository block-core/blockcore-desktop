{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElectronService } from 'ngx-electron';\nimport { StorageService } from './storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./storage.service\";\nexport var SettingsService = /*#__PURE__*/(function () {\n  var SettingsService = /*#__PURE__*/function () {\n    function SettingsService(electron, storage) {\n      _classCallCheck(this, SettingsService);\n\n      this.electron = electron;\n      this.storage = storage;\n    }\n    /** The UI mode of the application. Defaults to basic for most users. */\n\n\n    _createClass(SettingsService, [{\n      key: \"mode\",\n      get: function get() {\n        return this.storage.getValue('Settings:Mode', 'basic');\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:Mode', value);\n      }\n      /** Set different wallet modes, the default is multi. Single address mode is not adviceable and can have unexpected effects. */\n\n    }, {\n      key: \"walletMode\",\n      get: function get() {\n        return this.storage.getValue('Settings:WalletMode', 'multi');\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:WalletMode', value);\n      }\n    }, {\n      key: \"hubs\",\n      get: function get() {\n        var hubs = this.storage.getJSON('Settings:Hubs', '[]');\n\n        if (hubs === 'undefined') {\n          return [];\n        }\n\n        return hubs;\n      },\n      set: function set(value) {\n        this.storage.setJSON('Settings:Hubs', value);\n      }\n    }, {\n      key: \"hub\",\n      get: function get() {\n        return this.storage.getValue('Settings:Hub');\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:Hub', value);\n      } // get identities(): any {\n      //     return this.storage.getJSON('Settings:Identities');\n      // }\n      // set identities(value: any) {\n      //     this.storage.setJSON('Settings:Identities', value);\n      // }\n      // get identity(): string {\n      //     return this.storage.getValue('Settings:Identity');\n      // }\n      // set identity(value: string) {\n      //     this.storage.setValue('Settings:Identity', value);\n      // }\n\n    }, {\n      key: \"language\",\n      get: function get() {\n        return this.storage.getValue('Settings:Language');\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:Language', value);\n      }\n    }, {\n      key: \"currency\",\n      get: function get() {\n        return this.storage.getValue('Settings:Currency');\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:Currency', value);\n      }\n    }, {\n      key: \"showInTaskbar\",\n      get: function get() {\n        if (this.storage.getValue('Settings:ShowInTaskbar') === null) {\n          return true;\n        }\n\n        return this.storage.getValue('Settings:ShowInTaskbar') === 'true';\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:ShowInTaskbar', value.toString());\n      }\n    }, {\n      key: \"openOnLogin\",\n      get: function get() {\n        return this.storage.getValue('Settings:OpenOnLogin') === 'true';\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:OpenOnLogin', value.toString());\n      }\n      /** NOT IMPLEMENTED. Used to automatically lock the wallet after a certain time. */\n\n    }, {\n      key: \"autoLock\",\n      get: function get() {\n        return this.storage.getValue('Settings:AutoLock') === 'true';\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:AutoLock', value.toString());\n      }\n      /** NOT IMPLEMENTED. Used to automatically clear the wallet, not persist it on exit. */\n\n    }, {\n      key: \"clearOnExit\",\n      get: function get() {\n        return this.storage.getValue('Settings:ClearOnExit') === 'true';\n      },\n      set: function set(value) {\n        this.storage.setValue('Settings:ClearOnExit', value.toString());\n      }\n    }]);\n\n    return SettingsService;\n  }();\n\n  /** @nocollapse */\n  SettingsService.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.StorageService));\n  };\n  /** @nocollapse */\n\n\n  SettingsService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SettingsService;\n})();","map":null,"metadata":{},"sourceType":"module"}