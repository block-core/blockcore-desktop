{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./settings.service\";\nimport * as i3 from \"./chain.service\";\nimport * as i4 from \"./storage.service\";\nimport * as i5 from \"./title.service\";\nexport class ApplicationStateService {\n  electron;\n  settings;\n  chains;\n  storage;\n  titleService; // TODO: Figure out when multiple instance of singleton services is fixed for lazy-loaded routing/modules in Angular.\n  // See details here: https://github.com/angular/angular/issues/12889#issuecomment-395720894\n\n  static singletonInstance;\n\n  constructor(electron, settings, chains, storage, titleService) {\n    this.electron = electron;\n    this.settings = settings;\n    this.chains = chains;\n    this.storage = storage;\n    this.titleService = titleService;\n\n    if (!ApplicationStateService.singletonInstance) {\n      this.chain = this.getParam('chain') || 'city';\n      let mode = localStorage.getItem('Network:Mode');\n\n      if (!mode) {\n        mode = localStorage.getItem('Network:ModePrevious');\n      }\n\n      this.daemon = {\n        mode: mode || 'full',\n        network: localStorage.getItem('Network:Network'),\n        path: localStorage.getItem('Network:Path') || '',\n        datafolder: localStorage.getItem('Network:DataFolder') || ''\n      }; // Make sure that the chain setup is available in the appstate on startup.\n\n      this.activeChain = this.chains.availableChains.find(network => network.network === this.daemon.network);\n\n      if (electron.ipcRenderer) {\n        // On startup, we'll send the initial hiding settings to main thread.\n        electron.ipcRenderer.send('settings', {\n          openAtLogin: settings.openOnLogin,\n          showInTaskbar: settings.showInTaskbar\n        });\n      }\n\n      ApplicationStateService.singletonInstance = this;\n    }\n\n    return ApplicationStateService.singletonInstance;\n  }\n\n  accounts = [];\n  networkDefinition;\n  networkParams;\n  version;\n  release;\n  chain;\n  activeChain;\n  changeToChain;\n  isChangingToChain;\n  daemon;\n  pageMode = false;\n  handset = false;\n  fullHeight = false;\n  shutdownInProgress = false;\n  shutdownDelayed = false;\n  /** Indicates if we are connected from Hub to the node. */\n\n  connected = false;\n  changingMode = false;\n  fullNodeVersion;\n  protocolVersion;\n\n  get appTitle$() {\n    return this.titleService.$title;\n  }\n\n  get isElectron() {\n    return this.electron.isElectronApp;\n  }\n\n  get isSimpleMode() {\n    return this.daemon.mode === 'simple';\n  }\n\n  get addressType() {\n    return this.storage.getValue('AddressType', 'Legacy', true);\n  }\n\n  set addressType(value) {\n    this.storage.setValue('AddressType', value, true);\n  }\n\n  addressTypes = ['Legacy', 'Segwit'];\n\n  getParam(n) {\n    const half = location.search.split(n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n  }\n\n  setVersion(version) {\n    this.version = version;\n\n    if (this.version) {\n      const v = version.split('.');\n\n      if (v.length === 3) {\n        this.release = v[2];\n      } else {\n        this.release = version;\n      }\n    }\n  }\n\n  resetNetworkSelection() {\n    localStorage.removeItem('Network:Mode');\n    localStorage.removeItem('Network:Network');\n    localStorage.removeItem('Network:Path');\n    localStorage.removeItem('Network:DataFolder');\n  }\n\n  updateNetworkSelection(persist, mode, network, path, datafolder) {\n    this.daemon.mode = mode;\n    this.daemon.network = network;\n    this.daemon.path = path;\n    this.daemon.datafolder = datafolder;\n\n    if (persist) {\n      localStorage.setItem('Network:Mode', mode);\n      localStorage.setItem('Network:Network', network);\n      localStorage.setItem('Network:Path', path);\n      localStorage.setItem('Network:DataFolder', datafolder);\n    } else {\n      this.resetNetworkSelection();\n    }\n  }\n\n  static ɵfac = function ApplicationStateService_Factory(t) {\n    return new (t || ApplicationStateService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.SettingsService), i0.ɵɵinject(i3.ChainService), i0.ɵɵinject(i4.StorageService), i0.ɵɵinject(i5.TitleService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApplicationStateService,\n    factory: ApplicationStateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}