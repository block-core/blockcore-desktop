{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport var LogLevel = /*#__PURE__*/(() => {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"Verbose\"] = 0] = \"Verbose\";\n    LogLevel[LogLevel[\"Info\"] = 1] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n    LogLevel[LogLevel[\"Critical\"] = 4] = \"Critical\";\n  })(LogLevel || (LogLevel = {}));\n\n  return LogLevel;\n})();\nexport class Logger {\n  logLevel = LogLevel.Info;\n  messages = [];\n\n  constructor() {}\n\n  setLogLevel(logLevel) {\n    this.logLevel = logLevel;\n  }\n\n  verbose(message, ...args) {\n    this.log(LogLevel.Verbose, message, ...args);\n  }\n\n  info(message, ...args) {\n    this.log(LogLevel.Info, message, ...args);\n  }\n\n  warn(message, ...args) {\n    this.log(LogLevel.Warn, message, ...args);\n  }\n\n  error(message, ...args) {\n    this.log(LogLevel.Error, message, ...args);\n  }\n\n  critical(message, ...args) {\n    this.log(LogLevel.Critical, message, ...args);\n  }\n\n  shouldLog(logLevel) {\n    return this.logLevel <= logLevel;\n  }\n\n  lastEntries() {\n    return this.messages;\n  }\n\n  log(logLevel, message, ...args) {\n    if (this.messages.length > 29) {\n      this.messages.shift();\n    }\n\n    this.messages.push({\n      timestamp: new Date(),\n      level: logLevel,\n      message,\n      args\n    });\n\n    if (!this.shouldLog(logLevel)) {\n      return;\n    }\n\n    switch (logLevel) {\n      case LogLevel.Verbose:\n        console.log(`[Hub] ${message}`, ...args);\n        break;\n\n      case LogLevel.Info:\n        // eslint-disable-next-line no-console\n        console.info(`[Hub] ${message}`, ...args);\n        break;\n\n      case LogLevel.Warn:\n        console.warn(`[Hub] ${message}`, ...args);\n        break;\n\n      case LogLevel.Error:\n        console.error(`[Hub] ${message}`, ...args);\n        break;\n\n      case LogLevel.Critical:\n        console.error(`[Hub] [CRITICAL] ${message}`, ...args);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  static ɵfac = function Logger_Factory(t) {\n    return new (t || Logger)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Logger,\n    factory: Logger.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}