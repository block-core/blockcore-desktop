{"ast":null,"code":"import _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport Dexie from 'dexie';\nimport * as i0 from \"@angular/core\";\n/** The storage service will recognice the current wallet and storage wallet-dependent items isolated. */\n\nexport var StorageService = /*#__PURE__*/(function () {\n  var StorageService = /*#__PURE__*/function () {\n    function StorageService() {\n      _classCallCheck(this, StorageService);\n    }\n\n    _createClass(StorageService, [{\n      key: \"setWalletName\",\n      value: function setWalletName(walletName, coinType) {\n        this.walletName = walletName;\n        this.coinType = coinType;\n      }\n    }, {\n      key: \"getIsolatedKey\",\n      value: function getIsolatedKey(key) {\n        return this.coinType + ':' + this.walletName + ':' + key;\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(key, defaultValue, isolated) {\n        if (isolated) {\n          key = this.getIsolatedKey(key);\n        }\n\n        return localStorage.getItem(key) || defaultValue;\n      }\n    }, {\n      key: \"getNumber\",\n      value: function getNumber(key, defaultValue, isolated) {\n        if (isolated) {\n          key = this.getIsolatedKey(key);\n        }\n\n        var val = localStorage.getItem(key);\n\n        if (val == null) {\n          return defaultValue;\n        }\n\n        return Number(val);\n      }\n    }, {\n      key: \"setValue\",\n      value: function setValue(key, value, isolated) {\n        if (isolated) {\n          key = this.getIsolatedKey(key);\n        }\n\n        localStorage.setItem(key, value);\n      }\n    }, {\n      key: \"getJSON\",\n      value: function getJSON(key, defaultValue, isolated) {\n        if (isolated) {\n          key = this.getIsolatedKey(key);\n        }\n\n        var value = localStorage.getItem(key);\n\n        if (value == null) {\n          // null or undefined\n          value = defaultValue || '{}'; // if we don't have a default value, we make it empty JSON object.\n        }\n\n        return JSON.parse(value);\n      }\n    }, {\n      key: \"setJSON\",\n      value: function setJSON(key, value, isolated) {\n        if (isolated) {\n          key = this.getIsolatedKey(key);\n        }\n\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    }]);\n\n    return StorageService;\n  }();\n\n  /** @nocollapse */\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)();\n  };\n  /** @nocollapse */\n\n\n  StorageService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();\nexport var DatabaseStorageService = /*#__PURE__*/function (_Dexie) {\n  _inherits(DatabaseStorageService, _Dexie);\n\n  var _super = _createSuper(DatabaseStorageService);\n\n  function DatabaseStorageService(databaseName) {\n    var _this;\n\n    _classCallCheck(this, DatabaseStorageService);\n\n    _this = _super.call(this, databaseName); //\n    // Define tables and indexes\n    // (Here's where the implicit table props are dynamically created)\n    //\n\n    _this.version(1).stores({\n      wallets: '++id, name, network, coinType'\n    });\n\n    return _this;\n  }\n\n  return _createClass(DatabaseStorageService);\n}(Dexie);","map":null,"metadata":{},"sourceType":"module"}