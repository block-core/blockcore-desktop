{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpResponse } from '@angular/common/http';\nimport { finalize, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/logger.service\";\nexport var LoggingInterceptor = /*#__PURE__*/(function () {\n  var LoggingInterceptor = /*#__PURE__*/function () {\n    function LoggingInterceptor(log) {\n      _classCallCheck(this, LoggingInterceptor);\n\n      this.log = log;\n    }\n\n    _createClass(LoggingInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        var _this = this;\n\n        var started = Date.now();\n        var ok; // extend server response observable with logging\n\n        return next.handle(req).pipe(tap( // Succeeds when there is a response; ignore other events\n        function (event) {\n          return ok = event instanceof HttpResponse ? 'succeeded' : '';\n        }, // Operation failed; error is an HttpErrorResponse\n        function (error) {\n          return ok = 'failed';\n        }), // Log when response observable either completes or errors\n        finalize(function () {\n          var elapsed = Date.now() - started;\n          var msg = \"\".concat(req.method, \" \\\"\").concat(req.urlWithParams, \"\\\"\\n             \").concat(ok, \" in \").concat(elapsed, \" ms.\");\n\n          _this.log.info(msg);\n        }));\n      }\n    }]);\n\n    return LoggingInterceptor;\n  }();\n\n  LoggingInterceptor.ɵfac = function LoggingInterceptor_Factory(t) {\n    return new (t || LoggingInterceptor)(i0.ɵɵinject(i1.Logger));\n  };\n\n  LoggingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggingInterceptor,\n    factory: LoggingInterceptor.ɵfac\n  });\n  return LoggingInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}