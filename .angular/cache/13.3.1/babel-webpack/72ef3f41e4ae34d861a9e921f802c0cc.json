{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _get from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _MatTreeNodeBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nvar MatTreeNode = /*#__PURE__*/(function () {\n  var MatTreeNode = /*#__PURE__*/function (_MatTreeNodeBase2) {\n    _inherits(MatTreeNode, _MatTreeNodeBase2);\n\n    var _super = _createSuper(MatTreeNode);\n\n    function MatTreeNode(elementRef, tree, tabIndex) {\n      var _this;\n\n      _classCallCheck(this, MatTreeNode);\n\n      _this = _super.call(this, elementRef, tree);\n      _this.tabIndex = Number(tabIndex) || 0;\n      return _this;\n    } // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n    _createClass(MatTreeNode, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n    }]);\n\n    return MatTreeNode;\n  }(_MatTreeNodeBase);\n\n  MatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    hostAttrs: [1, \"mat-tree-node\"],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matTreeNode\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/(function () {\n  var MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n    _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n    var _super2 = _createSuper(MatTreeNodeDef);\n\n    function MatTreeNodeDef() {\n      _classCallCheck(this, MatTreeNodeDef);\n\n      return _super2.apply(this, arguments);\n    }\n\n    return _createClass(MatTreeNodeDef);\n  }(CdkTreeNodeDef);\n\n  MatTreeNodeDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n\n  MatTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/(function () {\n  var MatNestedTreeNode = /*#__PURE__*/function (_CdkNestedTreeNode) {\n    _inherits(MatNestedTreeNode, _CdkNestedTreeNode);\n\n    var _super3 = _createSuper(MatNestedTreeNode);\n\n    function MatNestedTreeNode(elementRef, tree, differs, tabIndex) {\n      var _this2;\n\n      _classCallCheck(this, MatNestedTreeNode);\n\n      _this2 = _super3.call(this, elementRef, tree, differs);\n      _this2._disabled = false;\n      _this2.tabIndex = Number(tabIndex) || 0;\n      return _this2;\n    }\n    /** Whether the node is disabled. */\n\n\n    _createClass(MatNestedTreeNode, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /** Tabindex for the node. */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this.disabled ? -1 : this._tabIndex;\n      },\n      set: function set(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n      } // This is a workaround for https://github.com/angular/angular/issues/19145\n      // In aot mode, the lifecycle hooks from parent class are not called.\n      // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n    }]);\n\n    return MatNestedTreeNode;\n  }(CdkNestedTreeNode);\n\n  MatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    hostAttrs: [1, \"mat-nested-tree-node\"],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      node: [\"matNestedTreeNode\", \"node\"]\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/(function () {\n  var MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n    _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n    var _super4 = _createSuper(MatTreeNodePadding);\n\n    function MatTreeNodePadding() {\n      _classCallCheck(this, MatTreeNodePadding);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(MatTreeNodePadding, [{\n      key: \"level\",\n      get:\n      /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n      function get() {\n        return this._level;\n      },\n      set: function set(value) {\n        this._setLevelInput(value);\n      }\n      /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      },\n      set: function set(indent) {\n        this._setIndentInput(indent);\n      }\n    }]);\n\n    return MatTreeNodePadding;\n  }(CdkTreeNodePadding);\n\n  MatTreeNodePadding.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n\n  MatTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\"],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nvar MatTreeNodeOutlet = /*#__PURE__*/(function () {\n  var MatTreeNodeOutlet = /*#__PURE__*/_createClass(function MatTreeNodeOutlet(viewContainer, _node) {\n    _classCallCheck(this, MatTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  });\n\n  MatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  MatTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }])]\n  });\n  return MatTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nvar MatTree = /*#__PURE__*/(function () {\n  var MatTree = /*#__PURE__*/function (_CdkTree) {\n    _inherits(MatTree, _CdkTree);\n\n    var _super5 = _createSuper(MatTree);\n\n    function MatTree() {\n      _classCallCheck(this, MatTree);\n\n      return _super5.apply(this, arguments);\n    }\n\n    return _createClass(MatTree);\n  }(CdkTree);\n\n  MatTree.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n\n  MatTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n    exportAs: [\"matTree\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n    encapsulation: 2\n  });\n  return MatTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/(function () {\n  var MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n    _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n    var _super6 = _createSuper(MatTreeNodeToggle);\n\n    function MatTreeNodeToggle() {\n      _classCallCheck(this, MatTreeNodeToggle);\n\n      return _super6.apply(this, arguments);\n    }\n\n    return _createClass(MatTreeNodeToggle);\n  }(CdkTreeNodeToggle);\n\n  MatTreeNodeToggle.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n\n  MatTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nvar MatTreeModule = /*#__PURE__*/(function () {\n  var MatTreeModule = /*#__PURE__*/_createClass(function MatTreeModule() {\n    _classCallCheck(this, MatTreeModule);\n  });\n\n  MatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n\n  MatTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  MatTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this3 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this3._flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this4._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this5 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this5._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this6 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this6.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this6.isExpandable(node)) {\n          currentExpand[_this6.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\n    var _this7;\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this7 = _super7.call(this);\n    _this7._treeControl = _treeControl;\n    _this7._treeFlattener = _treeFlattener;\n    _this7._flattenedData = new BehaviorSubject([]);\n    _this7._expandedData = new BehaviorSubject([]);\n    _this7._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      _this7.data = initialData;\n    }\n\n    return _this7;\n  }\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this8 = this;\n\n      return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(function () {\n        _this8._expandedData.next(_this8._treeFlattener.expandFlattenedNodes(_this8._flattenedData.value, _this8._treeControl));\n\n        return _this8._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this9;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this9 = _super8.apply(this, arguments);\n    _this9._data = new BehaviorSubject([]);\n    return _this9;\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this10 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this10.data;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle }; //# sourceMappingURL=tree.mjs.map","map":null,"metadata":{},"sourceType":"module"}