{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"./application-state.service\";\nexport class UpdateService {\n  electronService;\n  notificationService;\n  appState;\n  static singletonInstance;\n  ipc;\n  info;\n  progress;\n  downloaded = false;\n  available = false;\n  downloading = false;\n\n  constructor(electronService, notificationService, appState) {\n    this.electronService = electronService;\n    this.notificationService = notificationService;\n    this.appState = appState;\n\n    if (electronService.ipcRenderer) {\n      this.ipc = electronService.ipcRenderer;\n\n      if (!UpdateService.singletonInstance) {\n        this.ipc.on('check-for-update', (event, info) => {\n          // notificationService.show({ title: 'Checking for update...', body: JSON.stringify(info) });\n          console.log('check-for-update: ', info);\n        });\n        this.ipc.on('update-available', (event, info) => {\n          // notificationService.show({ title: 'Update available!', body: JSON.stringify(info)});\n          console.log('update-available: ', info);\n          this.info = info;\n          this.available = true;\n        });\n        this.ipc.on('update-not-available', (event, info) => {\n          // notificationService.show({ title: 'Update not available', body: JSON.stringify(info) });\n          console.log('update-not-available: ', info);\n          this.info = info;\n          this.available = false;\n        });\n        this.ipc.on('update-downloaded', (event, info) => {\n          console.log('update-downloaded: ', info);\n          this.downloaded = true;\n        });\n        this.ipc.on('download-progress', (event, progress) => {\n          console.log('download-progress: ', progress);\n          this.progress = progress;\n        });\n        this.ipc.on('update-error', (event, error) => {\n          // notificationService.show({ title: 'Update error', body: error.message });\n          console.log('update-error: ', error);\n        });\n        UpdateService.singletonInstance = this;\n      }\n    }\n\n    return UpdateService.singletonInstance;\n  }\n\n  checkForUpdate() {\n    if (this.ipc) {\n      this.electronService.ipcRenderer.send('check-for-update');\n    }\n  }\n\n  downloadUpdate() {\n    if (this.ipc) {\n      this.downloading = true;\n      this.electronService.ipcRenderer.send('download-update');\n    }\n  }\n\n  installUpdate() {\n    if (this.ipc) {\n      this.downloading = false;\n      this.electronService.ipcRenderer.send('install-update');\n    }\n  }\n\n  static ɵfac = function UpdateService_Factory(t) {\n    return new (t || UpdateService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.ApplicationStateService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UpdateService,\n    factory: UpdateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}