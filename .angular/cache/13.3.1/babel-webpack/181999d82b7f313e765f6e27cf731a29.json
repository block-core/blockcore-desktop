{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a;\n\nimport { Component, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ApplicationStateService } from '../../../services/application-state.service';\nimport { GlobalService } from '../../../services/global.service';\nimport { ApiService } from '../../../services/api.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TransactionBuilding } from '../../../classes/transaction-building';\nimport { debounceTime } from 'rxjs/operators';\nimport { CoinNotationPipe } from '../../../shared/pipes/coin-notation.pipe';\nimport { FeeEstimation } from '../../../classes/fee-estimation';\nimport { TransactionSending } from '../../../classes/transaction-sending';\nimport { WalletInfo } from '../../../classes/wallet-info';\nimport { Router } from '@angular/router';\nimport { WalletService } from '../../../services/wallet.service';\nimport { AppModes } from 'src/app/shared/app-modes';\n\nvar SendComponent = /*#__PURE__*/function () {\n  function SendComponent(appState, appModes, apiService, location, router, wallet, globalService, fb) {\n    _classCallCheck(this, SendComponent);\n\n    this.appState = appState;\n    this.appModes = appModes;\n    this.apiService = apiService;\n    this.location = location;\n    this.router = router;\n    this.wallet = wallet;\n    this.globalService = globalService;\n    this.fb = fb;\n    this.hostClass = true;\n    this.isSending = false;\n    this.estimatedFee = 0;\n    this.totalBalance = 0;\n    this.showInputField = true;\n    this.showSendingField = false;\n    this.showConfirmationField = false; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.formErrors = {\n      address: '',\n      amount: '',\n      fee: '',\n      password: '',\n      opreturndata: '',\n      opreturnamount: ''\n    }; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.validationMessages = {\n      address: {\n        required: 'An address is required.',\n        minlength: 'An address is at least 26 characters long.'\n      },\n      amount: {\n        required: 'An amount is required.',\n        pattern: 'Enter a valid transaction amount. Only positive numbers and no more than 8 decimals are allowed.',\n        min: 'The amount has to be more or equal to 0.00001 City.',\n        max: 'The total transaction amount exceeds your available balance.'\n      },\n      fee: {\n        required: 'A fee is required.'\n      },\n      password: {\n        required: 'Your password is required.'\n      },\n      opreturndata: {\n        max: 'Maximum 80 characters.'\n      },\n      opreturnamount: {\n        pattern: 'Enter a valid amount. Only positive numbers and no more than 8 decimals are allowed.'\n      }\n    };\n    this.appState.pageMode = true;\n    this.buildSendForm();\n  }\n\n  _createClass(SendComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.startSubscriptions();\n      this.coinUnit = this.globalService.getCoinUnit();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.appState.pageMode = false;\n      this.cancelSubscriptions();\n    }\n  }, {\n    key: \"buildSendForm\",\n    value: function buildSendForm() {\n      var _this = this;\n\n      this.sendForm = this.fb.group({\n        address: ['', Validators.compose([Validators.required, Validators.minLength(26)])],\n        amount: ['', Validators.compose([Validators.required, Validators.pattern(/^([0-9]+)?(\\.[0-9]{0,8})?$/), Validators.min(0.00001), function (control) {\n          return Validators.max((_this.totalBalance - _this.estimatedFee) / 100000000)(control);\n        }])],\n        fee: ['medium', Validators.required],\n        password: ['', Validators.required],\n        shuffleOutputs: [true],\n        opreturndata: ['', Validators.compose([Validators.maxLength(this.appState.activeChain.opreturndata)])],\n        opreturnamount: ['', Validators.compose([Validators.pattern(/^([0-9]+)?(\\.[0-9]{0,8})?$/)])]\n      });\n      this.sendForm.valueChanges.pipe(debounceTime(300)).subscribe(function (data) {\n        return _this.onValueChanged(data);\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isSending = false;\n      this.location.back();\n    }\n  }, {\n    key: \"onValueChanged\",\n    value: function onValueChanged(data) {\n      if (!this.sendForm) {\n        return;\n      }\n\n      var form = this.sendForm; // eslint-disable-next-line guard-for-in\n\n      for (var field in this.formErrors) {\n        this.formErrors[field] = '';\n        var control = form.get(field);\n\n        if (control && control.dirty && !control.valid) {\n          var messages = this.validationMessages[field]; // eslint-disable-next-line guard-for-in\n\n          for (var key in control.errors) {\n            this.formErrors[field] += messages[key] + ' ';\n          }\n        }\n      }\n\n      this.apiError = '';\n\n      if (this.sendForm.get('address').valid && this.sendForm.get('amount').valid) {\n        this.estimateFee();\n      }\n    }\n  }, {\n    key: \"getMaxBalance\",\n    value: function getMaxBalance() {\n      var _this2 = this;\n\n      var data = {\n        walletName: this.globalService.getWalletName(),\n        accontName: 'account 0',\n        feeType: this.sendForm.get('fee').value\n      };\n      var balanceResponse;\n      this.apiService.getMaximumBalance(data).subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        balanceResponse = response; // }\n      }, function (error) {\n        console.log(error);\n\n        if (error.status === 0) {\n          // this.genericModalService.openModal(null, null);\n          _this2.apiError = 'Something went wrong while connecting to the API. Please restart the application.';\n        } else if (error.status >= 400) {\n          _this2.apiService.handleException(error);\n\n          if (!error.error.errors[0]) {} else {\n            _this2.apiError = error.error.errors[0].message;\n          }\n        }\n      }, function () {\n        _this2.sendForm.patchValue({\n          amount: +new CoinNotationPipe(_this2.globalService).transform(balanceResponse.maxSpendableAmount)\n        });\n\n        _this2.estimatedFee = balanceResponse.fee;\n      });\n    }\n  }, {\n    key: \"estimateFee\",\n    value: function estimateFee() {\n      var _this3 = this;\n\n      var transaction = new FeeEstimation(this.globalService.getWalletName(), 'account 0', this.sendForm.get('address').value.trim(), this.sendForm.get('amount').value, this.sendForm.get('fee').value, true, this.sendForm.get('opreturndata').value, this.sendForm.get('opreturnamount').value);\n      this.apiService.estimateFee(transaction).subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        _this3.responseMessage = response; // }\n      }, function (error) {\n        console.log(error);\n\n        if (error.status === 0) {// this.genericModalService.openModal(null, null);\n        } else if (error.status >= 400) {\n          _this3.apiService.handleException(error);\n\n          if (!error.error.errors[0]) {\n            _this3.apiError = error;\n          } else {\n            // this.genericModalService.openModal(null, error.json().errors[0].message);\n            _this3.apiError = error.error.errors[0].message;\n          }\n        }\n      }, function () {\n        _this3.estimatedFee = _this3.responseMessage;\n      });\n    }\n  }, {\n    key: \"buildTransaction\",\n    value: function buildTransaction() {\n      var _this4 = this;\n\n      this.transaction = new TransactionBuilding(this.globalService.getWalletName(), 'account 0', this.sendForm.get('password').value, this.sendForm.get('address').value.trim(), this.sendForm.get('amount').value, this.sendForm.get('fee').value, // TO DO: use coin notation\n      this.estimatedFee / 100000000, true, this.sendForm.get('shuffleOutputs').value, this.wallet.isSingleAddressMode, this.sendForm.get('opreturndata').value, this.sendForm.get('opreturnamount').value);\n      this.apiService.buildTransaction(this.transaction).subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        console.log(response);\n        _this4.responseMessage = response; // }\n      }, function (error) {\n        console.log(error);\n        _this4.isSending = false;\n        _this4.showInputField = true;\n        _this4.showConfirmationField = false;\n        _this4.showSendingField = false;\n\n        if (error.status === 0) {\n          // this.genericModalService.openModal(null, null);\n          _this4.apiError = 'Something went wrong while connecting to the API. Please restart the application.';\n        } else if (error.status >= 400) {\n          _this4.apiService.handleException(error);\n\n          if (!error.error.errors[0]) {} else {\n            // this.genericModalService.openModal(null, error.json().errors[0].message);\n            _this4.apiError = error.error.errors[0].message;\n          }\n        }\n      }, function () {\n        _this4.estimatedFee = _this4.responseMessage.fee;\n        _this4.transactionHex = _this4.responseMessage.hex;\n\n        if (_this4.isSending) {\n          _this4.sendTransaction(_this4.transactionHex);\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      this.isSending = true;\n      this.showInputField = false;\n      this.showConfirmationField = false;\n      this.showSendingField = true;\n      this.buildTransaction();\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(hex) {\n      var _this5 = this;\n\n      var transaction = new TransactionSending(hex);\n      this.apiService.sendTransaction(transaction).subscribe(function (response) {\n        _this5.transactionResult = response;\n      }, function (error) {\n        console.log(error);\n        _this5.isSending = false;\n\n        if (error.status === 0) {\n          // this.genericModalService.openModal(null, null);\n          _this5.apiError = 'Something went wrong while connecting to the API. Please restart the application.';\n        } else if (error.status >= 400) {\n          _this5.apiService.handleException(error);\n\n          if (!error.error.errors[0]) {} else {\n            // this.genericModalService.openModal(null, error.json().errors[0].message);\n            _this5.apiError = error.error.errors[0].message;\n          }\n        }\n      }, function () {\n        return _this5.openConfirmationModal();\n      });\n    }\n  }, {\n    key: \"getWalletBalance\",\n    value: function getWalletBalance() {\n      var _this6 = this;\n\n      var walletInfo = new WalletInfo(this.globalService.getWalletName());\n      this.walletBalanceSubscription = this.apiService.getWalletBalance(walletInfo).subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        var balanceResponse = response; // TO DO - add account feature instead of using first entry in array\n\n        _this6.totalBalance = balanceResponse.balances[0].amountConfirmed + balanceResponse.balances[0].amountUnconfirmed; // }\n      }, function (error) {\n        console.log(error);\n\n        if (error.status === 0) {// We used to cancelSubscription here, not a good idea if it fails the first time.\n          // this.cancelSubscriptions();\n          // this.genericModalService.openModal(null, null);\n        } else if (error.status >= 400) {\n          _this6.apiService.handleException(error);\n\n          if (!error.error.errors[0]) {} else {\n            if (error.error.errors[0].description) {// this.genericModalService.openModal(null, error.json().errors[0].message);\n            } else {\n              _this6.cancelSubscriptions();\n\n              _this6.startSubscriptions();\n            }\n          }\n        }\n      });\n    } // public get sentAmount(): number {\n    //     return Number(this.transaction.amount);\n    // }\n\n  }, {\n    key: \"openConfirmationModal\",\n    value: function openConfirmationModal() {\n      console.log('Show confirmation TX: ', this.transaction);\n      console.log('Show confirmation FEE: ', this.estimatedFee);\n      this.showSendingField = false;\n      this.showConfirmationField = true; // const modalRef = this.modalService.open(SendConfirmationComponent, { backdrop: \"static\" });\n      // modalRef.componentInstance.transaction = this.transaction;\n      // modalRef.componentInstance.transactionFee = this.estimatedFee;\n    }\n  }, {\n    key: \"cancelSubscriptions\",\n    value: function cancelSubscriptions() {\n      if (this.walletBalanceSubscription) {\n        this.walletBalanceSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"startSubscriptions\",\n    value: function startSubscriptions() {\n      this.getWalletBalance();\n    }\n  }]);\n\n  return SendComponent;\n}();\n\n__decorate([HostBinding('class.send'), __metadata(\"design:type\", Object)], SendComponent.prototype, \"hostClass\", void 0);\n\nSendComponent = __decorate([Component({\n  selector: 'app-send',\n  templateUrl: './send.component.html',\n  styleUrls: ['./send.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [ApplicationStateService, typeof (_a = typeof AppModes !== \"undefined\" && AppModes) === \"function\" ? _a : Object, ApiService, Location, Router, WalletService, GlobalService, FormBuilder])], SendComponent);\nexport { SendComponent };","map":null,"metadata":{},"sourceType":"module"}