{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from \"@angular/core\";\nexport var NotificationService = /*#__PURE__*/(function () {\n  var NotificationService = /*#__PURE__*/function () {\n    function NotificationService() {\n      _classCallCheck(this, NotificationService);\n\n      this.notifications = new Array(); // this.notifications.push(\n      //     {\n      //         title: 'Unable to connect with server',\n      //         icon: 'warning',\n      //         hint: 'This normally means there is communication issues between Blockcore Hub, and the City Chain background process.',\n      //         message: 'Exception: STACK OVERFLOW!',\n      //         count: 5\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'Unable to connect with server',\n      //         icon: 'error',\n      //         hint: 'This normally means there is communication issues between Blockcore Hub, and the City Chain background process.',\n      //         message: 'Exception: STACK OVERFLOW!',\n      //         count: 1\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'You sent a transaction',\n      //         hint: '1230 coins',\n      //         message: 'Is now fully confirmed (50 confirms).',\n      //         icon: 'done_all',\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'You sent a transaction',\n      //         hint: '2 coins',\n      //         message: 'Unconfirmed',\n      //         icon: 'send',\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'You made a block!',\n      //         hint: 'You received staking rewards of 20 coins',\n      //         message: 'You are currently 0.5% of the total network weight.',\n      //         icon: 'plus_one',\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'You sent a transaction',\n      //         hint: '2 coins',\n      //         message: 'Unconfirmed',\n      //         icon: 'done',\n      //     });\n      // this.notifications.push(\n      //     {\n      //         title: 'You add a new contact',\n      //         hint: 'Contacts can be used to quickly send payments to merchants and people.',\n      //         message: '',\n      //         icon: 'bookmark',\n      //     });\n    } // public count = 0;\n    // public countUnread = 0;\n\n\n    _createClass(NotificationService, [{\n      key: \"any\",\n      get: function get() {\n        return this.notifications.length > 0;\n      }\n    }, {\n      key: \"anyUnread\",\n      get: function get() {\n        return this.countUnread > 0;\n      }\n    }, {\n      key: \"countUnread\",\n      get: function get() {\n        return this.notifications.filter(function (n) {\n          return n.read !== true;\n        }).length;\n      }\n    }, {\n      key: \"count\",\n      get: function get() {\n        return this.notifications.length;\n      }\n    }, {\n      key: \"show\",\n      value: function show(tile) {\n        var notification = {\n          title: tile.title,\n          body: tile.body,\n          icon: require('path').join(__dirname, '../../../assets/city/logo.png')\n        };\n        var nativeNotification = new window.Notification(notification.title, notification);\n\n        nativeNotification.onclick = function () {\n          console.log('Notification clicked');\n        };\n      }\n    }, {\n      key: \"add\",\n      value: function add(tile) {\n        var existing = this.find(tile);\n\n        if (existing) {\n          if (!existing.count) {\n            existing.count = 1;\n          }\n\n          existing.count += 1;\n          existing.date = new Date();\n          this.sort();\n          return;\n        }\n\n        if (!tile.date) {\n          tile.date = new Date();\n        }\n\n        if (!tile.count) {\n          tile.count = 1;\n        }\n\n        this.notifications.push(tile); // We only keep a certain list of notificatoins, so remove the oldest.\n\n        if (this.notifications.length > 20) {\n          this.notifications.shift();\n        }\n\n        this.sort();\n      }\n    }, {\n      key: \"read\",\n      value: function read() {\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (var i = 0; i < this.notifications.length; ++i) {\n          this.notifications[i].read = true;\n        }\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(tile) {\n        var index = this.notifications.findIndex(function (n) {\n          return n === tile;\n        });\n        this.notifications.splice(index, 1);\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.notifications = new Array();\n      }\n    }, {\n      key: \"find\",\n      value: function find(tile) {\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (var i = 0; i < this.notifications.length; ++i) {\n          if (this.notifications[i].message === tile.message) {\n            return this.notifications[i];\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"sort\",\n      value: function sort() {\n        this.notifications = this.notifications.sort(function (a, b) {\n          if (a.date > b.date) {\n            return 1;\n          } else if (a.date < b.date) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n      }\n    }]);\n\n    return NotificationService;\n  }();\n\n  /** @nocollapse */\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)();\n  };\n  /** @nocollapse */\n\n\n  NotificationService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module"}