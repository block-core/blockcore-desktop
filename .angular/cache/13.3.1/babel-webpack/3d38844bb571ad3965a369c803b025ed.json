{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { TitleService } from './title.service';\nimport { ElectronService } from 'ngx-electron';\nimport { SettingsService } from './settings.service';\nimport { ChainService } from './chain.service';\nimport { StorageService } from './storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./settings.service\";\nimport * as i3 from \"./chain.service\";\nimport * as i4 from \"./storage.service\";\nimport * as i5 from \"./title.service\";\nexport var ApplicationStateService = /*#__PURE__*/(function () {\n  var ApplicationStateService = /*#__PURE__*/function () {\n    function ApplicationStateService(electron, settings, chains, storage, titleService) {\n      var _this = this;\n\n      _classCallCheck(this, ApplicationStateService);\n\n      this.electron = electron;\n      this.settings = settings;\n      this.chains = chains;\n      this.storage = storage;\n      this.titleService = titleService;\n      this.accounts = [];\n      this.pageMode = false;\n      this.handset = false;\n      this.fullHeight = false;\n      this.shutdownInProgress = false;\n      this.shutdownDelayed = false;\n      /** Indicates if we are connected from Hub to the node. */\n\n      this.connected = false;\n      this.changingMode = false;\n      this.addressTypes = ['Legacy', 'Segwit'];\n\n      if (!ApplicationStateService.singletonInstance) {\n        this.chain = this.getParam('chain') || 'city';\n        var mode = localStorage.getItem('Network:Mode');\n\n        if (!mode) {\n          mode = localStorage.getItem('Network:ModePrevious');\n        }\n\n        this.daemon = {\n          mode: mode || 'full',\n          network: localStorage.getItem('Network:Network'),\n          path: localStorage.getItem('Network:Path') || '',\n          datafolder: localStorage.getItem('Network:DataFolder') || ''\n        }; // Make sure that the chain setup is available in the appstate on startup.\n\n        this.activeChain = this.chains.availableChains.find(function (network) {\n          return network.network === _this.daemon.network;\n        });\n\n        if (electron.ipcRenderer) {\n          // On startup, we'll send the initial hiding settings to main thread.\n          electron.ipcRenderer.send('settings', {\n            openAtLogin: settings.openOnLogin,\n            showInTaskbar: settings.showInTaskbar\n          });\n        }\n\n        ApplicationStateService.singletonInstance = this;\n      }\n\n      return ApplicationStateService.singletonInstance;\n    }\n\n    _createClass(ApplicationStateService, [{\n      key: \"appTitle$\",\n      get: function get() {\n        return this.titleService.$title;\n      }\n    }, {\n      key: \"isElectron\",\n      get: function get() {\n        return this.electron.isElectronApp;\n      }\n    }, {\n      key: \"isSimpleMode\",\n      get: function get() {\n        return this.daemon.mode === 'simple';\n      }\n    }, {\n      key: \"addressType\",\n      get: function get() {\n        return this.storage.getValue('AddressType', 'Legacy', true);\n      },\n      set: function set(value) {\n        this.storage.setValue('AddressType', value, true);\n      }\n    }, {\n      key: \"getParam\",\n      value: function getParam(n) {\n        var half = location.search.split(n + '=')[1];\n        return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n      }\n    }, {\n      key: \"setVersion\",\n      value: function setVersion(version) {\n        this.version = version;\n\n        if (this.version) {\n          var v = version.split('.');\n\n          if (v.length === 3) {\n            this.release = v[2];\n          } else {\n            this.release = version;\n          }\n        }\n      }\n    }, {\n      key: \"resetNetworkSelection\",\n      value: function resetNetworkSelection() {\n        localStorage.removeItem('Network:Mode');\n        localStorage.removeItem('Network:Network');\n        localStorage.removeItem('Network:Path');\n        localStorage.removeItem('Network:DataFolder');\n      }\n    }, {\n      key: \"updateNetworkSelection\",\n      value: function updateNetworkSelection(persist, mode, network, path, datafolder) {\n        this.daemon.mode = mode;\n        this.daemon.network = network;\n        this.daemon.path = path;\n        this.daemon.datafolder = datafolder;\n\n        if (persist) {\n          localStorage.setItem('Network:Mode', mode);\n          localStorage.setItem('Network:Network', network);\n          localStorage.setItem('Network:Path', path);\n          localStorage.setItem('Network:DataFolder', datafolder);\n        } else {\n          this.resetNetworkSelection();\n        }\n      }\n    }]);\n\n    return ApplicationStateService;\n  }();\n\n  /** @nocollapse */\n  ApplicationStateService.ɵfac = function ApplicationStateService_Factory(t) {\n    return new (t || ApplicationStateService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.SettingsService), i0.ɵɵinject(i3.ChainService), i0.ɵɵinject(i4.StorageService), i0.ɵɵinject(i5.TitleService));\n  };\n  /** @nocollapse */\n\n\n  ApplicationStateService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: ApplicationStateService,\n    factory: ApplicationStateService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationStateService;\n})();","map":null,"metadata":{},"sourceType":"module"}