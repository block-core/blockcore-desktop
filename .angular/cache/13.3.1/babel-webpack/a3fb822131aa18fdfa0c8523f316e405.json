{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { isArrayBuffer } from \"./Utils\";\nvar requestModule;\n\nif (typeof XMLHttpRequest === \"undefined\") {\n  // In order to ignore the dynamic require in webpack builds we need to do this magic\n  // @ts-ignore: TS doesn't know about these names\n  var requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n  requestModule = requireFunc(\"request\");\n}\n\nvar NodeHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(NodeHttpClient, _super);\n\n  function NodeHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    if (typeof requestModule === \"undefined\") {\n      throw new Error(\"The 'request' module could not be loaded.\");\n    }\n\n    _this.logger = logger;\n    _this.cookieJar = requestModule.jar();\n    _this.request = requestModule.defaults({\n      jar: _this.cookieJar\n    });\n    return _this;\n  }\n\n  NodeHttpClient.prototype.send = function (httpRequest) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var requestBody;\n\n      if (isArrayBuffer(httpRequest.content)) {\n        requestBody = Buffer.from(httpRequest.content);\n      } else {\n        requestBody = httpRequest.content || \"\";\n      }\n\n      var currentRequest = _this.request(httpRequest.url, {\n        body: requestBody,\n        // If binary is expected 'null' should be used, otherwise for text 'utf8'\n        encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\n        headers: __assign({\n          // Tell auth middleware to 401 instead of redirecting\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }, httpRequest.headers),\n        method: httpRequest.method,\n        timeout: httpRequest.timeout\n      }, function (error, response, body) {\n        if (httpRequest.abortSignal) {\n          httpRequest.abortSignal.onabort = null;\n        }\n\n        if (error) {\n          if (error.code === \"ETIMEDOUT\") {\n            _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n            reject(new TimeoutError());\n          }\n\n          _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + error);\n\n          reject(error);\n          return;\n        }\n\n        if (response.statusCode >= 200 && response.statusCode < 300) {\n          resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\n        } else {\n          reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\n        }\n      });\n\n      if (httpRequest.abortSignal) {\n        httpRequest.abortSignal.onabort = function () {\n          currentRequest.abort();\n          reject(new AbortError());\n        };\n      }\n    });\n  };\n\n  NodeHttpClient.prototype.getCookieString = function (url) {\n    return this.cookieJar.getCookieString(url);\n  };\n\n  return NodeHttpClient;\n}(HttpClient);\n\nexport { NodeHttpClient }; //# sourceMappingURL=NodeHttpClient.js.map","map":null,"metadata":{},"sourceType":"module"}