{"ast":null,"code":"'use strict';\n\nvar forEach = require('foreach');\n\nvar availableTypedArrays = require('available-typed-arrays');\n\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\n\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\n\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    if (typeof g[typedArray] === 'function') {\n      var arr = new g[typedArray]();\n\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n\n        toStrTags[typedArray] = descriptor.get;\n      }\n    }\n  });\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var foundName = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!foundName) {\n      try {\n        var name = getter.call(value);\n\n        if (name === typedArray) {\n          foundName = name;\n        }\n      } catch (e) {}\n    }\n  });\n  return foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n\n  if (!hasToStringTag || !(Symbol.toStringTag in value)) {\n    return $slice($toString(value), 8, -1);\n  }\n\n  return tryTypedArrays(value);\n};","map":null,"metadata":{},"sourceType":"script"}