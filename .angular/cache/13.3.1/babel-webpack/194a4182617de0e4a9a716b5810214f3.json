{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { isNumberFinite, isPositive, isInteger, toDecimal } from './utils';\nimport * as i0 from \"@angular/core\";\nexport var BytesPipe = /*#__PURE__*/function () {\n  function BytesPipe() {\n    _classCallCheck(this, BytesPipe);\n  }\n\n  _createClass(BytesPipe, [{\n    key: \"transform\",\n    value: function transform(input) {\n      var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'B';\n      var to = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(isNumberFinite(input) && isNumberFinite(decimal) && isInteger(decimal) && isPositive(decimal))) {\n        return input;\n      }\n\n      var bytes = input;\n      var unit = from;\n\n      while (unit !== 'B') {\n        bytes *= 1024;\n        unit = BytesPipe.formats[unit].prev;\n      }\n\n      if (to) {\n        var format = BytesPipe.formats[to];\n        var result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);\n        return BytesPipe.formatResult(result, to);\n      }\n\n      for (var key in BytesPipe.formats) {\n        if (BytesPipe.formats.hasOwnProperty(key)) {\n          var _format = BytesPipe.formats[key];\n\n          if (bytes < _format.max) {\n            var _result = toDecimal(BytesPipe.calculateResult(_format, bytes), decimal);\n\n            return BytesPipe.formatResult(_result, key);\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"formatResult\",\n    value: function formatResult(result, unit) {\n      return \"\".concat(result, \" \").concat(unit);\n    }\n  }, {\n    key: \"calculateResult\",\n    value: function calculateResult(format, bytes) {\n      var prev = format.prev ? BytesPipe.formats[format.prev] : undefined;\n      return prev ? bytes / prev.max : bytes;\n    }\n  }]);\n\n  return BytesPipe;\n}();\nBytesPipe.formats = {\n  B: {\n    max: 1024\n  },\n  kB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  KB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  MB: {\n    max: Math.pow(1024, 3),\n    prev: 'kB'\n  },\n  GB: {\n    max: Math.pow(1024, 4),\n    prev: 'MB'\n  },\n  TB: {\n    max: Number.MAX_SAFE_INTEGER,\n    prev: 'GB'\n  }\n};\n/** @nocollapse */\n\nBytesPipe.ɵfac = function BytesPipe_Factory(t) {\n  return new (t || BytesPipe)();\n};\n/** @nocollapse */\n\n\nBytesPipe.ɵpipe =\n/** @pureOrBreakMyCode */\ni0.ɵɵdefinePipe({\n  name: \"bytes\",\n  type: BytesPipe,\n  pure: true\n});","map":null,"metadata":{},"sourceType":"module"}