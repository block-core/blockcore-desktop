{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logger.service\";\nimport * as i2 from \"@angular/cdk/overlay\"; // import { APP_CONFIG } from '../../core/injection-tokens/app-config-token';\n// import { AppConfig } from '../../../../environments/app-config.model';\n\nexport var Theme = /*#__PURE__*/(function () {\n  (function (Theme) {\n    Theme[\"Light\"] = \"app-light-theme\";\n    Theme[\"Dark\"] = \"app-dark-theme\";\n  })(Theme || (Theme = {}));\n\n  return Theme;\n})();\nexport var Theming = /*#__PURE__*/(function () {\n  var Theming = /*#__PURE__*/function () {\n    function Theming(log, overlayContainer) {\n      _classCallCheck(this, Theming);\n\n      this.log = log;\n      this.overlayContainer = overlayContainer;\n      this.currentThemeSubject = new BehaviorSubject(this.getCurrentTheme());\n\n      if (!Theming.singletonInstance) {\n        Theming.singletonInstance = this;\n      }\n\n      return Theming.singletonInstance;\n    }\n\n    _createClass(Theming, [{\n      key: \"currentTheme\",\n      get: function get() {\n        return this.getCurrentTheme();\n      }\n    }, {\n      key: \"currentTheme$\",\n      get: function get() {\n        return this.currentThemeSubject.asObservable();\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        if (this.currentTheme === Theme.Dark) {\n          this.switchToDark();\n        } else {\n          this.switchToLight();\n        }\n      }\n    }, {\n      key: \"light\",\n      value: function light() {\n        this.switchToLight();\n        this.setCurrentTheme(Theme.Light);\n      }\n    }, {\n      key: \"dark\",\n      value: function dark() {\n        this.switchToDark();\n        this.setCurrentTheme(Theme.Dark);\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        if (this.currentTheme === Theme.Dark) {\n          this.log.verbose('Toggle theme to \"Light\" theme.');\n          this.light();\n        } else {\n          this.log.verbose('Toggle theme to \"Dark\" theme.');\n          this.dark();\n        }\n      }\n    }, {\n      key: \"getCurrentTheme\",\n      value: function getCurrentTheme() {\n        return localStorage.getItem('Settings:Theme') || Theme.Dark;\n      }\n    }, {\n      key: \"setCurrentTheme\",\n      value: function setCurrentTheme(theme) {\n        localStorage.setItem('Settings:Theme', theme);\n        this.currentThemeSubject.next(theme);\n      }\n    }, {\n      key: \"switchToLight\",\n      value: function switchToLight() {\n        this.switchTheme(Theme.Dark, Theme.Light);\n      }\n    }, {\n      key: \"switchToDark\",\n      value: function switchToDark() {\n        this.switchTheme(Theme.Light, Theme.Dark);\n      }\n    }, {\n      key: \"switchTheme\",\n      value: function switchTheme(from, to) {\n        this.overlayContainer.getContainerElement().classList.remove(from);\n        this.overlayContainer.getContainerElement().classList.add(to);\n        document.body.classList.remove(from);\n        document.body.classList.add(to);\n      }\n    }]);\n\n    return Theming;\n  }();\n\n  Theming.ɵfac = function Theming_Factory(t) {\n    return new (t || Theming)(i0.ɵɵinject(i1.Logger), i0.ɵɵinject(i2.OverlayContainer));\n  };\n\n  Theming.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Theming,\n    factory: Theming.ɵfac,\n    providedIn: 'root'\n  });\n  return Theming;\n})();","map":null,"metadata":{},"sourceType":"module"}