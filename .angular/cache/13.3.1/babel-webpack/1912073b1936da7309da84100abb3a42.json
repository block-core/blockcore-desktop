{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { interval, throwError } from 'rxjs';\nimport { map, startWith, switchMap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./application-state.service\";\nimport * as i3 from \"./notification.service\";\nimport * as i4 from \"./logger.service\";\nimport * as i5 from \"@angular/material/snack-bar\";\nexport var CoincapService = /*#__PURE__*/(function () {\n  var CoincapService = /*#__PURE__*/function () {\n    function CoincapService(http, appState, notifications, log, snackBar) {\n      _classCallCheck(this, CoincapService);\n\n      this.http = http;\n      this.appState = appState;\n      this.notifications = notifications;\n      this.log = log;\n      this.snackBar = snackBar;\n      this.pollingInterval = 60000 * 5;\n      this.apiUrl = 'https://api.coincap.io/v2/assets/';\n    }\n\n    _createClass(CoincapService, [{\n      key: \"getAsset\",\n      value: function getAsset(asset) {\n        var _this = this;\n\n        return interval(this.pollingInterval).pipe(startWith(0)).pipe(switchMap(function () {\n          return _this.http.get(_this.apiUrl + asset);\n        })).pipe(catchError(this.handleError.bind(this))).pipe(map(function (response) {\n          return response;\n        }));\n      }\n      /** Use this to handle error (exceptions) that happens in RXJS pipes. This handler will rethrow the error. */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        this.handleException(error);\n        return throwError(error);\n      }\n      /** Use this to handle errors (exceptions) that happens outside of an RXJS pipe. See the \"handleError\" for pipeline error handling. */\n\n    }, {\n      key: \"handleException\",\n      value: function handleException(error) {\n        var _a;\n\n        var errorMessage = '';\n\n        if (error.error instanceof ErrorEvent) {\n          errorMessage = 'An error occurred:' + error.error.message; // A client-side or network error occurred. Handle it accordingly.\n        } else if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.errors) {\n          errorMessage = \"\".concat(error.error.errors[0].message, \" (Code: \").concat(error.error.errors[0].status, \")\");\n        } else if (error.name === 'HttpErrorResponse') {\n          errorMessage = \"Unable to connect with background daemon: \".concat(error.message, \" (\").concat(error.status, \")\"); // if (error.error.target.__zone_symbol__xhrURL.indexOf('api/wallet/files') > -1) {\n          // }\n        } else {\n          errorMessage = \"Error: \".concat(error.message, \" (\").concat(error.status, \")\");\n        }\n\n        this.log.error(errorMessage);\n        this.notifications.add({\n          title: 'Coincap communication issue',\n          hint: 'Coincap.io is our provider of exchange rates, and this notification indicates issues with this integration',\n          message: errorMessage,\n          icon: 'warning'\n        }); // if (errorMessage.indexOf('Http failure response for') === -1) {\n        // this.snackBar.open(errorMessage, null, { duration: 5000, panelClass: 'error-snackbar' });\n        // }\n      }\n    }]);\n\n    return CoincapService;\n  }();\n\n  CoincapService.ɵfac = function CoincapService_Factory(t) {\n    return new (t || CoincapService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationStateService), i0.ɵɵinject(i3.NotificationService), i0.ɵɵinject(i4.Logger), i0.ɵɵinject(i5.MatSnackBar));\n  };\n\n  CoincapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoincapService,\n    factory: CoincapService.ɵfac,\n    providedIn: 'root'\n  });\n  return CoincapService;\n})();","map":null,"metadata":{},"sourceType":"module"}