{"ast":null,"code":"import { retry, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/application-state.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/common\";\n\nfunction LicensesComponent_h1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r0.appState.appTitle$));\n  }\n}\n\nexport class LicensesComponent {\n  appState;\n  cd;\n  sanitizer;\n  http;\n  hostClass = true;\n  selectedContent;\n\n  constructor(appState, cd, sanitizer, http) {\n    this.appState = appState;\n    this.cd = cd;\n    this.sanitizer = sanitizer;\n    this.http = http;\n    this.appState.pageMode = true;\n  }\n\n  ngOnDestroy() {\n    this.appState.pageMode = false;\n  }\n\n  ngOnInit() {\n    const dataFormatter = data => `<pre>${data.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>`;\n\n    this.showContent('3rdpartylicenses.txt', dataFormatter);\n  }\n\n  showContent(contentUrl, dataFormatter = data => data) {\n    this.http.get(contentUrl, {\n      responseType: 'text'\n    }).pipe(retry(2), tap(data => {\n      const formattedData = dataFormatter(data);\n      this.selectedContent = this.sanitizer.bypassSecurityTrustHtml(formattedData);\n      this.cd.markForCheck();\n    }, error => {\n      this.selectedContent = `Unable to get content (${error.statusText})`;\n      this.cd.markForCheck();\n    })).subscribe();\n  }\n\n  static ɵfac = function LicensesComponent_Factory(t) {\n    return new (t || LicensesComponent)(i0.ɵɵdirectiveInject(i1.ApplicationStateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DomSanitizer), i0.ɵɵdirectiveInject(i3.HttpClient));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LicensesComponent,\n    selectors: [[\"app-licenses\"]],\n    hostVars: 2,\n    hostBindings: function LicensesComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"licenses\", ctx.hostClass);\n      }\n    },\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"content\"], [\"class\", \"mat-h1\", 4, \"ngIf\"], [\"href\", \"https://github.com/block-core/blockcore-hub\", \"target\", \"_blank\"], [3, \"innerHTML\"], [1, \"mat-h1\"]],\n    template: function LicensesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, LicensesComponent_h1_1_Template, 3, 3, \"h1\", 1);\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \"Blockcore Hub is an open source project published under the MIT license. You can view the source code on \");\n        i0.ɵɵelementStart(4, \"a\", 2);\n        i0.ɵɵtext(5, \"GitHub\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6, \".\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.appState.handset);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"innerHTML\", ctx.selectedContent, i0.ɵɵsanitizeHtml);\n      }\n    },\n    directives: [i4.NgIf],\n    pipes: [i4.AsyncPipe],\n    styles: [\"\"],\n    encapsulation: 2\n  });\n}","map":null,"metadata":{},"sourceType":"module"}