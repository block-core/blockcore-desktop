{"ast":null,"code":"import { Injectable, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass ElectronService {\n  /**\n   * @private\n   * @return {?}\n   */\n  get electron() {\n    if (!this._electron) {\n      if (window && window.require) {\n        this._electron = window.require('electron');\n        return this._electron;\n      }\n\n      return null;\n    }\n\n    return this._electron;\n  }\n  /**\n   * determines if SPA is running in Electron\n   * @return {?}\n   */\n\n\n  get isElectronApp() {\n    return !!window.navigator.userAgent.match(/Electron/);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isMacOS() {\n    return this.isElectronApp && process.platform === 'darwin';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isWindows() {\n    return this.isElectronApp && process.platform === 'win32';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isLinux() {\n    return this.isElectronApp && process.platform === 'linux';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isX86() {\n    return this.isElectronApp && process.arch === 'ia32';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isX64() {\n    return this.isElectronApp && process.arch === 'x64';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isArm() {\n    return this.isElectronApp && process.arch === 'arm';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get desktopCapturer() {\n    return this.electron ? this.electron.desktopCapturer : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get ipcRenderer() {\n    return this.electron ? this.electron.ipcRenderer : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get remote() {\n    return this.electron ? this.electron.remote : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get webFrame() {\n    return this.electron ? this.electron.webFrame : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get clipboard() {\n    return this.electron ? this.electron.clipboard : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get crashReporter() {\n    return this.electron ? this.electron.crashReporter : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get process() {\n    return this.remote ? this.remote.process : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get nativeImage() {\n    return this.electron ? this.electron.nativeImage : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get screen() {\n    return this.electron ? this.remote.screen : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get shell() {\n    return this.electron ? this.electron.shell : null;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ElectronService.prototype._electron;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ElectronServiceRef = /*#__PURE__*/(() => {\n  class ElectronServiceRef extends ElectronService {\n    constructor() {\n      super();\n    }\n\n  }\n\n  /** @nocollapse */\n  ElectronServiceRef.ɵfac = function ElectronServiceRef_Factory(t) {\n    return new (t || ElectronServiceRef)();\n  };\n  /** @nocollapse */\n\n\n  ElectronServiceRef.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ElectronServiceRef,\n    factory: ElectronServiceRef.ɵfac\n  });\n  /** @nocollapse */\n\n  return ElectronServiceRef;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxElectronModule = /*#__PURE__*/(() => {\n  class NgxElectronModule {}\n\n  /** @nocollapse */\n  NgxElectronModule.ɵfac = function NgxElectronModule_Factory(t) {\n    return new (t || NgxElectronModule)();\n  };\n  /** @nocollapse */\n\n\n  NgxElectronModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxElectronModule\n  });\n  /** @nocollapse */\n\n  NgxElectronModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: ElectronService,\n      useClass: ElectronServiceRef\n    }]\n  });\n  return NgxElectronModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ElectronService, ElectronServiceRef, NgxElectronModule }; //# sourceMappingURL=ngx-electron.js.map","map":null,"metadata":{},"sourceType":"module"}