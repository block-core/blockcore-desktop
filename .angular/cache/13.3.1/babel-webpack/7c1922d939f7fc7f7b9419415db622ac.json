{"ast":null,"code":"import _createForOfIteratorHelper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ApplicationStateService } from '../../../services/application-state.service';\nimport { ApiService } from '../../../services/api.service';\nimport { GlobalService } from '../../../services/global.service';\nimport { WalletInfo } from '../../../classes/wallet-info';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { WalletService } from '../../../services/wallet.service';\nimport { Logger } from '../../../services/logger.service';\nimport * as bip32 from 'bip32';\nimport * as city from 'city-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/application-state.service\";\nimport * as i2 from \"../../../services/wallet.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"../../../services/api.service\";\nimport * as i5 from \"../../../services/logger.service\";\nimport * as i6 from \"../../../services/global.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button-toggle\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/cdk/clipboard\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/tabs\";\n\nfunction ReceiveComponent_h1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r0.appState.appTitle$));\n  }\n}\n\nfunction ReceiveComponent_mat_button_toggle_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-button-toggle\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var addressType_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", addressType_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(addressType_r6);\n  }\n}\n\nfunction ReceiveComponent_form_11_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n                \");\n    i0.ɵɵelementStart(2, \"p\", 10);\n    i0.ɵɵtext(3, \"\\n                    You have enabled Single-Address-Mode in settings, the address above is always the same address. If you enable staking with\\n                    the Single-Address-Mode, you will receive staking rewards on generated change addresses, not on the single\\n                    address above.\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n                \");\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵtext(6, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ReceiveComponent_form_11_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3, \"\\n            \");\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵtext(6, \"\\n\\n                \");\n    i0.ɵɵtext(7, \"\\n\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementStart(9, \"div\");\n    i0.ɵɵtext(10, \"\\n                \");\n    i0.ɵɵelementStart(11, \"code\", 8);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n\\n                \");\n    i0.ɵɵelementStart(14, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_form_11_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r9);\n      var ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onCopiedClick();\n    });\n    i0.ɵɵtext(15, \"\\n                    \");\n    i0.ɵɵelementStart(16, \"mat-icon\");\n    i0.ɵɵtext(17, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(19, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n            \");\n    i0.ɵɵtemplate(21, ReceiveComponent_form_11_div_21_Template, 7, 0, \"div\", 4);\n    i0.ɵɵtext(22, \"\\n            \");\n    i0.ɵɵelementStart(23, \"div\");\n    i0.ɵɵtext(24, \"\\n                \");\n    i0.ɵɵelementStart(25, \"p\", 10);\n    i0.ɵɵtext(26, \"\\n                    When this address is used, you will receive another address. Addresses can be used multiple times. Make sure you always use a fresh\\n                    address to increase your privacy.\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(27, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(28, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵtextInterpolate(ctx_r2.address);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkCopyToClipboard\", ctx_r2.address);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.wallet.isSingleAddressMode);\n  }\n}\n\nfunction ReceiveComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.showOneAddress();\n    });\n    i0.ɵɵtext(1, \"\\u2190 Back to one address\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ReceiveComponent_form_15_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \"\\n                        \");\n    i0.ɵɵelementStart(2, \"code\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n                        \");\n    i0.ɵɵelementStart(5, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_form_15_div_10_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r17);\n      var ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onCopiedClick();\n    });\n    i0.ɵɵtext(6, \"\\n                            \");\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n                    \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var unusedAddress_r15 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(unusedAddress_r15);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkCopyToClipboard\", unusedAddress_r15);\n  }\n}\n\nfunction ReceiveComponent_form_15_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \"\\n                        \");\n    i0.ɵɵelementStart(2, \"code\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n\\n                        \");\n    i0.ɵɵelementStart(5, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_form_15_div_18_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r20);\n      var ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onCopiedClick();\n    });\n    i0.ɵɵtext(6, \"\\n                            \");\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n\\n                    \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var usedAddress_r18 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(usedAddress_r18);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkCopyToClipboard\", usedAddress_r18);\n  }\n}\n\nfunction ReceiveComponent_form_15_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \"\\n                        \");\n    i0.ɵɵelementStart(2, \"code\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n\\n                        \");\n    i0.ɵɵelementStart(5, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_form_15_div_26_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r23);\n      var ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onCopiedClick();\n    });\n    i0.ɵɵtext(6, \"\\n                            \");\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n\\n                    \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var changeAddress_r21 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(changeAddress_r21);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkCopyToClipboard\", changeAddress_r21);\n  }\n}\n\nfunction ReceiveComponent_form_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\");\n    i0.ɵɵtext(1, \"\\n\\n\\n        \");\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵelementStart(4, \"mat-tab-group\", 12);\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"mat-tab\", 13);\n    i0.ɵɵtext(7, \"\\n                \");\n    i0.ɵɵelementStart(8, \"div\", 14);\n    i0.ɵɵtext(9, \"\\n                    \");\n    i0.ɵɵtemplate(10, ReceiveComponent_form_15_div_10_Template, 11, 2, \"div\", 15);\n    i0.ɵɵtext(11, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n            \");\n    i0.ɵɵelementStart(14, \"mat-tab\", 16);\n    i0.ɵɵtext(15, \"\\n                \");\n    i0.ɵɵelementStart(16, \"div\", 14);\n    i0.ɵɵtext(17, \"\\n                    \");\n    i0.ɵɵtemplate(18, ReceiveComponent_form_15_div_18_Template, 11, 2, \"div\", 15);\n    i0.ɵɵtext(19, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n            \");\n    i0.ɵɵelementStart(22, \"mat-tab\", 17);\n    i0.ɵɵtext(23, \"\\n                \");\n    i0.ɵɵelementStart(24, \"div\", 14);\n    i0.ɵɵtext(25, \"\\n                    \");\n    i0.ɵɵtemplate(26, ReceiveComponent_form_15_div_26_Template, 11, 2, \"div\", 15);\n    i0.ɵɵtext(27, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(28, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \"\\n\\n    \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.unusedAddresses);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.usedAddresses);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.changeAddresses);\n  }\n}\n\nfunction ReceiveComponent_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ReceiveComponent_button_19_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      var ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.showAllAddresses();\n    });\n    i0.ɵɵtext(1, \"Show all addresses\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport var ReceiveComponent = /*#__PURE__*/(function () {\n  var ReceiveComponent = /*#__PURE__*/function () {\n    function ReceiveComponent(appState, wallet, snackBar, apiService, log, globalService) {\n      _classCallCheck(this, ReceiveComponent);\n\n      this.appState = appState;\n      this.wallet = wallet;\n      this.snackBar = snackBar;\n      this.apiService = apiService;\n      this.log = log;\n      this.globalService = globalService;\n      this.hostClass = true;\n      this.address = '';\n      this.copied = false;\n      this.showAll = false;\n      this.appState.pageMode = true;\n    }\n\n    _createClass(ReceiveComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // Read the user picked address type.\n        this.addressType = this.appState.addressType;\n        this.load();\n      }\n    }, {\n      key: \"load\",\n      value: function load() {\n        if (this.showAll) {\n          if (this.appState.isSimpleMode) {\n            this.getAddressesSimpleMode();\n          } else {\n            this.getAddressesFullNode();\n          }\n        } else {\n          if (this.wallet.isMultiAddressMode) {\n            this.getUnusedReceiveAddress();\n          } else {\n            this.getFirstReceiveAddress();\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.appState.pageMode = false;\n      }\n    }, {\n      key: \"onCopiedClick\",\n      value: function onCopiedClick() {\n        this.snackBar.open('Your address has been copied to your clipboard.', null, {\n          duration: 3000\n        });\n        return false;\n      }\n    }, {\n      key: \"onAddressTypeChange\",\n      value: function onAddressTypeChange(event) {\n        this.addressType = event.value;\n        this.load();\n      }\n    }, {\n      key: \"showAllAddresses\",\n      value: function showAllAddresses() {\n        if (this.appState.isSimpleMode) {\n          this.getAddressesSimpleMode();\n        } else {\n          this.getAddressesFullNode();\n        }\n\n        this.showAll = true;\n      }\n    }, {\n      key: \"showOneAddress\",\n      value: function showOneAddress() {\n        this.getUnusedReceiveAddress();\n        this.showAll = false;\n      }\n    }, {\n      key: \"getFirstReceiveAddress\",\n      value: function getFirstReceiveAddress() {\n        var _this = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.apiService.getFirstReceiveAddress(walletInfo, this.addressType).subscribe(function (response) {\n          _this.address = response; // this.qrString = 'city:' + response;\n\n          _this.qrString = response; // To be compatible with mobile wallet (copay-based), we won't use prefix.\n        }, function (error) {\n          _this.log.error('Failed to get first receive address:', error);\n        });\n      }\n    }, {\n      key: \"getUnusedReceiveAddress\",\n      value: function getUnusedReceiveAddress() {\n        if (this.appState.isSimpleMode) {\n          this.getUnusedReceiveAddressSimpleMode();\n        } else {\n          this.getUnusedReceiveAddressFullNode();\n        }\n      }\n    }, {\n      key: \"getUnusedReceiveAddressSimpleMode\",\n      value: function getUnusedReceiveAddressSimpleMode() {\n        var network = this.appState.networkDefinition;\n        var xpubkey = this.wallet.activeWallet.extPubKey;\n        var root = bip32.fromBase58(xpubkey); // TODO: Find the last used indexed from querying indexer (persisted to IndexedDB locally)\n\n        var address0 = this.getAddress(root.derivePath('0/0'), network);\n        var address = address0;\n        this.address = address; // this.qrString = 'city:' + address;\n\n        this.qrString = address; // To be compatible with mobile wallet (copay-based), we won't use prefix.\n      }\n    }, {\n      key: \"getAddress\",\n      value: function getAddress(node, network) {\n        var p2pkh = city.payments.p2pkh({\n          pubkey: node.publicKey,\n          network: network\n        });\n        return p2pkh.address;\n      }\n    }, {\n      key: \"getUnusedReceiveAddressFullNode\",\n      value: function getUnusedReceiveAddressFullNode() {\n        var _this2 = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.apiService.getUnusedReceiveAddress(walletInfo, this.addressType).subscribe(function (response) {\n          _this2.address = response; // this.qrString = 'city:' + response;\n\n          _this2.qrString = response; // To be compatible with mobile wallet (copay-based), we won't use prefix.\n        }, function (error) {\n          _this2.log.error('Failed to get unused receive address:', error);\n        });\n      }\n    }, {\n      key: \"getAddressesSimpleMode\",\n      value: function getAddressesSimpleMode() {\n        this.allAddresses = [];\n        this.usedAddresses = [];\n        this.unusedAddresses = [];\n        this.changeAddresses = [];\n        var network = this.appState.networkDefinition;\n        var xpubkey = this.wallet.activeWallet.extPubKey;\n        var root = bip32.fromBase58(xpubkey); // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n        for (var i = 0; i < 20; i++) {\n          // TODO: Find the last used indexed from querying indexer (persisted to IndexedDB locally)\n          var address = this.getAddress(root.derivePath('0/' + i), network);\n          this.unusedAddresses.push(address);\n        }\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.log.info('Wallet info:', walletInfo); // this.apiService.getAllAddresses(walletInfo)\n        //     .subscribe(\n        //         response => {\n        //             this.allAddresses = [];\n        //             this.usedAddresses = [];\n        //             this.unusedAddresses = [];\n        //             this.changeAddresses = [];\n        //             this.allAddresses = response.addresses;\n        //             for (const address of this.allAddresses) {\n        //                 if (address.isUsed) {\n        //                     this.usedAddresses.push(address.address);\n        //                 } else if (address.isChange) {\n        //                     this.changeAddresses.push(address.address);\n        //                 } else {\n        //                     this.unusedAddresses.push(address.address);\n        //                 }\n        //             }\n        //             // }\n        //         },\n        //         error => {\n        //             this.log.error('Failed to get addresses:', error);\n        //         }\n        //     );\n      }\n    }, {\n      key: \"getAddressesFullNode\",\n      value: function getAddressesFullNode() {\n        var _this3 = this;\n\n        var walletInfo = new WalletInfo(this.globalService.getWalletName());\n        this.apiService.getAllAddresses(walletInfo, this.addressType).subscribe(function (response) {\n          _this3.allAddresses = [];\n          _this3.usedAddresses = [];\n          _this3.unusedAddresses = [];\n          _this3.changeAddresses = [];\n          _this3.allAddresses = response.addresses;\n\n          var _iterator = _createForOfIteratorHelper(_this3.allAddresses),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var address = _step.value;\n\n              if (address.isUsed) {\n                _this3.usedAddresses.push(address.address);\n              } else if (address.isChange) {\n                _this3.changeAddresses.push(address.address);\n              } else {\n                _this3.unusedAddresses.push(address.address);\n              }\n            } // }\n\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }, function (error) {\n          _this3.log.error('Failed to get addresses:', error);\n        });\n      }\n    }]);\n\n    return ReceiveComponent;\n  }();\n\n  /** @nocollapse */\n  ReceiveComponent.ɵfac = function ReceiveComponent_Factory(t) {\n    return new (t || ReceiveComponent)(i0.ɵɵdirectiveInject(i1.ApplicationStateService), i0.ɵɵdirectiveInject(i2.WalletService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.ApiService), i0.ɵɵdirectiveInject(i5.Logger), i0.ɵɵdirectiveInject(i6.GlobalService));\n  };\n  /** @nocollapse */\n\n\n  ReceiveComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: ReceiveComponent,\n    selectors: [[\"app-receive\"]],\n    hostVars: 2,\n    hostBindings: function ReceiveComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"receive\", ctx.hostClass);\n      }\n    },\n    decls: 23,\n    vars: 7,\n    consts: [[1, \"content\", \"content-centered\"], [\"class\", \"mat-h1\", 4, \"ngIf\"], [1, \"address-type-toggle\", 3, \"value\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"mat-stroked-button\", \"\", 3, \"click\", 4, \"ngIf\"], [1, \"mat-h1\"], [3, \"value\"], [1, \"d-inline-block\"], [\"mat-icon-button\", \"\", \"ngbTooltip\", \"Copy to clipboard\", 3, \"cdkCopyToClipboard\", \"click\"], [1, \"mat-caption\"], [\"mat-stroked-button\", \"\", 3, \"click\"], [\"mat-stretch-tabs\", \"\", 1, \"example-stretched-tabs\", \"mat-elevation-z4\"], [\"label\", \"Unused\"], [1, \"tab-pane\"], [\"class\", \"tab-pane-line\", 4, \"ngFor\", \"ngForOf\"], [\"label\", \"Used\"], [\"label\", \"Change\"], [1, \"tab-pane-line\"]],\n    template: function ReceiveComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n    \");\n        i0.ɵɵtemplate(2, ReceiveComponent_h1_2_Template, 3, 3, \"h1\", 1);\n        i0.ɵɵtext(3, \"\\n\\n    \");\n        i0.ɵɵelementStart(4, \"mat-button-toggle-group\", 2);\n        i0.ɵɵlistener(\"change\", function ReceiveComponent_Template_mat_button_toggle_group_change_4_listener($event) {\n          return ctx.onAddressTypeChange($event);\n        });\n        i0.ɵɵtext(5, \"\\n        \");\n        i0.ɵɵtemplate(6, ReceiveComponent_mat_button_toggle_6_Template, 2, 2, \"mat-button-toggle\", 3);\n        i0.ɵɵtext(7, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \"\\n\\n    \");\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵtext(10, \"\\n\\n    \");\n        i0.ɵɵtemplate(11, ReceiveComponent_form_11_Template, 30, 3, \"form\", 4);\n        i0.ɵɵtext(12, \"\\n\\n    \");\n        i0.ɵɵtemplate(13, ReceiveComponent_button_13_Template, 2, 0, \"button\", 5);\n        i0.ɵɵtext(14, \"\\n\\n    \");\n        i0.ɵɵtemplate(15, ReceiveComponent_form_15_Template, 31, 3, \"form\", 4);\n        i0.ɵɵtext(16, \"\\n\\n    \");\n        i0.ɵɵelementStart(17, \"div\");\n        i0.ɵɵtext(18, \"\\n        \");\n        i0.ɵɵtemplate(19, ReceiveComponent_button_19_Template, 2, 0, \"button\", 5);\n        i0.ɵɵtext(20, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(21, \"\\n\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \"\\n\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.appState.handset);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.appState.addressType);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.appState.addressTypes);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.showAll);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showAll);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showAll);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.showAll);\n      }\n    },\n    directives: [i7.NgIf, i8.MatButtonToggleGroup, i7.NgForOf, i8.MatButtonToggle, i9.MatButton, i10.CdkCopyToClipboard, i11.MatIcon, i12.MatTabGroup, i12.MatTab],\n    pipes: [i7.AsyncPipe],\n    styles: [\".receive .tab-pane {\\n  margin: 20px;\\n}\\n.address-type-toggle {\\n  margin-bottom: 1em;\\n  display: block;\\n}\"],\n    encapsulation: 2\n  });\n  return ReceiveComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}