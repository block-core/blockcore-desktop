{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a, _b, _c, _d, _e;\n\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { ApplicationStateService } from '../../services/application-state.service';\nimport { TitleService } from '../../services/title.service';\nimport { ApiService } from '../../services/api.service';\nimport { GlobalService } from '../../services/global.service';\nimport { ElectronService } from 'ngx-electron';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { DetailsService } from '../../services/details.service';\nimport { UpdateService } from '../../services/update.service';\nimport { Logger } from '../../services/logger.service';\nimport { WalletService } from '../../services/wallet.service';\nimport { AppModes } from '../../shared/app-modes';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { ReportComponent } from '../report/report.component';\nimport { SettingsService } from 'src/app/services/settings.service';\nimport { IdentityService } from 'src/app/services/identity.service';\nimport { StorageService } from 'src/app/services/storage.service';\nimport { ChainService } from 'src/app/services/chain.service';\n\nvar RootComponent = /*#__PURE__*/function () {\n  // TODO: Change into Observable.\n  // get userActivated(): boolean {\n  //   return this.authService.authenticated;\n  // }\n  function RootComponent(titleService, authService, appState, appModes, electronService, router, log, updateService, detailsService, identityService, settings, apiService, walletService, wallet, cd, dialog, ngZone, storage, chains, notifications, globalService, zone, breakpointObserver) {\n    var _this = this;\n\n    _classCallCheck(this, RootComponent);\n\n    this.titleService = titleService;\n    this.authService = authService;\n    this.appState = appState;\n    this.appModes = appModes;\n    this.electronService = electronService;\n    this.router = router;\n    this.log = log;\n    this.updateService = updateService;\n    this.detailsService = detailsService;\n    this.identityService = identityService;\n    this.settings = settings;\n    this.apiService = apiService;\n    this.walletService = walletService;\n    this.wallet = wallet;\n    this.cd = cd;\n    this.dialog = dialog;\n    this.ngZone = ngZone;\n    this.storage = storage;\n    this.chains = chains;\n    this.notifications = notifications;\n    this.globalService = globalService;\n    this.zone = zone;\n    this.breakpointObserver = breakpointObserver;\n    this.hostClass = true;\n    this.handset = false;\n    this.title = 'app';\n    this.showFiller = true;\n    this.isActive = false;\n    this.percentSyncedNumber = 0;\n    this.percentSynced = '0%';\n    this.menuMode = 'side';\n    this.menuOpened = true; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.MaxRetryCount = 50; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.TryDelayMilliseconds = 3000; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.apiConnected = false; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.loading = true; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.loadingFailed = false;\n    this.log.info('Expanded:', localStorage.getItem('Menu:Expanded'));\n    this.loadFiller();\n    this.isAuthenticated = authService.isAuthenticated();\n\n    if (this.electronService.ipcRenderer) {\n      this.appState.setVersion(APP_VERSION);\n      this.log.info('application version: ', this.appState.version);\n      this.ipc = electronService.ipcRenderer;\n      this.ipc.on('daemon-exiting', function (event, error) {\n        _this.log.info('daemon is currently being stopped... please wait...');\n\n        _this.appState.shutdownInProgress = true;\n\n        _this.cd.detectChanges(); // If the exit takes a very long time, we want to allow users to forcefully exit Blockcore Hub.\n\n\n        setTimeout(function () {\n          _this.appState.shutdownDelayed = true;\n\n          _this.cd.detectChanges();\n        }, 60000);\n      });\n      this.ipc.on('daemon-exited', function (event, error) {\n        _this.log.info('daemon is stopped.');\n\n        _this.appState.shutdownInProgress = false;\n        _this.appState.shutdownDelayed = false; // Perform a new close event on the window, this time it will close itself.\n\n        window.close();\n      });\n      this.ipc.on('daemon-changing', function (event, error) {\n        _this.zone.run(function () {\n          _this.log.info('daemon change is requested and shutdown was successful.');\n\n          _this.cd.detectChanges(); // Navigate again to hide the loading indicator.\n          // if (!this.appState.isChangingToChain) {\n\n\n          _this.router.navigate(['/load']); // }\n\n\n          _this.cd.detectChanges();\n        });\n      });\n      this.ipc.on('daemon-error', function (event, error) {\n        _this.log.error(error);\n\n        var dialogRef = _this.dialog.open(ReportComponent, {\n          data: {\n            title: 'Failed to start node background daemon',\n            error: error,\n            lines: _this.log.lastEntries()\n          }\n        });\n\n        dialogRef.afterClosed().subscribe(function (result) {\n          _this.log.info(\"Dialog result: \".concat(result));\n        });\n      });\n      this.ipc.on('log-debug', function (event, msg) {\n        _this.log.verbose(msg);\n      });\n      this.ipc.on('log-info', function (event, msg) {\n        _this.log.info(msg);\n      });\n      this.ipc.on('log-error', function (event, msg) {\n        _this.log.error(msg);\n      });\n    } // Upon initial load, we'll check if we are on mobile or not and show/hide menu.\n\n\n    var isSmallScreen = breakpointObserver.isMatched(Breakpoints.HandsetPortrait);\n    this.menuOpened = !isSmallScreen;\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(function (result) {\n      if (result.matches) {\n        appState.handset = true;\n        _this.handset = true;\n        _this.menuMode = 'over';\n        _this.showFiller = true;\n      } else {\n        appState.handset = false;\n        _this.handset = false;\n        _this.menuOpened = true;\n        _this.menuMode = 'side';\n\n        _this.loadFiller();\n      }\n    });\n    this.authService.isAuthenticated().subscribe(function (auth) {\n      if (auth) {\n        _this.updateNetworkInfo();\n      } else {}\n    });\n    this.router.events.subscribe(function (evt) {\n      if (!(evt instanceof NavigationEnd)) {\n        return;\n      }\n\n      var contentContainer = document.querySelector('.app-view-area-main') || window;\n      contentContainer.scrollTo(0, 0);\n    });\n  }\n\n  _createClass(RootComponent, [{\n    key: \"identityTooltip\",\n    get: function get() {\n      if (this.identityService.identity) {\n        var name = this.identityService.identity.content.name || this.identityService.identity.content.identifier;\n        var alias = this.identityService.identity.content.alias ? ' (@' + this.identityService.identity.content.alias + ')' : '';\n        var title = this.identityService.identity.content.title ? '\\n' + this.identityService.identity.content.title : '';\n        return \"\".concat(name).concat(alias, \"\\nID: \").concat(this.identityService.identity.content.identifier).concat(title);\n      }\n\n      return '';\n    }\n  }, {\n    key: \"networkStatusTooltip\",\n    get: function get() {\n      if (this.walletService.generalInfo) {\n        return \"Connections: \".concat(this.walletService.generalInfo.connectedNodes, \"\\nBlock Height: \").concat(this.walletService.generalInfo.chainTip, \"\\nSynced: \").concat(this.walletService.percentSynced);\n      }\n\n      return '';\n    }\n    /** Whenever we are downloading, show the download icon. */\n\n  }, {\n    key: \"networkShowDownload\",\n    get: function get() {\n      return !this.appState.pageMode && this.walletService.generalInfo && this.walletService.generalInfo.connectedNodes !== 0 && this.walletService.percentSyncedNumber !== 100;\n    }\n    /** Whenever we are fully synced, show done icon. */\n\n  }, {\n    key: \"networkShowDone\",\n    get: function get() {\n      return !this.appState.pageMode && this.walletService.generalInfo && this.walletService.generalInfo.connectedNodes !== 0 && this.walletService.percentSyncedNumber === 100;\n    }\n    /** Whenever we have zero connections on the network, show the offline icon. */\n\n  }, {\n    key: \"networkShowOffline\",\n    get: function get() {\n      return !this.appState.pageMode && this.walletService.generalInfo && this.walletService.generalInfo.connectedNodes === 0;\n    }\n  }, {\n    key: \"appTitle$\",\n    get: function get() {\n      return this.titleService.$title;\n    }\n  }, {\n    key: \"listTestNetworks\",\n    get: function get() {\n      return this.storage.getValue('Network:ListTestNetworks') === 'true';\n    },\n    set: function set(value) {\n      this.storage.setValue('Network:ListTestNetworks', value.toString());\n    }\n  }, {\n    key: \"filteredAvailableChains\",\n    get: function get() {\n      return this.listTestNetworks ? this.chains.availableChains : this.chains.availableChains.filter(function (language) {\n        return !language.test;\n      });\n    }\n  }, {\n    key: \"getTooltip\",\n    value: function getTooltip(tooltip) {\n      if (!this.showFiller) {\n        return tooltip;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"changeWallet\",\n    value: function changeWallet(wallet) {\n      // Write the \"previous wallet\" and then logout.\n      localStorage.setItem('Network:Wallet', wallet.name);\n      this.stopWallet(); // Triggers the reboot in main.ts\n      // this.ngZone.runOutsideAngular(() => BootController.getbootControl().restart());\n\n      this.router.navigateByUrl('/login');\n    }\n  }, {\n    key: \"stopWallet\",\n    value: function stopWallet() {\n      var _this2 = this;\n\n      // TODO: This code is replicated from logout.component.ts, should be refactored into some state management controller.\n      this.wallet.stop();\n      this.authService.setAnonymous();\n      this.apiService.stopStaking().subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        console.log('Staking was stopped.'); // }\n      }, function (error) {\n        _this2.apiService.handleException(error);\n      });\n    }\n  }, {\n    key: \"changeMode\",\n    value: function changeMode(chain) {\n      // Update the change to chain to be what user want to change to.\n      this.appState.changeToChain = chain;\n      this.appState.isChangingToChain = true;\n      this.stopWallet(); // Persist the current mode as PreviousMode.\n\n      localStorage.setItem('Network:ModePrevious', localStorage.getItem('Network:Mode'));\n      localStorage.removeItem('Network:Mode');\n      this.appState.changingMode = true;\n      this.electronService.ipcRenderer.send('daemon-change'); // Make sure we shut down the existing node when user choose the change mode action.\n\n      this.apiService.shutdownNode().subscribe(function (response) {// The response from shutdown is returned before the node is fully exited, so put a small delay here.\n        // setTimeout(() => {\n        //     this.router.navigate(['/load']);\n        // }, 1500);\n      });\n      this.electronService.ipcRenderer.send('update-icon', null);\n      this.cd.detectChanges(); // Restart Angular to refresh services, etc.\n      // this.ngZone.runOutsideAngular(() => BootController.getbootControl().restart());\n      // Navigate and show loading indicator.\n      // this.router.navigate(['/load'], { queryParams: { loading: true, changing: true } });\n    }\n  }, {\n    key: \"prepareRoute\",\n    value: function prepareRoute(outlet) {\n      return outlet && outlet.activatedRouteData && outlet.activatedRouteData.animation;\n    }\n  }, {\n    key: \"loadFiller\",\n    value: function loadFiller() {\n      if (localStorage.getItem('Menu:Expanded') === 'false') {\n        this.showFiller = false;\n      } else {\n        this.showFiller = true;\n      }\n    }\n  }, {\n    key: \"checkForUpdates\",\n    value: function checkForUpdates() {\n      this.updateService.checkForUpdate();\n    }\n  }, {\n    key: \"closeDetails\",\n    value: function closeDetails(reason) {\n      this.detailsService.hide();\n    }\n  }, {\n    key: \"toggleFiller\",\n    value: function toggleFiller() {\n      this.showFiller = !this.showFiller;\n      localStorage.setItem('Menu:Expanded', this.showFiller ? 'true' : 'false');\n    }\n  }, {\n    key: \"openMenu\",\n    value: function openMenu() {\n      this.menuOpened = true;\n      this.cd.detectChanges();\n    }\n  }, {\n    key: \"forceExit\",\n    value: function forceExit() {\n      window.close();\n    }\n  }, {\n    key: \"selectIdentity\",\n    value: function selectIdentity(identity) {\n      this.identityService.identity = identity;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      // this.tryStart();\n      setTimeout(function () {\n        // We'll check for updates in the startup of the app.\n        _this3.checkForUpdates();\n      }, 12000); // Only perform root toe load redirect when not changing the chain.\n\n      if (!this.appState.changeToChain) {\n        if (this.router.url !== '/load') {\n          this.router.navigateByUrl('/load');\n        }\n      }\n    }\n  }, {\n    key: \"updateNetworkInfo\",\n    value: function updateNetworkInfo() {\n      // Need to use same name and icon for TEST networks or not, so perhaps figure out the best way to find the identifier?\n      // Perhaps just \"indexof\" and have a local array definition in the app?\n      // const coinUnit = this.globalService.getCoinUnit().toLowerCase();\n      var coinUnit = this.globalService.getCoinName().toLowerCase();\n      coinUnit = coinUnit.replace('regtest', '');\n      coinUnit = coinUnit.replace('test', '');\n      this.coinIcon = coinUnit + '-logo';\n      this.coinName = this.globalService.getCoinName();\n      console.log(this.coinIcon);\n    }\n  }]);\n\n  return RootComponent;\n}();\n\n__decorate([HostBinding('class.root'), __metadata(\"design:type\", Object)], RootComponent.prototype, \"hostClass\", void 0);\n\nRootComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.Default // animations: [\n  //     slideInAnimation\n  // ]\n\n}), __metadata(\"design:paramtypes\", [TitleService, AuthenticationService, ApplicationStateService, AppModes, ElectronService, Router, Logger, UpdateService, DetailsService, typeof (_a = typeof IdentityService !== \"undefined\" && IdentityService) === \"function\" ? _a : Object, typeof (_b = typeof SettingsService !== \"undefined\" && SettingsService) === \"function\" ? _b : Object, ApiService, WalletService, WalletService, ChangeDetectorRef, MatDialog, NgZone, typeof (_c = typeof StorageService !== \"undefined\" && StorageService) === \"function\" ? _c : Object, typeof (_d = typeof ChainService !== \"undefined\" && ChainService) === \"function\" ? _d : Object, typeof (_e = typeof NotificationService !== \"undefined\" && NotificationService) === \"function\" ? _e : Object, GlobalService, NgZone, BreakpointObserver])], RootComponent);\nexport { RootComponent };","map":null,"metadata":{},"sourceType":"module"}