{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Validators } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/application-state.service\";\nimport * as i2 from \"src/app/services/profile-image.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"src/app/services/identity.service\";\nimport * as i7 from \"@angular/material/dialog\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"./identity-badge.component\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/material/button\";\n\nfunction IdentityUnlockComponent_mat_card_1_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" WHops: \", ctx_r1.formErrors.password, \" \");\n  }\n}\n\nfunction IdentityUnlockComponent_mat_card_1_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"The password is not correct.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction IdentityUnlockComponent_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\")(1, \"form\", 4);\n    i0.ɵɵelement(2, \"app-identity-badge\", 5);\n    i0.ɵɵelementStart(3, \"mat-card-content\")(4, \"h2\", 6);\n    i0.ɵɵtext(5, \"Please read:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7, \"You can export this identity to your mobile device by scanning a QR code with apps such as City Chain Identity or Blockcore Hub on your mobile.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-icon\", 7);\n    i0.ɵɵtext(9, \"info\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\");\n    i0.ɵɵtext(11, \" WARNING: After you unlock with your wallet password, the private key (secret) of your identity will be displayed. Make sure that nobody is watching your screen when you do this. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"p\");\n    i0.ɵɵtext(13, \"If anyone get a copy of your private key, they can also edit your identity so make sure to keep it safe.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵelementStart(15, \"mat-form-field\", 8)(16, \"mat-label\");\n    i0.ɵɵtext(17, \"Password (your wallet password)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"input\", 9);\n    i0.ɵɵelementStart(19, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function IdentityUnlockComponent_mat_card_1_Template_button_click_19_listener() {\n      i0.ɵɵrestoreView(_r4);\n      var ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.hide = !ctx_r3.hide;\n    });\n    i0.ɵɵelementStart(20, \"mat-icon\");\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(22, IdentityUnlockComponent_mat_card_1_mat_error_22_Template, 2, 1, \"mat-error\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(23, IdentityUnlockComponent_mat_card_1_div_23_Template, 3, 0, \"div\", 1);\n    i0.ɵɵelement(24, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"mat-card-actions\")(26, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function IdentityUnlockComponent_mat_card_1_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r4);\n      var ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.unlock();\n    });\n    i0.ɵɵtext(27, \"UNLOCK\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function IdentityUnlockComponent_mat_card_1_Template_button_click_28_listener() {\n      i0.ɵɵrestoreView(_r4);\n      var ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.back();\n    });\n    i0.ɵɵtext(29, \"CANCEL\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.form);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"identity\", ctx_r0.identityContainer);\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"type\", ctx_r0.hide ? \"password\" : \"text\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx_r0.hide);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.hide ? \"visibility_off\" : \"visibility\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formErrors.password);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.invalidPassword);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.form.valid);\n  }\n}\n\nexport var IdentityUnlockComponent = /*#__PURE__*/(function () {\n  var IdentityUnlockComponent = /*#__PURE__*/function () {\n    function IdentityUnlockComponent(appState, profileImageService, route, location, fb, identityService, dialog, cd, router) {\n      _classCallCheck(this, IdentityUnlockComponent);\n\n      this.appState = appState;\n      this.profileImageService = profileImageService;\n      this.route = route;\n      this.location = location;\n      this.fb = fb;\n      this.identityService = identityService;\n      this.dialog = dialog;\n      this.cd = cd;\n      this.router = router;\n      this.hostClass = true;\n      this.publishWarning = false;\n      this.hide = true; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n      this.formErrors = {\n        password: '',\n        shortname: '',\n        alias: '',\n        title: '',\n        email: '',\n        url: '',\n        image: '',\n        address: '',\n        amount: '',\n        fee: '',\n        restorekey: ''\n      }; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n      this.validationMessages = {\n        name: {\n          required: 'A name is required.',\n          minlength: 'A name is at least 1 characters long.',\n          maxlength: 'A name is at maximum 250 characters long.'\n        },\n        shortname: {\n          required: 'A short name is required.',\n          minlength: 'A short name is at least 1 characters long.',\n          maxlength: 'A short name is at maximum 30 characters long.'\n        },\n        address: {\n          required: 'An address is required.',\n          minlength: 'An address is at least 26 characters long.'\n        },\n        email: {\n          email: 'Invalid e-mail address.'\n        },\n        url: {\n          url: 'Invalid url.'\n        },\n        image: {\n          image: 'Invalid image url.'\n        },\n        amount: {\n          required: 'An amount is required.',\n          pattern: 'Enter a valid transaction amount. Only positive numbers and no more than 8 decimals are allowed.',\n          min: 'The amount has to be more or equal to 0.00001 City.',\n          max: 'The total transaction amount exceeds your available balance.'\n        },\n        fee: {\n          required: 'A fee is required.'\n        },\n        password: {\n          required: 'Your password is required.'\n        },\n        restorekey: {\n          pattern: 'The restore key must be valid public key.'\n        }\n      };\n      this.appState.pageMode = false;\n    }\n\n    _createClass(IdentityUnlockComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.id = this.route.snapshot.paramMap.get('id'); // Make sure we only edit a copy of the identity.\n\n        this.originalIdentityContainer = this.identityService.get(this.id);\n        this.identityContainer = this.jsonCopy(this.originalIdentityContainer);\n        this.buildSendForm();\n      }\n    }, {\n      key: \"buildSendForm\",\n      value: function buildSendForm() {\n        var _this = this;\n\n        this.form = this.fb.group({\n          name: [this.identityContainer.content.name, Validators.compose([Validators.maxLength(250)])],\n          shortname: [this.identityContainer.content.shortname, Validators.compose([Validators.maxLength(30)])],\n          alias: [this.identityContainer.content.alias],\n          password: [''],\n          title: [this.identityContainer.content.title],\n          published: [this.identityContainer.published],\n          publish: [this.identityContainer.publish],\n          email: [this.identityContainer.content.email, Validators.compose([Validators.email])],\n          url: [this.identityContainer.content.url, Validators.compose([Validators.maxLength(2000)])],\n          image: [this.identityContainer.content.image, Validators.compose([Validators.maxLength(2000)])] // amount: ['', Validators.compose([Validators.required, Validators.pattern(/^([0-9]+)?(\\.[0-9]{0,8})?$/), Validators.min(0.00001), (control: AbstractControl) => Validators.max((2 - 3) / 100000000)(control)])],\n          // restorekey: [this.identity.restorekey]\n\n        });\n        this.form.valueChanges.pipe(debounceTime(300)).subscribe(function (data) {\n          return _this.onValueChanged(data);\n        });\n      }\n    }, {\n      key: \"formName\",\n      get: function get() {\n        return this.form.get('name').value;\n      }\n    }, {\n      key: \"formShortName\",\n      get: function get() {\n        return this.form.get('shortname').value;\n      }\n    }, {\n      key: \"formAlias\",\n      get: function get() {\n        return this.form.get('alias').value;\n      }\n    }, {\n      key: \"formTitle\",\n      get: function get() {\n        return this.form.get('title').value;\n      }\n    }, {\n      key: \"formPublished\",\n      get: function get() {\n        return this.form.get('published').value;\n      }\n    }, {\n      key: \"formPublish\",\n      get: function get() {\n        return this.form.get('publish').value;\n      }\n    }, {\n      key: \"formPassword\",\n      get: function get() {\n        return this.form.get('password').value;\n      } // async addLink() {\n      //     const dialogRef = this.dialog.open(LinkAddComponent, {\n      //         width: '440px',\n      //         data: { url: '', type: '' }\n      //     });\n      //     dialogRef.afterClosed().subscribe(result => {\n      //         console.log('The dialog was closed', result);\n      //         if (result) {\n      //             console.log('RESULT:', result);\n      //             this.identity.links.push(result);\n      //             // this.hubService.add(result).then(data => {\n      //             //     // Update the local list of hubs with the one persisted in settings.\n      //             //     this.hubs = this.settings.hubs;\n      //             //     this.cd.markForCheck();\n      //             // });\n      //         }\n      //     });\n      // }\n\n    }, {\n      key: \"onChanged\",\n      value: function onChanged(event) {\n        if (this.originalIdentityContainer.published && !this.formPublish) {\n          this.publishWarning = true;\n        } else {\n          this.publishWarning = false;\n        }\n      }\n    }, {\n      key: \"unlock\",\n      value: function unlock() {\n        this.formErrors.password = 'Whops!';\n        this.invalidPassword = false;\n\n        try {\n          var valid = this.identityService.verifyPassword(this.formPassword);\n          this.router.navigate(['identity', this.id, 'export']);\n        } catch (err) {\n          console.log('Unlock failure: ', err);\n          this.formErrors.password = 'Failed to unlock your fallet. Please check your password.';\n          console.log('Set forms error!');\n          this.invalidPassword = true;\n          this.cd.detectChanges();\n        } // Save the image.\n        // TODO: Make sure we check if image is actually changed, if not, then don't save it.\n        // this.profileImageService.setImage(this.identity.id, this.image);\n        // eslint-disable-next-line guard-for-in\n        // for (const field in this.form.controls) {\n        //     // Copy all input fields onto our identity.\n        //     if (field === 'published' || field === 'publish') {\n        //         continue;\n        //     }\n        //     this.identityContainer.content[field] = this.form.get(field).value;\n        // }\n        // // Set the published from the form.\n        // this.identityContainer.publish = this.form.get('publish').value;\n        // this.identityContainer.published = this.form.get('publish').value;\n        // this.identityService.add(this.identityContainer);\n        // this.router.navigateByUrl('/identity');\n\n      }\n    }, {\n      key: \"jsonCopy\",\n      value: function jsonCopy(src) {\n        return JSON.parse(JSON.stringify(src));\n      } // removeLink(link: Link) {\n      //     const index = this.identity.links.findIndex(l => l === link);\n      //     this.identity.links.splice(index, 1);\n      //     // console.log('Trying to remove:' + id);\n      //     // this.hubService.remove(id);\n      //     // this.hubs = this.settings.hubs;\n      //     // this.cd.markForCheck();\n      // }\n\n    }, {\n      key: \"imageUpdated\",\n      value: function imageUpdated(event) {\n        this.image = event.base64;\n        console.log(event);\n      }\n    }, {\n      key: \"onValueChanged\",\n      value: function onValueChanged(data) {\n        if (!this.form) {\n          return;\n        } // eslint-disable-next-line guard-for-in\n\n\n        for (var field in this.formErrors) {\n          this.formErrors[field] = '';\n          var control = this.form.get(field);\n\n          if (control && control.dirty && !control.valid) {\n            var messages = this.validationMessages[field]; // eslint-disable-next-line guard-for-in\n\n            for (var key in control.errors) {\n              this.formErrors[field] += messages[key] + ' ';\n            }\n          }\n        }\n\n        this.apiError = ''; // if (this.sendForm.get('address').valid && this.sendForm.get('amount').valid) {\n        //     this.estimateFee();\n        // }\n      }\n    }, {\n      key: \"send\",\n      value: function send() {// this.isSending = true;\n        // this.showInputField = false;\n        // this.showConfirmationField = false;\n        // this.showSendingField = true;\n        // this.buildTransaction();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {// this.subscription.unsubscribe();\n      }\n    }, {\n      key: \"back\",\n      value: function back() {\n        this.location.back();\n      }\n    }]);\n\n    return IdentityUnlockComponent;\n  }();\n\n  IdentityUnlockComponent.ɵfac = function IdentityUnlockComponent_Factory(t) {\n    return new (t || IdentityUnlockComponent)(i0.ɵɵdirectiveInject(i1.ApplicationStateService), i0.ɵɵdirectiveInject(i2.ProfileImageService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Location), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.IdentityService), i0.ɵɵdirectiveInject(i7.MatDialog), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  IdentityUnlockComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IdentityUnlockComponent,\n    selectors: [[\"app-identity-unlock\"]],\n    hostVars: 2,\n    hostBindings: function IdentityUnlockComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"identity-edit\", ctx.hostClass);\n      }\n    },\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"content\"], [4, \"ngIf\"], [1, \"footer\"], [\"routerLink\", \"/identity\", \"mat-raised-button\", \"\"], [3, \"formGroup\"], [3, \"identity\"], [1, \".mat-h2\"], [\"mat-card-avatar\", \"\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"id\", \"passwordInput\", \"formControlName\", \"password\", \"name\", \"password\", \"placeholder\", \"Password for your wallet.\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\"mat-stroked-button\", \"\", 3, \"click\"]],\n    template: function IdentityUnlockComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, IdentityUnlockComponent_mat_card_1_Template, 30, 9, \"mat-card\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n        i0.ɵɵtext(4, \"Go back\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.identityService.identity$);\n      }\n    },\n    directives: [i4.NgIf, i8.MatCard, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i9.IdentityBadgeComponent, i8.MatCardContent, i10.MatIcon, i8.MatCardAvatar, i11.MatFormField, i11.MatLabel, i12.MatInput, i5.DefaultValueAccessor, i5.NgControlStatus, i5.FormControlName, i13.MatButton, i11.MatSuffix, i11.MatError, i8.MatCardActions, i3.RouterLink],\n    styles: [\".identity-edit .mat-list-avatar-large {\\n  min-width: 80px !important;\\n  min-height: 80px !important;\\n  width: 80px !important;\\n  height: 80px !important;\\n}\\n.identity-edit .mat-form-field {\\n  width: 100%;\\n}\\n.identity-edit .add-link {\\n  float: right;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n}\\n.identity-edit .footer {\\n  text-align: center;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n}\\n.identity-edit .mat-expansion-panel-header-title,\\n.identity-edit .mat-expansion-panel-header-description {\\n  flex-basis: 0;\\n}\\n.identity-edit .mat-expansion-panel-header-description {\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n.identity-edit .mat-form-field + .mat-form-field {\\n  margin-left: 8px;\\n}\"],\n    encapsulation: 2\n  });\n  return IdentityUnlockComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}