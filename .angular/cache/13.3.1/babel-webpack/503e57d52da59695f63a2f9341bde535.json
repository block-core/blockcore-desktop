{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { Renderer2, Input, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport QRCode from 'qrcode';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"qrcElement\"];\nvar NgxQrcodeElementTypes = /*#__PURE__*/(() => {\n  (function (NgxQrcodeElementTypes) {\n    NgxQrcodeElementTypes[\"URL\"] = \"url\";\n    NgxQrcodeElementTypes[\"IMG\"] = \"img\";\n    NgxQrcodeElementTypes[\"CANVAS\"] = \"canvas\";\n  })(NgxQrcodeElementTypes || (NgxQrcodeElementTypes = {}));\n\n  return NgxQrcodeElementTypes;\n})();\nvar NgxQrcodeErrorCorrectionLevels = /*#__PURE__*/(() => {\n  (function (NgxQrcodeErrorCorrectionLevels) {\n    NgxQrcodeErrorCorrectionLevels[\"LOW\"] = \"L\";\n    NgxQrcodeErrorCorrectionLevels[\"MEDIUM\"] = \"M\";\n    NgxQrcodeErrorCorrectionLevels[\"QUARTILE\"] = \"Q\";\n    NgxQrcodeErrorCorrectionLevels[\"HIGH\"] = \"H\";\n  })(NgxQrcodeErrorCorrectionLevels || (NgxQrcodeErrorCorrectionLevels = {}));\n\n  return NgxQrcodeErrorCorrectionLevels;\n})();\nconst DEFAULT_VALUES = {\n  elementType: NgxQrcodeElementTypes.URL,\n  cssClass: 'qrcode',\n  value: 'https://www.techiediaries.com',\n  version: '',\n  errorCorrectionLevel: NgxQrcodeErrorCorrectionLevels.MEDIUM,\n  margin: 4,\n  scale: 4,\n  width: 10,\n  colorDark: '#000',\n  colorLight: '#FFF'\n};\nlet QrcodeComponent = /*#__PURE__*/(() => {\n  let QrcodeComponent = class QrcodeComponent {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.elementType = DEFAULT_VALUES.elementType;\n      this.cssClass = DEFAULT_VALUES.cssClass;\n      this.value = DEFAULT_VALUES.value;\n      this.version = DEFAULT_VALUES.version;\n      this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;\n      this.margin = DEFAULT_VALUES.margin;\n      this.scale = DEFAULT_VALUES.scale;\n      this.width = DEFAULT_VALUES.width;\n      this.colorDark = DEFAULT_VALUES.colorDark;\n      this.colorLight = DEFAULT_VALUES.colorLight;\n    }\n\n    ngOnChanges() {\n      this.createQRCode();\n    }\n\n    createQRCode() {\n      if (!this.value) {\n        return;\n      }\n\n      let element;\n\n      switch (this.elementType) {\n        case NgxQrcodeElementTypes.CANVAS:\n          element = this.renderer.createElement('canvas');\n          this.toCanvas(element).then(() => {\n            this.renderElement(element);\n          }).catch(e => {\n            this.removeElementChildren();\n            console.error(e);\n          });\n          break;\n\n        default:\n          element = this.renderer.createElement('img');\n          this.toDataURL().then(src => {\n            element.setAttribute('src', src);\n\n            if (this.alt) {\n              element.setAttribute('alt', this.alt);\n            }\n\n            this.renderElement(element);\n          }).catch(e => {\n            this.removeElementChildren();\n            console.error(e);\n          });\n      }\n    }\n\n    toDataURL() {\n      return QRCode.toDataURL(this.value, {\n        version: this.version,\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        width: this.width,\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        }\n      });\n    }\n\n    toCanvas(canvas) {\n      return QRCode.toCanvas(canvas, this.value, {\n        version: this.version,\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        width: this.width,\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        }\n      });\n    }\n\n    renderElement(element) {\n      this.removeElementChildren();\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n\n    removeElementChildren() {\n      for (const node of this.qrcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.qrcElement.nativeElement, node);\n      }\n    }\n\n  };\n\n  /** @nocollapse */\n  QrcodeComponent.ɵfac = function QrcodeComponent_Factory(t) {\n    return new (t || QrcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n  /** @nocollapse */\n\n\n  QrcodeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: QrcodeComponent,\n    selectors: [[\"ngx-qrcode\"]],\n    viewQuery: function QrcodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n      }\n    },\n    inputs: {\n      elementType: \"elementType\",\n      cssClass: \"cssClass\",\n      value: \"value\",\n      version: \"version\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      margin: \"margin\",\n      scale: \"scale\",\n      width: \"width\",\n      colorDark: \"colorDark\",\n      colorLight: \"colorLight\",\n      alt: \"alt\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"qrcElement\", \"\"]],\n    template: function QrcodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([Input()], QrcodeComponent.prototype, \"elementType\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"cssClass\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"alt\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"value\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"version\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"errorCorrectionLevel\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"margin\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"scale\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"width\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"colorDark\", void 0);\n\n  __decorate([Input()], QrcodeComponent.prototype, \"colorLight\", void 0);\n\n  __decorate([ViewChild('qrcElement')], QrcodeComponent.prototype, \"qrcElement\", void 0);\n\n  return QrcodeComponent;\n})();\nlet NgxQRCodeModule = /*#__PURE__*/(() => {\n  let NgxQRCodeModule = class NgxQRCodeModule {};\n\n  /** @nocollapse */\n  NgxQRCodeModule.ɵfac = function NgxQRCodeModule_Factory(t) {\n    return new (t || NgxQRCodeModule)();\n  };\n  /** @nocollapse */\n\n\n  NgxQRCodeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxQRCodeModule\n  });\n  /** @nocollapse */\n\n  NgxQRCodeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return NgxQRCodeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxQRCodeModule, {\n    declarations: [QrcodeComponent],\n    exports: [QrcodeComponent]\n  });\n})();\n/*\n * Public API Surface of ngx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxQRCodeModule, NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels, QrcodeComponent }; //# sourceMappingURL=techiediaries-ngx-qrcode.js.map","map":null,"metadata":{},"sourceType":"module"}