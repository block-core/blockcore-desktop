{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a, _b;\n\nimport { Component, ViewEncapsulation, HostBinding } from '@angular/core';\nimport { ApplicationStateService } from '../../services/application-state.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { IdentityService } from 'src/app/services/identity.service';\nimport { Location } from '@angular/common';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProfileImageService } from 'src/app/services/profile-image.service';\n\nvar IdentityExportComponent = /*#__PURE__*/function () {\n  function IdentityExportComponent(appState, profileImageService, route, location, fb, identityService, dialog, router) {\n    _classCallCheck(this, IdentityExportComponent);\n\n    this.appState = appState;\n    this.profileImageService = profileImageService;\n    this.route = route;\n    this.location = location;\n    this.fb = fb;\n    this.identityService = identityService;\n    this.dialog = dialog;\n    this.router = router;\n    this.hostClass = true;\n    this.publishWarning = false; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.formErrors = {\n      name: '',\n      shortname: '',\n      alias: '',\n      title: '',\n      email: '',\n      url: '',\n      image: '',\n      address: '',\n      amount: '',\n      fee: '',\n      password: '',\n      restorekey: ''\n    }; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n    this.validationMessages = {\n      name: {\n        required: 'A name is required.',\n        minlength: 'A name is at least 1 characters long.',\n        maxlength: 'A name is at maximum 250 characters long.'\n      },\n      shortname: {\n        required: 'A short name is required.',\n        minlength: 'A short name is at least 1 characters long.',\n        maxlength: 'A short name is at maximum 30 characters long.'\n      },\n      address: {\n        required: 'An address is required.',\n        minlength: 'An address is at least 26 characters long.'\n      },\n      email: {\n        email: 'Invalid e-mail address.'\n      },\n      url: {\n        url: 'Invalid url.'\n      },\n      image: {\n        image: 'Invalid image url.'\n      },\n      amount: {\n        required: 'An amount is required.',\n        pattern: 'Enter a valid transaction amount. Only positive numbers and no more than 8 decimals are allowed.',\n        min: 'The amount has to be more or equal to 0.00001 City.',\n        max: 'The total transaction amount exceeds your available balance.'\n      },\n      fee: {\n        required: 'A fee is required.'\n      },\n      password: {\n        required: 'Your password is required.'\n      },\n      restorekey: {\n        pattern: 'The restore key must be valid public key.'\n      }\n    };\n    this.appState.pageMode = false;\n  }\n\n  _createClass(IdentityExportComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.id = this.route.snapshot.paramMap.get('id'); // Make sure we only edit a copy of the identity.\n\n      this.originalIdentityContainer = this.identityService.get(this.id);\n      this.identityContainer = this.jsonCopy(this.originalIdentityContainer);\n      this.identityNode = this.identityService.getIdentityNode(this.identityContainer.index);\n      this.qrString = this.identityNode.toWIF();\n      this.buildSendForm();\n    }\n  }, {\n    key: \"buildSendForm\",\n    value: function buildSendForm() {\n      var _this = this;\n\n      this.form = this.fb.group({\n        name: [this.identityContainer.content.name, Validators.compose([Validators.maxLength(250)])],\n        shortname: [this.identityContainer.content.shortname, Validators.compose([Validators.maxLength(30)])],\n        alias: [this.identityContainer.content.alias],\n        title: [this.identityContainer.content.title],\n        published: [this.identityContainer.published],\n        publish: [this.identityContainer.publish],\n        email: [this.identityContainer.content.email, Validators.compose([Validators.email])],\n        url: [this.identityContainer.content.url, Validators.compose([Validators.maxLength(2000)])],\n        image: [this.identityContainer.content.image, Validators.compose([Validators.maxLength(2000)])] // amount: ['', Validators.compose([Validators.required, Validators.pattern(/^([0-9]+)?(\\.[0-9]{0,8})?$/), Validators.min(0.00001), (control: AbstractControl) => Validators.max((2 - 3) / 100000000)(control)])],\n        // restorekey: [this.identity.restorekey]\n\n      });\n      this.form.valueChanges.pipe(debounceTime(300)).subscribe(function (data) {\n        return _this.onValueChanged(data);\n      });\n    }\n  }, {\n    key: \"formName\",\n    get: function get() {\n      return this.form.get('name').value;\n    }\n  }, {\n    key: \"formShortName\",\n    get: function get() {\n      return this.form.get('shortname').value;\n    }\n  }, {\n    key: \"formAlias\",\n    get: function get() {\n      return this.form.get('alias').value;\n    }\n  }, {\n    key: \"formTitle\",\n    get: function get() {\n      return this.form.get('title').value;\n    }\n  }, {\n    key: \"formPublished\",\n    get: function get() {\n      return this.form.get('published').value;\n    }\n  }, {\n    key: \"formPublish\",\n    get: function get() {\n      return this.form.get('publish').value;\n    } // async addLink() {\n    //     const dialogRef = this.dialog.open(LinkAddComponent, {\n    //         width: '440px',\n    //         data: { url: '', type: '' }\n    //     });\n    //     dialogRef.afterClosed().subscribe(result => {\n    //         console.log('The dialog was closed', result);\n    //         if (result) {\n    //             console.log('RESULT:', result);\n    //             this.identity.links.push(result);\n    //             // this.hubService.add(result).then(data => {\n    //             //     // Update the local list of hubs with the one persisted in settings.\n    //             //     this.hubs = this.settings.hubs;\n    //             //     this.cd.markForCheck();\n    //             // });\n    //         }\n    //     });\n    // }\n\n  }, {\n    key: \"onChanged\",\n    value: function onChanged(event) {\n      if (this.originalIdentityContainer.published && !this.formPublish) {\n        this.publishWarning = true;\n      } else {\n        this.publishWarning = false;\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      // Save the image.\n      // TODO: Make sure we check if image is actually changed, if not, then don't save it.\n      // this.profileImageService.setImage(this.identity.id, this.image);\n      // eslint-disable-next-line guard-for-in\n      for (var field in this.form.controls) {\n        // Copy all input fields onto our identity.\n        if (field === 'published' || field === 'publish') {\n          continue;\n        }\n\n        this.identityContainer.content[field] = this.form.get(field).value;\n      } // Set the published from the form.\n\n\n      this.identityContainer.publish = this.form.get('publish').value;\n      this.identityContainer.published = this.form.get('publish').value;\n      this.identityService.add(this.identityContainer);\n      this.router.navigateByUrl('/identity');\n    }\n  }, {\n    key: \"jsonCopy\",\n    value: function jsonCopy(src) {\n      return JSON.parse(JSON.stringify(src));\n    } // removeLink(link: Link) {\n    //     const index = this.identity.links.findIndex(l => l === link);\n    //     this.identity.links.splice(index, 1);\n    //     // console.log('Trying to remove:' + id);\n    //     // this.hubService.remove(id);\n    //     // this.hubs = this.settings.hubs;\n    //     // this.cd.markForCheck();\n    // }\n\n  }, {\n    key: \"imageUpdated\",\n    value: function imageUpdated(event) {\n      this.image = event.base64;\n      console.log(event);\n    }\n  }, {\n    key: \"onValueChanged\",\n    value: function onValueChanged(data) {\n      if (!this.form) {\n        return;\n      } // eslint-disable-next-line guard-for-in\n\n\n      for (var field in this.formErrors) {\n        this.formErrors[field] = '';\n        var control = this.form.get(field);\n\n        if (control && control.dirty && !control.valid) {\n          var messages = this.validationMessages[field]; // eslint-disable-next-line guard-for-in\n\n          for (var key in control.errors) {\n            this.formErrors[field] += messages[key] + ' ';\n          }\n        }\n      }\n\n      this.apiError = ''; // if (this.sendForm.get('address').valid && this.sendForm.get('amount').valid) {\n      //     this.estimateFee();\n      // }\n    }\n  }, {\n    key: \"send\",\n    value: function send() {// this.isSending = true;\n      // this.showInputField = false;\n      // this.showConfirmationField = false;\n      // this.showSendingField = true;\n      // this.buildTransaction();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {// this.subscription.unsubscribe();\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.location.back();\n    }\n  }]);\n\n  return IdentityExportComponent;\n}();\n\n__decorate([HostBinding('class.identity-edit'), __metadata(\"design:type\", Object)], IdentityExportComponent.prototype, \"hostClass\", void 0);\n\nIdentityExportComponent = __decorate([Component({\n  selector: 'app-identity-export',\n  templateUrl: './identity-export.component.html',\n  styleUrls: ['./identity-export.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [ApplicationStateService, typeof (_a = typeof ProfileImageService !== \"undefined\" && ProfileImageService) === \"function\" ? _a : Object, ActivatedRoute, Location, FormBuilder, typeof (_b = typeof IdentityService !== \"undefined\" && IdentityService) === \"function\" ? _b : Object, MatDialog, Router])], IdentityExportComponent);\nexport { IdentityExportComponent };","map":null,"metadata":{},"sourceType":"module"}