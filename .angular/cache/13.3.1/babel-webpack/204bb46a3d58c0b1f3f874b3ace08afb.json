{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\n\nvar XhrHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(XhrHttpClient, _super);\n\n  function XhrHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    _this.logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  XhrHttpClient.prototype.send = function (request) {\n    var _this = this; // Check that abort was not signaled before calling send\n\n\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      var headers = request.headers;\n\n      if (headers) {\n        Object.keys(headers).forEach(function (header) {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = function () {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = function () {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = function () {\n        _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + xhr.status + \": \" + xhr.statusText + \".\");\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = function () {\n        _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content || \"\");\n    });\n  };\n\n  return XhrHttpClient;\n}(HttpClient);\n\nexport { XhrHttpClient }; //# sourceMappingURL=XhrHttpClient.js.map","map":null,"metadata":{},"sourceType":"module"}