{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GlobalService {\n  static singletonInstance;\n  walletPath;\n  currentWalletName;\n  coinType;\n  coinName;\n  coinUnit;\n  network;\n  decimalLimit = 8;\n\n  constructor() {\n    if (!GlobalService.singletonInstance) {\n      GlobalService.singletonInstance = this;\n    }\n\n    return GlobalService.singletonInstance;\n  }\n\n  getWalletPath() {\n    return this.walletPath;\n  }\n\n  getWalletFullPath() {\n    // Forward slash to be more universal? This must be tested on all OS.\n    return this.walletPath + '/' + this.currentWalletName + '.wallet.json';\n  }\n\n  setWalletPath(walletPath) {\n    this.walletPath = walletPath;\n  }\n\n  getNetwork() {\n    return this.network;\n  }\n\n  setNetwork(network) {\n    this.network = network;\n  }\n\n  getWalletName() {\n    return this.currentWalletName;\n  }\n\n  setWalletName(currentWalletName) {\n    this.currentWalletName = currentWalletName;\n  }\n\n  getCoinType() {\n    return this.coinType;\n  }\n\n  setCoinType(coinType) {\n    this.coinType = coinType;\n  }\n\n  getCoinName() {\n    return this.coinName;\n  }\n\n  setCoinName(coinName) {\n    this.coinName = coinName;\n  }\n\n  getCoinUnit() {\n    return this.coinUnit;\n  }\n\n  setCoinUnit(coinUnit) {\n    this.coinUnit = coinUnit;\n  }\n\n  transform(value) {\n    let temp;\n\n    if (typeof value === 'number') {\n      switch (this.getCoinUnit()) {\n        case 'BTC':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'mBTC':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'uBTC':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TBTC':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TmBTC':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TuBTC':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'CITY':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'mCITY':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'uCITY':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TCITY':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TmCITY':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TuCITY':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'STRAT':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'mSTRAT':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'uSTRAT':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TSTRAT':\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TmSTRAT':\n          temp = value / 100000;\n          return temp.toFixed(this.decimalLimit);\n\n        case 'TuSTRAT':\n          temp = value / 100;\n          return temp.toFixed(this.decimalLimit);\n\n        default:\n          temp = value / 100000000;\n          return temp.toFixed(this.decimalLimit);\n      }\n    }\n\n    return '';\n  }\n\n  static ɵfac = function GlobalService_Factory(t) {\n    return new (t || GlobalService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalService,\n    factory: GlobalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}