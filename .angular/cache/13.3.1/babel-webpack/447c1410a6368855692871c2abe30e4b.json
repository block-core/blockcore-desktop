{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/** Handles HttpClient errors */\n\nexport class HttpErrorHandler {\n  constructor() {}\n  /** Create curried handleError function that already knows the service name */\n\n\n  createHandleError = (serviceName = '') => (operation = 'operation', result = {}) => this.handleError(serviceName, operation, result);\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   *\r\n   * @param serviceName = name of the data service that attempted the operation\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n\n  handleError(serviceName = '', operation = 'operation', result = {}) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      const message = error.error instanceof ErrorEvent ? error.error.message : `server returned code ${error.status} with body \"${error.error}\"`; // TODO: better job of transforming error for user consumption\n      // this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\n      // Let the app keep running by returning a safe result.\n\n      return of(result);\n    };\n  }\n\n  static ɵfac = function HttpErrorHandler_Factory(t) {\n    return new (t || HttpErrorHandler)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorHandler,\n    factory: HttpErrorHandler.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module"}