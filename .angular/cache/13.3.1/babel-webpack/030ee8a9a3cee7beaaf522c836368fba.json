{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./storage.service\";\nexport class SettingsService {\n  electron;\n  storage;\n\n  constructor(electron, storage) {\n    this.electron = electron;\n    this.storage = storage;\n  }\n  /** The UI mode of the application. Defaults to basic for most users. */\n\n\n  get mode() {\n    return this.storage.getValue('Settings:Mode', 'basic');\n  }\n\n  set mode(value) {\n    this.storage.setValue('Settings:Mode', value);\n  }\n  /** Set different wallet modes, the default is multi. Single address mode is not adviceable and can have unexpected effects. */\n\n\n  get walletMode() {\n    return this.storage.getValue('Settings:WalletMode', 'multi');\n  }\n\n  set walletMode(value) {\n    this.storage.setValue('Settings:WalletMode', value);\n  }\n\n  get hubs() {\n    const hubs = this.storage.getJSON('Settings:Hubs', '[]');\n\n    if (hubs === 'undefined') {\n      return [];\n    }\n\n    return hubs;\n  }\n\n  set hubs(value) {\n    this.storage.setJSON('Settings:Hubs', value);\n  }\n\n  get hub() {\n    return this.storage.getValue('Settings:Hub');\n  }\n\n  set hub(value) {\n    this.storage.setValue('Settings:Hub', value);\n  } // get identities(): any {\n  //     return this.storage.getJSON('Settings:Identities');\n  // }\n  // set identities(value: any) {\n  //     this.storage.setJSON('Settings:Identities', value);\n  // }\n  // get identity(): string {\n  //     return this.storage.getValue('Settings:Identity');\n  // }\n  // set identity(value: string) {\n  //     this.storage.setValue('Settings:Identity', value);\n  // }\n\n\n  get language() {\n    return this.storage.getValue('Settings:Language');\n  }\n\n  set language(value) {\n    this.storage.setValue('Settings:Language', value);\n  }\n\n  get currency() {\n    return this.storage.getValue('Settings:Currency');\n  }\n\n  set currency(value) {\n    this.storage.setValue('Settings:Currency', value);\n  }\n\n  get showInTaskbar() {\n    if (this.storage.getValue('Settings:ShowInTaskbar') === null) {\n      return true;\n    }\n\n    return this.storage.getValue('Settings:ShowInTaskbar') === 'true';\n  }\n\n  set showInTaskbar(value) {\n    this.storage.setValue('Settings:ShowInTaskbar', value.toString());\n  }\n\n  get openOnLogin() {\n    return this.storage.getValue('Settings:OpenOnLogin') === 'true';\n  }\n\n  set openOnLogin(value) {\n    this.storage.setValue('Settings:OpenOnLogin', value.toString());\n  }\n  /** NOT IMPLEMENTED. Used to automatically lock the wallet after a certain time. */\n\n\n  get autoLock() {\n    return this.storage.getValue('Settings:AutoLock') === 'true';\n  }\n\n  set autoLock(value) {\n    this.storage.setValue('Settings:AutoLock', value.toString());\n  }\n  /** NOT IMPLEMENTED. Used to automatically clear the wallet, not persist it on exit. */\n\n\n  get clearOnExit() {\n    return this.storage.getValue('Settings:ClearOnExit') === 'true';\n  }\n\n  set clearOnExit(value) {\n    this.storage.setValue('Settings:ClearOnExit', value.toString());\n  }\n\n  static ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.StorageService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}