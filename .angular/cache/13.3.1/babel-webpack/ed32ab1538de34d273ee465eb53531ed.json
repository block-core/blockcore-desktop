{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-electron\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"./application-state.service\";\nexport var UpdateService = /*#__PURE__*/(function () {\n  var UpdateService = /*#__PURE__*/function () {\n    function UpdateService(electronService, notificationService, appState) {\n      var _this = this;\n\n      _classCallCheck(this, UpdateService);\n\n      this.electronService = electronService;\n      this.notificationService = notificationService;\n      this.appState = appState;\n      this.downloaded = false;\n      this.available = false;\n      this.downloading = false;\n\n      if (electronService.ipcRenderer) {\n        this.ipc = electronService.ipcRenderer;\n\n        if (!UpdateService.singletonInstance) {\n          this.ipc.on('check-for-update', function (event, info) {\n            // notificationService.show({ title: 'Checking for update...', body: JSON.stringify(info) });\n            console.log('check-for-update: ', info);\n          });\n          this.ipc.on('update-available', function (event, info) {\n            // notificationService.show({ title: 'Update available!', body: JSON.stringify(info)});\n            console.log('update-available: ', info);\n            _this.info = info;\n            _this.available = true;\n          });\n          this.ipc.on('update-not-available', function (event, info) {\n            // notificationService.show({ title: 'Update not available', body: JSON.stringify(info) });\n            console.log('update-not-available: ', info);\n            _this.info = info;\n            _this.available = false;\n          });\n          this.ipc.on('update-downloaded', function (event, info) {\n            console.log('update-downloaded: ', info);\n            _this.downloaded = true;\n          });\n          this.ipc.on('download-progress', function (event, progress) {\n            console.log('download-progress: ', progress);\n            _this.progress = progress;\n          });\n          this.ipc.on('update-error', function (event, error) {\n            // notificationService.show({ title: 'Update error', body: error.message });\n            console.log('update-error: ', error);\n          });\n          UpdateService.singletonInstance = this;\n        }\n      }\n\n      return UpdateService.singletonInstance;\n    }\n\n    _createClass(UpdateService, [{\n      key: \"checkForUpdate\",\n      value: function checkForUpdate() {\n        if (this.ipc) {\n          this.electronService.ipcRenderer.send('check-for-update');\n        }\n      }\n    }, {\n      key: \"downloadUpdate\",\n      value: function downloadUpdate() {\n        if (this.ipc) {\n          this.downloading = true;\n          this.electronService.ipcRenderer.send('download-update');\n        }\n      }\n    }, {\n      key: \"installUpdate\",\n      value: function installUpdate() {\n        if (this.ipc) {\n          this.downloading = false;\n          this.electronService.ipcRenderer.send('install-update');\n        }\n      }\n    }]);\n\n    return UpdateService;\n  }();\n\n  UpdateService.ɵfac = function UpdateService_Factory(t) {\n    return new (t || UpdateService)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.ApplicationStateService));\n  };\n\n  UpdateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UpdateService,\n    factory: UpdateService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateService;\n})();","map":null,"metadata":{},"sourceType":"module"}