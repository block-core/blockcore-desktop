{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, ViewChild, NgModule, TemplateRef, Injector, InjectFlags, Injectable, SkipSelf } from '@angular/core';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, merge, of } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { filter, take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Animations used by the Material bottom sheet. */\n\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) {}\n\nvar matBottomSheetAnimations = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'translateY(100%)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'translateY(0%)'\n  })), /*#__PURE__*/transition('visible => void, visible => hidden', /*#__PURE__*/group([/*#__PURE__*/animate( /*#__PURE__*/ /*#__PURE__*/\"\".concat(AnimationDurations.COMPLEX, \" \").concat(AnimationCurves.ACCELERATION_CURVE)), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])), /*#__PURE__*/transition('void => visible', /*#__PURE__*/group([/*#__PURE__*/animate( /*#__PURE__*/ /*#__PURE__*/\"\".concat(AnimationDurations.EXITING, \" \").concat(AnimationCurves.DECELERATION_CURVE)), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })]))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\n\nvar MAT_BOTTOM_SHEET_DATA = /*#__PURE__*/new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n */\n\nvar MatBottomSheetConfig = /*#__PURE__*/_createClass(function MatBottomSheetConfig() {\n  _classCallCheck(this, MatBottomSheetConfig);\n\n  /** Data being injected into the child component. */\n  this.data = null;\n  /** Whether the bottom sheet has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n\n  this.disableClose = false;\n  /** Aria label to assign to the bottom sheet element. */\n\n  this.ariaLabel = null;\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // Note that this is set to 'dialog' by default, because while the a11y recommendations\n  // are to focus the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n\n  /**\n   * Where the bottom sheet should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n\n  this.autoFocus = 'dialog';\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n}); // TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n\n\nvar MatBottomSheetContainer = /*#__PURE__*/(function () {\n  var MatBottomSheetContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(MatBottomSheetContainer, _BasePortalOutlet);\n\n    var _super = _createSuper(MatBottomSheetContainer);\n\n    function MatBottomSheetContainer(_elementRef, _changeDetectorRef, _focusTrapFactory, _interactivityChecker, _ngZone, breakpointObserver, document,\n    /** The bottom sheet configuration. */\n    bottomSheetConfig) {\n      var _this;\n\n      _classCallCheck(this, MatBottomSheetContainer);\n\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._focusTrapFactory = _focusTrapFactory;\n      _this._interactivityChecker = _interactivityChecker;\n      _this._ngZone = _ngZone;\n      _this.bottomSheetConfig = bottomSheetConfig;\n      /** The state of the bottom sheet animations. */\n\n      _this._animationState = 'void';\n      /** Emits whenever the state of the animation changes. */\n\n      _this._animationStateChanged = new EventEmitter();\n      /** Element that was focused before the bottom sheet was opened. */\n\n      _this._elementFocusedBeforeOpened = null;\n      /**\n       * Attaches a DOM portal to the bottom sheet container.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      _this.attachDomPortal = function (portal) {\n        _this._validatePortalAttached();\n\n        _this._setPanelClass();\n\n        _this._savePreviouslyFocusedElement();\n\n        return _this._portalOutlet.attachDomPortal(portal);\n      };\n\n      _this._document = document;\n      _this._breakpointSubscription = breakpointObserver.observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(function () {\n        _this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n\n        _this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n\n        _this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n      return _this;\n    }\n    /** Attach a component portal as content to this bottom sheet container. */\n\n\n    _createClass(MatBottomSheetContainer, [{\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        this._validatePortalAttached();\n\n        this._setPanelClass();\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /** Attach a template portal as content to this bottom sheet container. */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        this._validatePortalAttached();\n\n        this._setPanelClass();\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /** Begin animation of bottom sheet entrance into view. */\n\n    }, {\n      key: \"enter\",\n      value: function enter() {\n        if (!this._destroyed) {\n          this._animationState = 'visible';\n\n          this._changeDetectorRef.detectChanges();\n        }\n      }\n      /** Begin animation of the bottom sheet exiting from view. */\n\n    }, {\n      key: \"exit\",\n      value: function exit() {\n        if (!this._destroyed) {\n          this._animationState = 'hidden';\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n\n        this._destroyed = true;\n      }\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        if (event.toState === 'hidden') {\n          this._restoreFocus();\n        } else if (event.toState === 'visible') {\n          this._trapFocus();\n        }\n\n        this._animationStateChanged.emit(event);\n      }\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n      }\n    }, {\n      key: \"_toggleClass\",\n      value: function _toggleClass(cssClass, add) {\n        this._elementRef.nativeElement.classList.toggle(cssClass, add);\n      }\n    }, {\n      key: \"_validatePortalAttached\",\n      value: function _validatePortalAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Attempting to attach bottom sheet content after content is already attached');\n        }\n      }\n    }, {\n      key: \"_setPanelClass\",\n      value: function _setPanelClass() {\n        var _element$classList;\n\n        var element = this._elementRef.nativeElement;\n\n        (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(coerceArray(this.bottomSheetConfig.panelClass || [])));\n      }\n      /**\n       * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n       * attribute to forcefully focus it. The attribute is removed after focus is moved.\n       * @param element The element to focus.\n       */\n\n    }, {\n      key: \"_forceFocus\",\n      value: function _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n          element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n          this._ngZone.runOutsideAngular(function () {\n            var callback = function callback() {\n              element.removeEventListener('blur', callback);\n              element.removeEventListener('mousedown', callback);\n              element.removeAttribute('tabindex');\n            };\n\n            element.addEventListener('blur', callback);\n            element.addEventListener('mousedown', callback);\n          });\n        }\n\n        element.focus(options);\n      }\n      /**\n       * Focuses the first element that matches the given selector within the focus trap.\n       * @param selector The CSS selector for the element to set focus to.\n       */\n\n    }, {\n      key: \"_focusByCssSelector\",\n      value: function _focusByCssSelector(selector, options) {\n        var elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n        if (elementToFocus) {\n          this._forceFocus(elementToFocus, options);\n        }\n      }\n      /**\n       * Moves the focus inside the focus trap. When autoFocus is not set to 'bottom-sheet',\n       * if focus cannot be moved then focus will go to the bottom sheet container.\n       */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        var element = this._elementRef.nativeElement;\n\n        if (!this._focusTrap) {\n          this._focusTrap = this._focusTrapFactory.create(element);\n        } // If were to attempt to focus immediately, then the content of the bottom sheet would not\n        // yet be ready in instances where change detection has to run first. To deal with this,\n        // we simply wait for the microtask queue to be empty when setting focus when autoFocus\n        // isn't set to bottom sheet. If the element inside the bottom sheet can't be focused,\n        // then the container is focused so the user can't tab into other elements behind it.\n\n\n        switch (this.bottomSheetConfig.autoFocus) {\n          case false:\n          case 'dialog':\n            var activeElement = _getFocusedElementPierceShadowDom(); // Ensure that focus is on the bottom sheet container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the bottom sheet already, because it's possible that the\n            // consumer specified `autoFocus` in order to move focus themselves.\n\n\n            if (activeElement !== element && !element.contains(activeElement)) {\n              element.focus();\n            }\n\n            break;\n\n          case true:\n          case 'first-tabbable':\n            this._focusTrap.focusInitialElementWhenReady();\n\n            break;\n\n          case 'first-heading':\n            this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n            break;\n\n          default:\n            this._focusByCssSelector(this.bottomSheetConfig.autoFocus);\n\n            break;\n        }\n      }\n      /** Restores focus to the element that was focused before the bottom sheet was opened. */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        var toFocus = this._elementFocusedBeforeOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n        if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n          var activeElement = _getFocusedElementPierceShadowDom();\n\n          var element = this._elementRef.nativeElement; // Make sure that focus is still inside the bottom sheet or is on the body (usually because a\n          // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n          // the consumer moved it themselves before the animation was done, in which case we shouldn't\n          // do anything.\n\n          if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n            toFocus.focus();\n          }\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n      }\n      /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n\n    }, {\n      key: \"_savePreviouslyFocusedElement\",\n      value: function _savePreviouslyFocusedElement() {\n        var _this2 = this;\n\n        this._elementFocusedBeforeOpened = _getFocusedElementPierceShadowDom(); // The `focus` method isn't available during server-side rendering.\n\n        if (this._elementRef.nativeElement.focus) {\n          this._ngZone.runOutsideAngular(function () {\n            Promise.resolve().then(function () {\n              return _this2._elementRef.nativeElement.focus();\n            });\n          });\n        }\n      }\n    }]);\n\n    return MatBottomSheetContainer;\n  }(BasePortalOutlet);\n\n  MatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) {\n    return new (t || MatBottomSheetContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.BreakpointObserver), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatBottomSheetConfig));\n  };\n\n  MatBottomSheetContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatBottomSheetContainer,\n    selectors: [[\"mat-bottom-sheet-container\"]],\n    viewQuery: function MatBottomSheetContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"mat-bottom-sheet-container\"],\n    hostVars: 2,\n    hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.bottomSheetConfig == null ? null : ctx.bottomSheetConfig.ariaLabel);\n        i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatBottomSheetContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [i4.CdkPortalOutlet],\n    styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matBottomSheetAnimations.bottomSheetState]\n    }\n  });\n  return MatBottomSheetContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatBottomSheetModule = /*#__PURE__*/(function () {\n  var MatBottomSheetModule = /*#__PURE__*/_createClass(function MatBottomSheetModule() {\n    _classCallCheck(this, MatBottomSheetModule);\n  });\n\n  MatBottomSheetModule.ɵfac = function MatBottomSheetModule_Factory(t) {\n    return new (t || MatBottomSheetModule)();\n  };\n\n  MatBottomSheetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatBottomSheetModule\n  });\n  MatBottomSheetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[OverlayModule, MatCommonModule, PortalModule], MatCommonModule]\n  });\n  return MatBottomSheetModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\n\n\nvar MatBottomSheetRef = /*#__PURE__*/function () {\n  function MatBottomSheetRef(containerInstance, _overlayRef) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatBottomSheetRef);\n\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the bottom sheet has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose; // Emit when opening animation completes\n\n    containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'visible';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'hidden';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(function () {\n      _this3._afterDismissed.next(_this3._result);\n\n      _this3._afterDismissed.complete();\n    });\n\n    merge(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE;\n    }))).subscribe(function (event) {\n      if (!_this3.disableClose && (event.type !== 'keydown' || !hasModifierKey(event))) {\n        event.preventDefault();\n\n        _this3.dismiss();\n      }\n    });\n  }\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n\n\n  _createClass(MatBottomSheetRef, [{\n    key: \"dismiss\",\n    value: function dismiss(result) {\n      var _this4 = this;\n\n      if (!this._afterDismissed.closed) {\n        // Transition the backdrop in parallel to the bottom sheet.\n        this.containerInstance._animationStateChanged.pipe(filter(function (event) {\n          return event.phaseName === 'start';\n        }), take(1)).subscribe(function (event) {\n          // The logic that disposes of the overlay depends on the exit animation completing, however\n          // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n          // timeout which will clean everything up if the animation hasn't fired within the specified\n          // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n          // vast majority of cases the timeout will have been cleared before it has fired.\n          _this4._closeFallbackTimeout = setTimeout(function () {\n            _this4._overlayRef.dispose();\n          }, event.totalTime + 100);\n\n          _this4._overlayRef.detachBackdrop();\n        });\n\n        this._result = result;\n        this.containerInstance.exit();\n      }\n    }\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n  }]);\n\n  return MatBottomSheetRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default bottom sheet options. */\n\n\nvar MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-bottom-sheet-default-options');\n/**\n * Service to trigger Material Design bottom sheets.\n */\n\nvar MatBottomSheet = /*#__PURE__*/(function () {\n  var MatBottomSheet = /*#__PURE__*/function () {\n    function MatBottomSheet(_overlay, _injector, _parentBottomSheet, _defaultOptions) {\n      _classCallCheck(this, MatBottomSheet);\n\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._parentBottomSheet = _parentBottomSheet;\n      this._defaultOptions = _defaultOptions;\n      this._bottomSheetRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened bottom sheet. */\n\n\n    _createClass(MatBottomSheet, [{\n      key: \"_openedBottomSheetRef\",\n      get: function get() {\n        var parent = this._parentBottomSheet;\n        return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n      },\n      set: function set(value) {\n        if (this._parentBottomSheet) {\n          this._parentBottomSheet._openedBottomSheetRef = value;\n        } else {\n          this._bottomSheetRefAtThisLevel = value;\n        }\n      }\n    }, {\n      key: \"open\",\n      value: function open(componentOrTemplateRef, config) {\n        var _this5 = this;\n\n        var _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n\n        var overlayRef = this._createOverlay(_config);\n\n        var container = this._attachContainer(overlayRef, _config);\n\n        var ref = new MatBottomSheetRef(container, overlayRef);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n          container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n            $implicit: _config.data,\n            bottomSheetRef: ref\n          }));\n        } else {\n          var portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n          var contentRef = container.attachComponentPortal(portal);\n          ref.instance = contentRef.instance;\n        } // When the bottom sheet is dismissed, clear the reference to it.\n\n\n        ref.afterDismissed().subscribe(function () {\n          // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n          if (_this5._openedBottomSheetRef == ref) {\n            _this5._openedBottomSheetRef = null;\n          }\n        });\n\n        if (this._openedBottomSheetRef) {\n          // If a bottom sheet is already in view, dismiss it and enter the\n          // new bottom sheet after exit animation is complete.\n          this._openedBottomSheetRef.afterDismissed().subscribe(function () {\n            return ref.containerInstance.enter();\n          });\n\n          this._openedBottomSheetRef.dismiss();\n        } else {\n          // If no bottom sheet is in view, enter the new bottom sheet.\n          ref.containerInstance.enter();\n        }\n\n        this._openedBottomSheetRef = ref;\n        return ref;\n      }\n      /**\n       * Dismisses the currently-visible bottom sheet.\n       * @param result Data to pass to the bottom sheet instance.\n       */\n\n    }, {\n      key: \"dismiss\",\n      value: function dismiss(result) {\n        if (this._openedBottomSheetRef) {\n          this._openedBottomSheetRef.dismiss(result);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._bottomSheetRefAtThisLevel) {\n          this._bottomSheetRefAtThisLevel.dismiss();\n        }\n      }\n      /**\n       * Attaches the bottom sheet container component to the overlay.\n       */\n\n    }, {\n      key: \"_attachContainer\",\n      value: function _attachContainer(overlayRef, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = Injector.create({\n          parent: userInjector || this._injector,\n          providers: [{\n            provide: MatBottomSheetConfig,\n            useValue: config\n          }]\n        });\n        var containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n        var containerRef = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n      }\n      /**\n       * Creates a new overlay and places it in the correct location.\n       * @param config The user-specified bottom sheet config.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        var overlayConfig = new OverlayConfig({\n          direction: config.direction,\n          hasBackdrop: config.hasBackdrop,\n          disposeOnNavigation: config.closeOnNavigation,\n          maxWidth: '100%',\n          scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n          positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n        });\n\n        if (config.backdropClass) {\n          overlayConfig.backdropClass = config.backdropClass;\n        }\n\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an injector to be used inside of a bottom sheet component.\n       * @param config Config that was used to create the bottom sheet.\n       * @param bottomSheetRef Reference to the bottom sheet.\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, bottomSheetRef) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var providers = [{\n          provide: MatBottomSheetRef,\n          useValue: bottomSheetRef\n        }, {\n          provide: MAT_BOTTOM_SHEET_DATA,\n          useValue: config.data\n        }];\n\n        if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n          providers.push({\n            provide: Directionality,\n            useValue: {\n              value: config.direction,\n              change: of()\n            }\n          });\n        }\n\n        return Injector.create({\n          parent: userInjector || this._injector,\n          providers: providers\n        });\n      }\n    }]);\n\n    return MatBottomSheet;\n  }();\n\n  MatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) {\n    return new (t || MatBottomSheet)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(MatBottomSheet, 12), i0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n  };\n\n  MatBottomSheet.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatBottomSheet,\n    factory: MatBottomSheet.ɵfac,\n    providedIn: MatBottomSheetModule\n  });\n  return MatBottomSheet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\n\n\nfunction _applyConfigDefaults(defaults, config) {\n  return Object.assign(Object.assign({}, defaults), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_BOTTOM_SHEET_DATA, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MatBottomSheetConfig, MatBottomSheetContainer, MatBottomSheetModule, MatBottomSheetRef, matBottomSheetAnimations }; //# sourceMappingURL=bottom-sheet.mjs.map","map":null,"metadata":{},"sourceType":"module"}