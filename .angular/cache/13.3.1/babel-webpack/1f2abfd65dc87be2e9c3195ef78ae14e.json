{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a, _b, _c;\n\nimport { Component, ViewEncapsulation, HostBinding, ChangeDetectorRef } from '@angular/core';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { GlobalService } from '../../services/global.service';\nimport { ApiService } from '../../services/api.service';\nimport { ApplicationStateService } from '../../services/application-state.service';\nimport { WalletInfo } from '../../classes/wallet-info';\nimport { WalletLoad } from '../../classes/wallet-load';\nimport { WalletService } from '../../services/wallet.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ElectronService } from 'ngx-electron';\nimport * as bip38 from '../../../libs/bip38';\nimport { ChainService } from '../../services/chain.service';\n\nvar LoginComponent = /*#__PURE__*/function () {\n  function LoginComponent(http, cd, authService, walletService, router, globalService, identityService, wallet, storageService, electronService, chains, log, apiService, appState) {\n    _classCallCheck(this, LoginComponent);\n\n    this.http = http;\n    this.cd = cd;\n    this.authService = authService;\n    this.walletService = walletService;\n    this.router = router;\n    this.globalService = globalService;\n    this.identityService = identityService;\n    this.wallet = wallet;\n    this.storageService = storageService;\n    this.electronService = electronService;\n    this.chains = chains;\n    this.log = log;\n    this.apiService = apiService;\n    this.appState = appState;\n    this.hostClass = true;\n    this.hasWallet = false;\n    this.accounts = [];\n    this.password = ''; // Default to empty string, not null/undefined.\n\n    if (electronService.ipcRenderer) {\n      this.ipc = electronService.ipcRenderer;\n    }\n  }\n\n  _createClass(LoginComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.loadWallets();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"loadWallets\",\n    value: function loadWallets() {\n      var _this = this;\n\n      if (this.appState.isSimpleMode) {\n        this.getLocalWalletFiles();\n      } else {\n        this.subscription = this.apiService.getNodeStatusCustomInterval(10000).subscribe(function (response) {\n          _this.status = response;\n\n          _this.log.info('Status update result: ', _this.status);\n        });\n        this.getWalletFiles();\n      }\n    }\n  }, {\n    key: \"getLocalWalletFiles\",\n    value: function getLocalWalletFiles() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var db, list, wallets;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                // Read accounts from localStorage.\n                db = new DatabaseStorageService('cityhub');\n                _context.next = 4;\n                return db.wallets.toArray();\n\n              case 4:\n                list = _context.sent;\n                wallets = list.map(function (item) {\n                  return {\n                    id: item.name,\n                    name: item.name\n                  };\n                });\n                this.accounts = wallets;\n                this.appState.accounts = wallets;\n                console.log(list);\n                this.hasWallet = list.length > 0;\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                this.log.error(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n    }\n  }, {\n    key: \"changeMode\",\n    value: function changeMode() {\n      var currentMode = localStorage.getItem('Network:Mode');\n      var shouldExitNode = currentMode !== 'manual'; // Persist the current mode as PreviousMode.\n\n      localStorage.setItem('Network:ModePrevious', localStorage.getItem('Network:Mode'));\n      localStorage.removeItem('Network:Mode');\n      this.appState.changingMode = true;\n      this.electronService.ipcRenderer.send('daemon-change'); // Do not send shutdown command if we're in manual mode.\n\n      if (shouldExitNode) {\n        // Make sure we shut down the existing node when user choose the change mode action.\n        this.apiService.shutdownNode().subscribe(function (response) {// The response from shutdown is returned before the node is fully exited, so put a small delay here.\n          // setTimeout(() => {\n          //     this.router.navigate(['/load']);\n          // }, 1500);\n        });\n      }\n\n      this.electronService.ipcRenderer.send('update-icon', null); // Navigate and show loading indicator.\n\n      this.router.navigate(['/load'], {\n        queryParams: {\n          loading: shouldExitNode\n        }\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.errorMessage = '';\n      this.selectedAccount = null;\n      this.password = '';\n    }\n  }, {\n    key: \"getWalletFiles\",\n    value: function getWalletFiles() {\n      var _this2 = this;\n\n      this.apiService.getWalletFiles().subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        _this2.wallets = response.walletsFiles;\n\n        _this2.globalService.setWalletPath(response.walletsPath);\n\n        if (_this2.wallets.length > 0) {\n          _this2.hasWallet = true;\n          var lastUsedWallet = localStorage.getItem('Network:Wallet'); // eslint-disable-next-line guard-for-in\n\n          for (var wallet in _this2.wallets) {\n            var id = wallet;\n\n            var name = _this2.wallets[wallet].slice(0, -12);\n\n            var account = {\n              id: id,\n              name: name\n            };\n\n            _this2.accounts.push(account);\n\n            _this2.appState.accounts = _this2.accounts;\n\n            if (lastUsedWallet && lastUsedWallet === name) {\n              _this2.selectedAccount = account;\n\n              if (environment.password) {\n                setTimeout(function () {\n                  _this2.password = environment.password;\n\n                  _this2.unlock();\n                }, 500);\n              }\n            } // this.wallets[wallet] = this.wallets[wallet].slice(0, -12);\n\n          } // If no wallet has been selected, pick the first one.\n\n\n          if (!_this2.selectedAccount) {\n            _this2.selectedAccount = _this2.accounts[0];\n          }\n        } else {\n          _this2.hasWallet = false;\n        }\n\n        _this2.cd.markForCheck(); // }\n\n      }, function (error) {\n        _this2.apiService.handleException(error);\n      });\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      this.errorMessage = '';\n      this.unlocking = true;\n      this.invalidPassword = false;\n      var chain = this.chains.getChain(this.appState.daemon.network);\n      var coinUnit = chain.unit || chain.chain;\n\n      if (!chain.coin) {\n        chain.coin = chain.name;\n      }\n\n      this.globalService.setWalletName(this.selectedAccount.name);\n      this.storageService.setWalletName(this.selectedAccount.name, coinUnit);\n      this.globalService.setCoinName(chain.coin);\n      this.globalService.setCoinUnit(coinUnit);\n      this.getCurrentNetwork();\n      var walletLoad = new WalletLoad(this.selectedAccount.name, this.password);\n\n      if (this.appState.isSimpleMode) {\n        this.loadLocalWallet(walletLoad);\n      } else {\n        this.loadWallet(walletLoad);\n      }\n    }\n  }, {\n    key: \"loadLocalWallet\",\n    value: function loadLocalWallet(walletLoad) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var db, wallet, self, start, decryptedKey, stop, diff;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                db = new DatabaseStorageService('cityhub');\n                _context2.next = 3;\n                return db.wallets.get({\n                  name: walletLoad.name\n                });\n\n              case 3:\n                wallet = _context2.sent;\n                self = this;\n                console.log('Load Local Wallet...');\n\n                try {\n                  start = new Date().getTime();\n                  console.log(wallet); // bip38.decryptAsync(wallet.encryptedSeed, walletLoad.password, (decryptedKey) => {\n                  // }, null, this.appState.networkParams);\n\n                  decryptedKey = bip38.decrypt(wallet.encryptedSeed, walletLoad.password, null, null, this.appState.networkParams);\n                  console.log('decrypted!');\n                  console.log(decryptedKey);\n                  stop = new Date().getTime();\n                  diff = stop - start;\n                  console.log(diff + 'ms taken to decrypt.'); // console.log('decryptedKey:', decryptedKey);\n\n                  self.authService.setAuthenticated();\n                  self.unlocking = false;\n                  localStorage.setItem('Network:Wallet', wallet.name); // Make sure the unlocked wallet is available, especially the extpubkey is required to generate addresses.\n\n                  this.wallet.activeWallet = wallet;\n                  self.router.navigateByUrl('/dashboard');\n                } catch (err) {\n                  if (err.message !== 'AssertionError [ERR_ASSERTION]') {\n                    self.log.error('Unknown failure on wallet unlock', err);\n                  }\n\n                  self.unlocking = false;\n                  self.invalidPassword = true;\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getCurrentNetwork\",\n    value: function getCurrentNetwork() {\n      var _this3 = this;\n\n      var walletInfo = new WalletInfo(this.globalService.getWalletName());\n      this.apiService.getGeneralInfoOnce(walletInfo).subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        var responseMessage = response; // TODO: Figure out what we want to do with this node call. The coin name and unit is now being set by the definitions.\n\n        _this3.globalService.setNetwork(responseMessage.network); // if (responseMessage.network === 'CityMain') {\n        //     this.globalService.setCoinName('City');\n        //     this.globalService.setCoinUnit('CITY');\n        // } else if (responseMessage.network === 'CityTest') {\n        //     this.globalService.setCoinName('CityTest');\n        //     this.globalService.setCoinUnit('TCITY');\n        // } else if (responseMessage.network === 'CityRegTest') {\n        //     this.globalService.setCoinName('CityRegTest');\n        //     this.globalService.setCoinUnit('TCITY');\n        // } else if (responseMessage.network === 'StratisMain') {\n        //     this.globalService.setCoinName('Stratis');\n        //     this.globalService.setCoinUnit('STRAT');\n        // } else if (responseMessage.network === 'StratisTest') {\n        //     this.globalService.setCoinName('TestStratis');\n        //     this.globalService.setCoinUnit('TSTRAT');\n        // } else if (responseMessage.network === 'Main') {\n        //     this.globalService.setCoinName('Bitcoin');\n        //     this.globalService.setCoinUnit('BTC');\n        // } else if (responseMessage.network === 'Test') {\n        //     this.globalService.setCoinName('BitcoinTest');\n        //     this.globalService.setCoinUnit('TBTC');\n        // }\n        // }\n\n      }, function (error) {\n        _this3.apiService.handleException(error);\n      });\n    }\n  }, {\n    key: \"loadWallet\",\n    value: function loadWallet(walletLoad) {\n      var _this4 = this;\n\n      this.apiService.loadWallet(walletLoad).subscribe(function (response) {\n        _this4.unlocking = false; // if (response.status >= 200 && response.status < 400) {\n\n        _this4.authService.setAuthenticated();\n\n        _this4.wallet.start();\n\n        localStorage.setItem('Network:Wallet', _this4.wallet.walletName); // Get the physical path to the wallet file.\n\n        var fullPath = _this4.globalService.getWalletFullPath();\n\n        _this4.identityService.unlock(fullPath, walletLoad.password);\n\n        _this4.router.navigateByUrl('/dashboard'); // }\n\n      }, function (error) {\n        if (error.status === 403) {\n          // Invalid password\n          var msg = error.error.errors[0].message;\n          _this4.errorMessage = msg;\n        }\n\n        if (error.status === 400) {\n          // Empty password\n          var _msg = error.error.errors.password[0];\n          _this4.errorMessage = _msg;\n        }\n\n        _this4.wallet.stop();\n\n        _this4.authService.setAnonymous();\n\n        _this4.unlocking = false;\n\n        _this4.apiService.handleException(error);\n      });\n    }\n  }]);\n\n  return LoginComponent;\n}();\n\n__decorate([HostBinding('class.login'), __metadata(\"design:type\", Object)], LoginComponent.prototype, \"hostClass\", void 0);\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [HttpClient, ChangeDetectorRef, AuthenticationService, WalletService, Router, GlobalService, typeof (_a = typeof IdentityService !== \"undefined\" && IdentityService) === \"function\" ? _a : Object, WalletService, typeof (_b = typeof StorageService !== \"undefined\" && StorageService) === \"function\" ? _b : Object, ElectronService, ChainService, typeof (_c = typeof Logger !== \"undefined\" && Logger) === \"function\" ? _c : Object, ApiService, ApplicationStateService])], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module"}