{"ast":null,"code":"import _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nvar nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nvar _MatBadgeBase = /*#__PURE__*/mixinDisabled( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}());\n\nvar BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\n\nvar MatBadge = /*#__PURE__*/(function () {\n  var MatBadge = /*#__PURE__*/function (_MatBadgeBase2) {\n    _inherits(MatBadge, _MatBadgeBase2);\n\n    var _super = _createSuper(MatBadge);\n\n    function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n      var _this;\n\n      _classCallCheck(this, MatBadge);\n\n      _this = _super.call(this);\n      _this._ngZone = _ngZone;\n      _this._elementRef = _elementRef;\n      _this._ariaDescriber = _ariaDescriber;\n      _this._renderer = _renderer;\n      _this._animationMode = _animationMode;\n      _this._color = 'primary';\n      _this._overlap = true;\n      /**\n       * Position the badge should reside.\n       * Accepts any combination of 'above'|'below' and 'before'|'after'\n       */\n\n      _this.position = 'above after';\n      /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n      _this.size = 'medium';\n      /** Unique id for the badge */\n\n      _this._id = nextId++;\n      /** Whether the OnInit lifecycle hook has run yet */\n\n      _this._isInitialized = false;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        var nativeElement = _elementRef.nativeElement;\n\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n\n      return _this;\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n    _createClass(MatBadge, [{\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      },\n      set: function set(value) {\n        this._setColor(value);\n\n        this._color = value;\n      }\n      /** Whether the badge should overlap its contents or not */\n\n    }, {\n      key: \"overlap\",\n      get: function get() {\n        return this._overlap;\n      },\n      set: function set(val) {\n        this._overlap = coerceBooleanProperty(val);\n      }\n      /** The content for the badge */\n\n    }, {\n      key: \"content\",\n      get: function get() {\n        return this._content;\n      },\n      set: function set(newContent) {\n        this._updateRenderedContent(newContent);\n      }\n      /** Message used to describe the decorated element via aria-describedby */\n\n    }, {\n      key: \"description\",\n      get: function get() {\n        return this._description;\n      },\n      set: function set(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n      }\n      /** Whether the badge is hidden. */\n\n    }, {\n      key: \"hidden\",\n      get: function get() {\n        return this._hidden;\n      },\n      set: function set(val) {\n        this._hidden = coerceBooleanProperty(val);\n      }\n      /** Whether the badge is above the host or not */\n\n    }, {\n      key: \"isAbove\",\n      value: function isAbove() {\n        return this.position.indexOf('below') === -1;\n      }\n      /** Whether the badge is after the host or not */\n\n    }, {\n      key: \"isAfter\",\n      value: function isAfter() {\n        return this.position.indexOf('before') === -1;\n      }\n      /**\n       * Gets the element into which the badge's content is being rendered. Undefined if the element\n       * hasn't been created (e.g. if the badge doesn't have content).\n       */\n\n    }, {\n      key: \"getBadgeElement\",\n      value: function getBadgeElement() {\n        return this._badgeElement;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n\n        if (this.content && !this._badgeElement) {\n          this._badgeElement = this._createBadgeElement();\n\n          this._updateRenderedContent(this.content);\n        }\n\n        this._isInitialized = true;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n          this._renderer.destroyNode(this._badgeElement);\n        }\n\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n      }\n      /** Creates the badge element */\n\n    }, {\n      key: \"_createBadgeElement\",\n      value: function _createBadgeElement() {\n        var badgeElement = this._renderer.createElement('span');\n\n        var activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id)); // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n\n        if (this._animationMode === 'NoopAnimations') {\n          badgeElement.classList.add('_mat-animation-noopable');\n        }\n\n        this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n          this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n              badgeElement.classList.add(activeClass);\n            });\n          });\n        } else {\n          badgeElement.classList.add(activeClass);\n        }\n\n        return badgeElement;\n      }\n      /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n\n    }, {\n      key: \"_updateRenderedContent\",\n      value: function _updateRenderedContent(newContent) {\n        var newContentNormalized = \"\".concat(newContent !== null && newContent !== void 0 ? newContent : '').trim(); // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n          this._badgeElement = this._createBadgeElement();\n        }\n\n        if (this._badgeElement) {\n          this._badgeElement.textContent = newContentNormalized;\n        }\n\n        this._content = newContentNormalized;\n      }\n      /** Updates the host element's aria description via AriaDescriber. */\n\n    }, {\n      key: \"_updateHostAriaDescription\",\n      value: function _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n\n        if (newDescription) {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n\n        this._description = newDescription;\n      }\n      /** Adds css theme class given the color to the component host */\n\n    }, {\n      key: \"_setColor\",\n      value: function _setColor(colorPalette) {\n        var classList = this._elementRef.nativeElement.classList;\n        classList.remove(\"mat-badge-\".concat(this._color));\n\n        if (colorPalette) {\n          classList.add(\"mat-badge-\".concat(colorPalette));\n        }\n      }\n      /** Clears any existing badges that might be left over from server-side rendering. */\n\n    }, {\n      key: \"_clearExistingBadges\",\n      value: function _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        var badges = this._elementRef.nativeElement.querySelectorAll(\":scope > .\".concat(BADGE_CONTENT_CLASS));\n\n        for (var _i = 0, _Array$from = Array.from(badges); _i < _Array$from.length; _i++) {\n          var badgeElement = _Array$from[_i];\n\n          if (badgeElement !== this._badgeElement) {\n            badgeElement.remove();\n          }\n        }\n      }\n    }]);\n\n    return MatBadge;\n  }(_MatBadgeBase);\n\n  MatBadge.ɵfac = function MatBadge_Factory(t) {\n    return new (t || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatBadge.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatBadge,\n    selectors: [[\"\", \"matBadge\", \"\"]],\n    hostAttrs: [1, \"mat-badge\"],\n    hostVars: 20,\n    hostBindings: function MatBadge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: [\"matBadgeDisabled\", \"disabled\"],\n      color: [\"matBadgeColor\", \"color\"],\n      overlap: [\"matBadgeOverlap\", \"overlap\"],\n      position: [\"matBadgePosition\", \"position\"],\n      content: [\"matBadge\", \"content\"],\n      description: [\"matBadgeDescription\", \"description\"],\n      size: [\"matBadgeSize\", \"size\"],\n      hidden: [\"matBadgeHidden\", \"hidden\"]\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatBadge;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatBadgeModule = /*#__PURE__*/(function () {\n  var MatBadgeModule = /*#__PURE__*/_createClass(function MatBadgeModule() {\n    _classCallCheck(this, MatBadgeModule);\n  });\n\n  MatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  };\n\n  MatBadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatBadgeModule\n  });\n  MatBadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[A11yModule, MatCommonModule], MatCommonModule]\n  });\n  return MatBadgeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule }; //# sourceMappingURL=badge.mjs.map","map":null,"metadata":{},"sourceType":"module"}