{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { finalize, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/logger.service\";\nexport class LoggingInterceptor {\n  log;\n\n  constructor(log) {\n    this.log = log;\n  }\n\n  intercept(req, next) {\n    const started = Date.now();\n    let ok; // extend server response observable with logging\n\n    return next.handle(req).pipe(tap( // Succeeds when there is a response; ignore other events\n    event => ok = event instanceof HttpResponse ? 'succeeded' : '', // Operation failed; error is an HttpErrorResponse\n    error => ok = 'failed'), // Log when response observable either completes or errors\n    finalize(() => {\n      const elapsed = Date.now() - started;\n      const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n      this.log.info(msg);\n    }));\n  }\n\n  static ɵfac = function LoggingInterceptor_Factory(t) {\n    return new (t || LoggingInterceptor)(i0.ɵɵinject(i1.Logger));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggingInterceptor,\n    factory: LoggingInterceptor.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module"}