{"ast":null,"code":"import _get from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _toConsumableArray from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nvar BaseTreeControl = /*#__PURE__*/function () {\n  function BaseTreeControl() {\n    _classCallCheck(this, BaseTreeControl);\n\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  _createClass(BaseTreeControl, [{\n    key: \"toggle\",\n    value: function toggle(dataNode) {\n      this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n\n  }, {\n    key: \"expand\",\n    value: function expand(dataNode) {\n      this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse(dataNode) {\n      this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(dataNode) {\n      return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n\n  }, {\n    key: \"toggleDescendants\",\n    value: function toggleDescendants(dataNode) {\n      this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"expandDescendants\",\n    value: function expandDescendants(dataNode) {\n      var _this$expansionModel,\n          _this = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this._trackByValue(value);\n      })));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"collapseDescendants\",\n    value: function collapseDescendants(dataNode) {\n      var _this$expansionModel2,\n          _this2 = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this2._trackByValue(value);\n      })));\n    }\n  }, {\n    key: \"_trackByValue\",\n    value: function _trackByValue(value) {\n      return this.trackBy ? this.trackBy(value) : value;\n    }\n  }]);\n\n  return BaseTreeControl;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nvar FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {\n  _inherits(FlatTreeControl, _BaseTreeControl);\n\n  var _super = _createSuper(FlatTreeControl);\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  function FlatTreeControl(getLevel, isExpandable, options) {\n    var _this3;\n\n    _classCallCheck(this, FlatTreeControl);\n\n    _this3 = _super.call(this);\n    _this3.getLevel = getLevel;\n    _this3.isExpandable = isExpandable;\n    _this3.options = options;\n\n    if (_this3.options) {\n      _this3.trackBy = _this3.options.trackBy;\n    }\n\n    return _this3;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  _createClass(FlatTreeControl, [{\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var startIndex = this.dataNodes.indexOf(dataNode);\n      var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n      // The level of descendants of a tree node must be greater than the level of the given\n      // tree node.\n      // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n      // If we reach a node whose level is greater than the level of the tree node, we hit a\n      // sibling of an ancestor.\n\n      for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n        results.push(this.dataNodes[i]);\n      }\n\n      return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$expansionModel3,\n          _this4 = this;\n\n      (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes.map(function (node) {\n        return _this4._trackByValue(node);\n      })));\n    }\n  }]);\n\n  return FlatTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nvar NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {\n  _inherits(NestedTreeControl, _BaseTreeControl2);\n\n  var _super2 = _createSuper(NestedTreeControl);\n\n  /** Construct with nested tree function getChildren. */\n  function NestedTreeControl(getChildren, options) {\n    var _this5;\n\n    _classCallCheck(this, NestedTreeControl);\n\n    _this5 = _super2.call(this);\n    _this5.getChildren = getChildren;\n    _this5.options = options;\n\n    if (_this5.options) {\n      _this5.trackBy = _this5.options.trackBy;\n    }\n\n    return _this5;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  _createClass(NestedTreeControl, [{\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this6 = this,\n          _this$expansionModel4;\n\n      this.expansionModel.clear();\n      var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n        return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this6.getDescendants(dataNode)), [dataNode]);\n      }, []);\n\n      (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes.map(function (node) {\n        return _this6._trackByValue(node);\n      })));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var descendants = [];\n\n      this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n      return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n\n  }, {\n    key: \"_getDescendants\",\n    value: function _getDescendants(descendants, dataNode) {\n      var _this7 = this;\n\n      descendants.push(dataNode);\n      var childrenNodes = this.getChildren(dataNode);\n\n      if (Array.isArray(childrenNodes)) {\n        childrenNodes.forEach(function (child) {\n          return _this7._getDescendants(descendants, child);\n        });\n      } else if (isObservable(childrenNodes)) {\n        // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n        // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n        childrenNodes.pipe(take(1), filter(Boolean)).subscribe(function (children) {\n          var _iterator = _createForOfIteratorHelper(children),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var child = _step.value;\n\n              _this7._getDescendants(descendants, child);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n    }\n  }]);\n\n  return NestedTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nvar CDK_TREE_NODE_OUTLET_NODE = /*#__PURE__*/new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nvar CdkTreeNodeOutlet = /*#__PURE__*/(function () {\n  var CdkTreeNodeOutlet = /*#__PURE__*/_createClass(function CdkTreeNodeOutlet(viewContainer, _node) {\n    _classCallCheck(this, CdkTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  });\n\n  CdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n    return new (t || CdkTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  CdkTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTreeNodeOutlet,\n    selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n  });\n  return CdkTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nvar CdkTreeNodeOutletContext = /*#__PURE__*/_createClass(function CdkTreeNodeOutletContext(data) {\n  _classCallCheck(this, CdkTreeNodeOutletContext);\n\n  this.$implicit = data;\n});\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar CdkTreeNodeDef = /*#__PURE__*/(function () {\n  var CdkTreeNodeDef = /*#__PURE__*/_createClass(\n  /** @docs-private */\n  function CdkTreeNodeDef(template) {\n    _classCallCheck(this, CdkTreeNodeDef);\n\n    this.template = template;\n  });\n\n  CdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n    return new (t || CdkTreeNodeDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  CdkTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTreeNodeDef,\n    selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"cdkTreeNodeDefWhen\", \"when\"]\n    }\n  });\n  return CdkTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nvar CdkTree = /*#__PURE__*/(function () {\n  var CdkTree = /*#__PURE__*/function () {\n    function CdkTree(_differs, _changeDetectorRef) {\n      _classCallCheck(this, CdkTree);\n\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      /** Level of nodes */\n\n      this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n      //     Remove the MAX_VALUE in viewChange\n\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n\n\n    _createClass(CdkTree, [{\n      key: \"dataSource\",\n      get: function get() {\n        return this._dataSource;\n      },\n      set: function set(dataSource) {\n        if (this._dataSource !== dataSource) {\n          this._switchDataSource(dataSource);\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlMissingError();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this.viewChange.complete();\n\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        }\n      }\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        var defaultNodeDefs = this._nodeDefs.filter(function (def) {\n          return !def.when;\n        });\n\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeMultipleDefaultNodeDefsError();\n        }\n\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n          this._observeRenderChanges();\n        }\n      } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n      //     and nested trees.\n\n      /**\n       * Switch to the provided data source by resetting the data and unsubscribing from the current\n       * render change subscription if one exists. If the data source is null, interpret this by\n       * clearing the node outlet. Otherwise start listening for new data.\n       */\n\n    }, {\n      key: \"_switchDataSource\",\n      value: function _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        } // Remove the all dataNodes if there is now no data source\n\n\n        if (!dataSource) {\n          this._nodeOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n\n        if (this._nodeDefs) {\n          this._observeRenderChanges();\n        }\n      }\n      /** Set up a subscription for the data provided by the data source. */\n\n    }, {\n      key: \"_observeRenderChanges\",\n      value: function _observeRenderChanges() {\n        var _this8 = this;\n\n        var dataStream;\n\n        if (isDataSource(this._dataSource)) {\n          dataStream = this._dataSource.connect(this);\n        } else if (isObservable(this._dataSource)) {\n          dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n          dataStream = of(this._dataSource);\n        }\n\n        if (dataStream) {\n          this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n            return _this8.renderNodeChanges(data);\n          });\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getTreeNoValidDataSourceError();\n        }\n      }\n      /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n    }, {\n      key: \"renderNodeChanges\",\n      value: function renderNodeChanges(data) {\n        var _this9 = this;\n\n        var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataDiffer;\n        var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._nodeOutlet.viewContainer;\n        var parentData = arguments.length > 3 ? arguments[3] : undefined;\n        var changes = dataDiffer.diff(data);\n\n        if (!changes) {\n          return;\n        }\n\n        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n          if (item.previousIndex == null) {\n            _this9.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n\n            _this9._levels.delete(item.item);\n          } else {\n            var view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move(view, currentIndex);\n          }\n        });\n\n        this._changeDetectorRef.detectChanges();\n      }\n      /**\n       * Finds the matching node definition that should be used for this node data. If there is only\n       * one node definition, it is returned. Otherwise, find the node definition that has a when\n       * predicate that returns true with the data. If none return true, return the default node\n       * definition.\n       */\n\n    }, {\n      key: \"_getNodeDef\",\n      value: function _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n          return this._nodeDefs.first;\n        }\n\n        var nodeDef = this._nodeDefs.find(function (def) {\n          return def.when && def.when(i, data);\n        }) || this._defaultNodeDef;\n\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeMissingMatchingNodeDefError();\n        }\n\n        return nodeDef;\n      }\n      /**\n       * Create the embedded view for the data node template and place it in the correct index location\n       * within the data node view container.\n       */\n\n    }, {\n      key: \"insertNode\",\n      value: function insertNode(nodeData, index, viewContainer, parentData) {\n        var node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n        var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n\n        if (this.treeControl.getLevel) {\n          context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n          context.level = this._levels.get(parentData) + 1;\n        } else {\n          context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n        var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n        if (CdkTreeNode.mostRecentTreeNode) {\n          CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n      }\n    }]);\n\n    return CdkTree;\n  }();\n\n  CdkTree.ɵfac = function CdkTree_Factory(t) {\n    return new (t || CdkTree)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  CdkTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkTree,\n    selectors: [[\"cdk-tree\"]],\n    contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n      }\n    },\n    viewQuery: function CdkTree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n    inputs: {\n      dataSource: \"dataSource\",\n      treeControl: \"treeControl\",\n      trackBy: \"trackBy\"\n    },\n    exportAs: [\"cdkTree\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n    template: function CdkTree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkTreeNodeOutlet],\n    encapsulation: 2\n  });\n  return CdkTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nvar CdkTreeNode = /*#__PURE__*/(function () {\n  var CdkTreeNode = /*#__PURE__*/function () {\n    function CdkTreeNode(_elementRef, _tree) {\n      _classCallCheck(this, CdkTreeNode);\n\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** Emits when the node's data has changed. */\n\n      this._dataChanges = new Subject();\n      CdkTreeNode.mostRecentTreeNode = this;\n      this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n\n\n    _createClass(CdkTreeNode, [{\n      key: \"role\",\n      get: function get() {\n        return 'treeitem';\n      },\n      set: function set(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n      }\n      /** The tree node's data. */\n\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._data;\n      },\n      set: function set(value) {\n        if (value !== this._data) {\n          this._data = value;\n\n          this._setRoleFromData();\n\n          this._dataChanges.next();\n        }\n      }\n    }, {\n      key: \"isExpanded\",\n      get: function get() {\n        return this._tree.treeControl.isExpanded(this._data);\n      }\n    }, {\n      key: \"level\",\n      get: function get() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n        this._elementRef.nativeElement.setAttribute('aria-level', \"\".concat(this.level + 1));\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n          CdkTreeNode.mostRecentTreeNode = null;\n        }\n\n        this._dataChanges.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Focuses the menu item. Implements for FocusableOption. */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._elementRef.nativeElement.focus();\n      } // TODO: role should eventually just be set in the component host\n\n    }, {\n      key: \"_setRoleFromData\",\n      value: function _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlFunctionsMissingError();\n        }\n\n        this.role = 'treeitem';\n      }\n    }]);\n\n    return CdkTreeNode;\n  }();\n\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  CdkTreeNode.mostRecentTreeNode = null;\n\n  CdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n    return new (t || CdkTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree));\n  };\n\n  CdkTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTreeNode,\n    selectors: [[\"cdk-tree-node\"]],\n    hostAttrs: [1, \"cdk-tree-node\"],\n    hostVars: 1,\n    hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded);\n      }\n    },\n    inputs: {\n      role: \"role\"\n    },\n    exportAs: [\"cdkTreeNode\"]\n  });\n  return CdkTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  var parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  var classList = element.classList;\n  return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nvar CdkNestedTreeNode = /*#__PURE__*/(function () {\n  var CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {\n    _inherits(CdkNestedTreeNode, _CdkTreeNode);\n\n    var _super3 = _createSuper(CdkNestedTreeNode);\n\n    function CdkNestedTreeNode(elementRef, tree, _differs) {\n      var _this10;\n\n      _classCallCheck(this, CdkNestedTreeNode);\n\n      _this10 = _super3.call(this, elementRef, tree);\n      _this10._differs = _differs;\n      return _this10;\n    }\n\n    _createClass(CdkNestedTreeNode, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this11 = this;\n\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlFunctionsMissingError();\n        }\n\n        var childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n        if (Array.isArray(childrenNodes)) {\n          this.updateChildrenNodes(childrenNodes);\n        } else if (isObservable(childrenNodes)) {\n          childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (result) {\n            return _this11.updateChildrenNodes(result);\n          });\n        }\n\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this11.updateChildrenNodes();\n        });\n      } // This is a workaround for https://github.com/angular/angular/issues/23091\n      // In aot mode, the lifecycle hooks from parent class are not called.\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._clear();\n\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n      /** Add children dataNodes to the NodeOutlet */\n\n    }, {\n      key: \"updateChildrenNodes\",\n      value: function updateChildrenNodes(children) {\n        var outlet = this._getNodeOutlet();\n\n        if (children) {\n          this._children = children;\n        }\n\n        if (outlet && this._children) {\n          var viewContainer = outlet.viewContainer;\n\n          this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        } else {\n          // Reset the data differ if there's no children nodes displayed\n          this._dataDiffer.diff([]);\n        }\n      }\n      /** Clear the children dataNodes. */\n\n    }, {\n      key: \"_clear\",\n      value: function _clear() {\n        var outlet = this._getNodeOutlet();\n\n        if (outlet) {\n          outlet.viewContainer.clear();\n\n          this._dataDiffer.diff([]);\n        }\n      }\n      /** Gets the outlet for the current node. */\n\n    }, {\n      key: \"_getNodeOutlet\",\n      value: function _getNodeOutlet() {\n        var _this12 = this;\n\n        var outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n\n        return outlets && outlets.find(function (outlet) {\n          return !outlet._node || outlet._node === _this12;\n        });\n      }\n    }]);\n\n    return CdkNestedTreeNode;\n  }(CdkTreeNode);\n\n  CdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n    return new (t || CdkNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n  };\n\n  CdkNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkNestedTreeNode,\n    selectors: [[\"cdk-nested-tree-node\"]],\n    contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-nested-tree-node\"],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"cdkNestedTreeNode\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: CdkNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: CdkNestedTreeNode\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Regex used to split a string on its CSS units. */\n\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nvar CdkTreeNodePadding = /*#__PURE__*/(function () {\n  var CdkTreeNodePadding = /*#__PURE__*/function () {\n    function CdkTreeNodePadding(_treeNode, _tree, _element, _dir) {\n      var _this13 = this;\n\n      _classCallCheck(this, CdkTreeNodePadding);\n\n      this._treeNode = _treeNode;\n      this._tree = _tree;\n      this._element = _element;\n      this._dir = _dir;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** CSS units used for the indentation value. */\n\n      this.indentUnits = 'px';\n      this._indent = 40;\n\n      this._setPadding();\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this13._setPadding(true);\n        });\n      } // In Ivy the indentation binding might be set before the tree node's data has been added,\n      // which means that we'll miss the first render. We have to subscribe to changes in the\n      // data to ensure that everything is up to date.\n\n\n      _treeNode._dataChanges.subscribe(function () {\n        return _this13._setPadding();\n      });\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n    _createClass(CdkTreeNodePadding, [{\n      key: \"level\",\n      get: function get() {\n        return this._level;\n      },\n      set: function set(value) {\n        this._setLevelInput(value);\n      }\n      /**\n       * The indent for each level. Can be a number or a CSS string.\n       * Default number 40px from material design menu sub-menu spec.\n       */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      },\n      set: function set(indent) {\n        this._setIndentInput(indent);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n    }, {\n      key: \"_paddingIndent\",\n      value: function _paddingIndent() {\n        var nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n        var level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? \"\".concat(level * this._indent).concat(this.indentUnits) : null;\n      }\n    }, {\n      key: \"_setPadding\",\n      value: function _setPadding() {\n        var forceChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        var padding = this._paddingIndent();\n\n        if (padding !== this._currentPadding || forceChange) {\n          var element = this._element.nativeElement;\n          var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n          var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n          element.style[paddingProp] = padding || '';\n          element.style[resetProp] = '';\n          this._currentPadding = padding;\n        }\n      }\n      /**\n       * This has been extracted to a util because of TS 4 and VE.\n       * View Engine doesn't support property rename inheritance.\n       * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_setLevelInput\",\n      value: function _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n\n        this._setPadding();\n      }\n      /**\n       * This has been extracted to a util because of TS 4 and VE.\n       * View Engine doesn't support property rename inheritance.\n       * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_setIndentInput\",\n      value: function _setIndentInput(indent) {\n        var value = indent;\n        var units = 'px';\n\n        if (typeof indent === 'string') {\n          var parts = indent.split(cssUnitPattern);\n          value = parts[0];\n          units = parts[1] || units;\n        }\n\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n\n        this._setPadding();\n      }\n    }]);\n\n    return CdkTreeNodePadding;\n  }();\n\n  CdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n    return new (t || CdkTreeNodePadding)(i0.ɵɵdirectiveInject(CdkTreeNode), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  CdkTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTreeNodePadding,\n    selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"cdkTreeNodePadding\", \"level\"],\n      indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n    }\n  });\n  return CdkTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nvar CdkTreeNodeToggle = /*#__PURE__*/(function () {\n  var CdkTreeNodeToggle = /*#__PURE__*/function () {\n    function CdkTreeNodeToggle(_tree, _treeNode) {\n      _classCallCheck(this, CdkTreeNodeToggle);\n\n      this._tree = _tree;\n      this._treeNode = _treeNode;\n      this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n\n\n    _createClass(CdkTreeNodeToggle, [{\n      key: \"recursive\",\n      get: function get() {\n        return this._recursive;\n      },\n      set: function set(value) {\n        this._recursive = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"_toggle\",\n      value: function _toggle(event) {\n        this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n      }\n    }]);\n\n    return CdkTreeNodeToggle;\n  }();\n\n  CdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n    return new (t || CdkTreeNodeToggle)(i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(CdkTreeNode));\n  };\n\n  CdkTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTreeNodeToggle,\n    selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n    hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n    }\n  });\n  return CdkTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nvar CdkTreeModule = /*#__PURE__*/(function () {\n  var CdkTreeModule = /*#__PURE__*/_createClass(function CdkTreeModule() {\n    _classCallCheck(this, CdkTreeModule);\n  });\n\n  CdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n    return new (t || CdkTreeModule)();\n  };\n\n  CdkTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CdkTreeModule\n  });\n  CdkTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return CdkTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError }; //# sourceMappingURL=tree.mjs.map","map":null,"metadata":{},"sourceType":"module"}