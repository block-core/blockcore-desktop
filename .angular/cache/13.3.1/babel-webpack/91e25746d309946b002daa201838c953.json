{"ast":null,"code":"import { InjectionToken } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./setup.service\";\nexport const APP_TITLE = new InjectionToken('App Title Postfix');\nexport class TitleService {\n  router;\n  setup;\n  document;\n  appTitle;\n  static singletonInstance;\n  title = new BehaviorSubject(this.document.title);\n\n  constructor(router, setup, document, appTitle) {\n    this.router = router;\n    this.setup = setup;\n    this.document = document;\n    this.appTitle = appTitle;\n\n    if (!TitleService.singletonInstance) {\n      this.initialize();\n      TitleService.singletonInstance = this;\n    }\n\n    return TitleService.singletonInstance;\n  }\n\n  get $title() {\n    return this.title.asObservable();\n  }\n\n  initialize() {\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => this.router.routerState.root), map(route => {\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n\n      return route;\n    }), filter(route => route.outlet === 'primary'), mergeMap(route => route.data), // eslint-disable-next-line @typescript-eslint/dot-notation\n    map(data => ({\n      title: data['title'],\n      prefix: data['prefix']\n    }))).subscribe(title => {\n      let formattedTitle = title.title != null ? title.title : '';\n\n      if (title.prefix != null) {\n        formattedTitle = title.prefix + ' - ' + formattedTitle;\n      } // For the document title, we'll append the app title.\n      // if (this.appTitle != null) {\n      // this.document.title = formattedTitle + ' - ' + this.appTitle;\n\n\n      this.document.title = this.setup.name + ' - ' + formattedTitle; // }\n\n      this.title.next(formattedTitle);\n    });\n  }\n\n  static ɵfac = function TitleService_Factory(t) {\n    return new (t || TitleService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.SetupService), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(APP_TITLE, 8));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TitleService,\n    factory: TitleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}