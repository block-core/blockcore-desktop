{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a, _b, _c, _d;\n\nimport { Component, ViewEncapsulation, HostBinding } from '@angular/core';\nimport { GlobalService } from '../../services/global.service';\nimport { ApiService } from '../../services/api.service';\nimport { FormBuilder } from '@angular/forms';\nimport { DetailsService } from '../../services/details.service';\nimport { ApplicationStateService } from '../../services/application-state.service';\nimport { WalletService } from '../../services/wallet.service';\nimport { CoinService } from 'src/app/services/coin.service';\nimport { CoincapService } from 'src/app/services/coincap.service';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { AppModes } from 'src/app/shared/app-modes';\n\nvar DashboardComponent = /*#__PURE__*/function () {\n  function DashboardComponent(apiService, coincap, coin, globalService, appState, notifications, detailsService, wallet, appModes, fb) {\n    _classCallCheck(this, DashboardComponent);\n\n    this.apiService = apiService;\n    this.coincap = coincap;\n    this.coin = coin;\n    this.globalService = globalService;\n    this.appState = appState;\n    this.notifications = notifications;\n    this.detailsService = detailsService;\n    this.wallet = wallet;\n    this.appModes = appModes;\n    this.fb = fb;\n    this.hostClass = true;\n    this.walletInfo = 'When you send, balance can\\ntemporarily go from confirmed\\nto unconfirmed.';\n    this.tickerInfo = 'Change to the next ticker.';\n    this.coins = new Array();\n    this.selectedCoinTickerIndex = -1;\n    this.searchInput = ''; // Make sure we update wallet at higher frequency.\n\n    this.wallet.active = true;\n  }\n\n  _createClass(DashboardComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {// this.startSubscriptions();\n    }\n  }, {\n    key: \"changeTicker\",\n    value: function changeTicker(change) {\n      this.selectedCoinTickerIndex += change;\n\n      if (this.selectedCoinTickerIndex < 0) {\n        this.selectedCoinTickerIndex = this.coins.length - 1;\n      } else if (this.selectedCoinTickerIndex >= this.coins.length) {\n        this.selectedCoinTickerIndex = 0;\n      }\n\n      this.selectedCoinTicker = this.coins[this.selectedCoinTickerIndex];\n    }\n  }, {\n    key: \"lookup\",\n    value: function lookup() {}\n  }, {\n    key: \"startSubscriptions\",\n    value: function startSubscriptions() {\n      this.subscriptions = [];\n      var asset = this.appState.chain;\n\n      if (asset === 'city') {\n        asset = 'bitcoin'; // Until coincap.io supports CITY, we'll revert to Bitcoin.\n      } // this.subscriptions.push(this.coincap.getAsset(asset)\n      //     .subscribe(\n      //         response => {\n      //             const coincapAsset = response.data as CoincapAsset;\n      //             coincapAsset.pair = 'USD';\n      //             coincapAsset.volumepair = 'USD';\n      //             this.coins[1] = this.mapCoincapToAsset(coincapAsset);\n      //         },\n      //         error => {\n      //             this.coincap.handleException(error);\n      //             // this.reactivate();\n      //         }\n      //     ));\n      // this.subscriptions.push(this.coin.getTicker('btc')\n      //     .subscribe(\n      //         response => {\n      //             const coinAsset = response.result as P2pb2bAsset;\n      //             coinAsset.pair = 'BTC';\n      //             coinAsset.volumepair = 'CITY';\n      //             this.coins[0] = this.mapP2pb2bToAsset(coinAsset);\n      //             if (this.selectedCoinTickerIndex === -1) {\n      //                 this.changeTicker(1);\n      //             }\n      //         },\n      //         error => {\n      //             this.coincap.handleException(error);\n      //             // this.reactivate();\n      //         }\n      //     ));\n      // this.subscriptions.push(this.coin.getTicker('usd')\n      //     .subscribe(\n      //         response => {\n      //             const coinAsset = response.result as P2pb2bAsset;\n      //             coinAsset.pair = 'USD';\n      //             coinAsset.volumepair = 'CITY';\n      //             this.coins[1] = this.mapP2pb2bToAsset(coinAsset);\n      //         },\n      //         error => {\n      //             this.coincap.handleException(error);\n      //             this.reactivate();\n      //         }\n      //     ));\n\n    }\n  }, {\n    key: \"mapP2pb2bToAsset\",\n    value: function mapP2pb2bToAsset(coin) {\n      var asset = {\n        changePercent24Hr: coin.change,\n        marketCap: '0',\n        maxSupply: '0',\n        price: coin.last,\n        volume24Hr: coin.volume,\n        symbol: 'CITY',\n        name: 'City Coin',\n        pair: coin.pair,\n        volumepair: coin.volumepair\n      };\n      return asset;\n    }\n  }, {\n    key: \"mapCoincapToAsset\",\n    value: function mapCoincapToAsset(coin) {\n      var asset = {\n        changePercent24Hr: coin.changePercent24Hr,\n        marketCap: '0',\n        maxSupply: '0',\n        price: coin.priceUsd,\n        volume24Hr: coin.volumeUsd24Hr,\n        symbol: 'BTC',\n        name: 'Bitcoin',\n        pair: coin.pair,\n        volumepair: coin.volumepair\n      };\n      return asset;\n    }\n  }, {\n    key: \"cancelSubscriptions\",\n    value: function cancelSubscriptions() {\n      if (!this.subscriptions) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        this.subscriptions[i].unsubscribe();\n      }\n    }\n    /** Called to cancel and restart all subscriptions. */\n\n  }, {\n    key: \"reactivate\",\n    value: function reactivate() {\n      this.cancelSubscriptions();\n      this.startSubscriptions();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // When navigate away from dashboard, we'll make the wallet update more slowly.\n      this.wallet.active = false;\n      this.cancelSubscriptions();\n    }\n  }]);\n\n  return DashboardComponent;\n}();\n\n__decorate([HostBinding('class.dashboard'), __metadata(\"design:type\", Object)], DashboardComponent.prototype, \"hostClass\", void 0);\n\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [ApiService, typeof (_a = typeof CoincapService !== \"undefined\" && CoincapService) === \"function\" ? _a : Object, typeof (_b = typeof CoinService !== \"undefined\" && CoinService) === \"function\" ? _b : Object, GlobalService, ApplicationStateService, typeof (_c = typeof NotificationService !== \"undefined\" && NotificationService) === \"function\" ? _c : Object, DetailsService, WalletService, typeof (_d = typeof AppModes !== \"undefined\" && AppModes) === \"function\" ? _d : Object, FormBuilder])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}