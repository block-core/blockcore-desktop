{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _assertThisInitialized from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _get from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nexport var Subscriber = /*#__PURE__*/function (_Subscription) {\n  _inherits(Subscriber, _Subscription);\n\n  var _super = _createSuper(Subscriber);\n\n  function Subscriber(destination) {\n    var _this;\n\n    _classCallCheck(this, Subscriber);\n\n    _this = _super.call(this);\n    _this.isStopped = false;\n\n    if (destination) {\n      _this.destination = destination;\n\n      if (isSubscription(destination)) {\n        destination.add(_assertThisInitialized(_this));\n      }\n    } else {\n      _this.destination = EMPTY_OBSERVER;\n    }\n\n    return _this;\n  }\n\n  _createClass(Subscriber, [{\n    key: \"next\",\n    value: function next(value) {\n      if (this.isStopped) {\n        handleStoppedNotification(nextNotification(value), this);\n      } else {\n        this._next(value);\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(err) {\n      if (this.isStopped) {\n        handleStoppedNotification(errorNotification(err), this);\n      } else {\n        this.isStopped = true;\n\n        this._error(err);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      if (this.isStopped) {\n        handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n      } else {\n        this.isStopped = true;\n\n        this._complete();\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        this.isStopped = true;\n\n        _get(_getPrototypeOf(Subscriber.prototype), \"unsubscribe\", this).call(this);\n\n        this.destination = null;\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.destination.next(value);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      try {\n        this.destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      try {\n        this.destination.complete();\n      } finally {\n        this.unsubscribe();\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(next, error, complete) {\n      return new SafeSubscriber(next, error, complete);\n    }\n  }]);\n\n  return Subscriber;\n}(Subscription);\nvar _bind = Function.prototype.bind;\n\nfunction bind(fn, thisArg) {\n  return _bind.call(fn, thisArg);\n}\n\nvar ConsumerObserver = /*#__PURE__*/function () {\n  function ConsumerObserver(partialObserver) {\n    _classCallCheck(this, ConsumerObserver);\n\n    this.partialObserver = partialObserver;\n  }\n\n  _createClass(ConsumerObserver, [{\n    key: \"next\",\n    value: function next(value) {\n      var partialObserver = this.partialObserver;\n\n      if (partialObserver.next) {\n        try {\n          partialObserver.next(value);\n        } catch (error) {\n          handleUnhandledError(error);\n        }\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(err) {\n      var partialObserver = this.partialObserver;\n\n      if (partialObserver.error) {\n        try {\n          partialObserver.error(err);\n        } catch (error) {\n          handleUnhandledError(error);\n        }\n      } else {\n        handleUnhandledError(err);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var partialObserver = this.partialObserver;\n\n      if (partialObserver.complete) {\n        try {\n          partialObserver.complete();\n        } catch (error) {\n          handleUnhandledError(error);\n        }\n      }\n    }\n  }]);\n\n  return ConsumerObserver;\n}();\n\nexport var SafeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SafeSubscriber, _Subscriber);\n\n  var _super2 = _createSuper(SafeSubscriber);\n\n  function SafeSubscriber(observerOrNext, error, complete) {\n    var _this2;\n\n    _classCallCheck(this, SafeSubscriber);\n\n    _this2 = _super2.call(this);\n    var partialObserver;\n\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      partialObserver = {\n        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n        error: error !== null && error !== void 0 ? error : undefined,\n        complete: complete !== null && complete !== void 0 ? complete : undefined\n      };\n    } else {\n      var context;\n\n      if (_assertThisInitialized(_this2) && config.useDeprecatedNextContext) {\n        context = Object.create(observerOrNext);\n\n        context.unsubscribe = function () {\n          return _this2.unsubscribe();\n        };\n\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context)\n        };\n      } else {\n        partialObserver = observerOrNext;\n      }\n    }\n\n    _this2.destination = new ConsumerObserver(partialObserver);\n    return _this2;\n  }\n\n  return _createClass(SafeSubscriber);\n}(Subscriber);\n\nfunction handleUnhandledError(error) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    reportUnhandledError(error);\n  }\n}\n\nfunction defaultErrorHandler(err) {\n  throw err;\n}\n\nfunction handleStoppedNotification(notification, subscriber) {\n  var onStoppedNotification = config.onStoppedNotification;\n  onStoppedNotification && timeoutProvider.setTimeout(function () {\n    return onStoppedNotification(notification, subscriber);\n  });\n}\n\nexport var EMPTY_OBSERVER = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop\n}; //# sourceMappingURL=Subscriber.js.map","map":null,"metadata":{},"sourceType":"module"}