{"ast":null,"code":"import _slicedToArray from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _get from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nvar MatRecycleRows = /*#__PURE__*/(function () {\n  var MatRecycleRows = /*#__PURE__*/_createClass(function MatRecycleRows() {\n    _classCallCheck(this, MatRecycleRows);\n  });\n\n  MatRecycleRows.ɵfac = function MatRecycleRows_Factory(t) {\n    return new (t || MatRecycleRows)();\n  };\n\n  MatRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRecycleRows,\n    selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return MatRecycleRows;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nvar MatTable = /*#__PURE__*/(function () {\n  var MatTable = /*#__PURE__*/function (_CdkTable) {\n    _inherits(MatTable, _CdkTable);\n\n    var _super = _createSuper(MatTable);\n\n    function MatTable() {\n      var _this;\n\n      _classCallCheck(this, MatTable);\n\n      _this = _super.apply(this, arguments);\n      /** Overrides the sticky CSS class set by the `CdkTable`. */\n\n      _this.stickyCssClass = 'mat-table-sticky';\n      /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n\n      _this.needsPositionStickyOnElement = false;\n      return _this;\n    }\n\n    return _createClass(MatTable);\n  }(CdkTable);\n\n  MatTable.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTable_BaseFactory;\n    return function MatTable_Factory(t) {\n      return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable);\n    };\n  }();\n\n  MatTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [1, \"mat-table\"],\n    hostVars: 2,\n    hostBindings: function MatTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    exportAs: [\"matTable\"],\n    features: [i0.ɵɵProvidersFeature([// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: CdkTable,\n      useExisting: MatTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatTable\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n      }\n    },\n    directives: [i1.HeaderRowOutlet, i1.DataRowOutlet, i1.NoDataRowOutlet, i1.FooterRowOutlet],\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"],\n    encapsulation: 2\n  });\n  return MatTable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nvar MatCellDef = /*#__PURE__*/(function () {\n  var MatCellDef = /*#__PURE__*/function (_CdkCellDef) {\n    _inherits(MatCellDef, _CdkCellDef);\n\n    var _super2 = _createSuper(MatCellDef);\n\n    function MatCellDef() {\n      _classCallCheck(this, MatCellDef);\n\n      return _super2.apply(this, arguments);\n    }\n\n    return _createClass(MatCellDef);\n  }(CdkCellDef);\n\n  MatCellDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatCellDef_BaseFactory;\n    return function MatCellDef_Factory(t) {\n      return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef);\n    };\n  }();\n\n  MatCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar MatHeaderCellDef = /*#__PURE__*/(function () {\n  var MatHeaderCellDef = /*#__PURE__*/function (_CdkHeaderCellDef) {\n    _inherits(MatHeaderCellDef, _CdkHeaderCellDef);\n\n    var _super3 = _createSuper(MatHeaderCellDef);\n\n    function MatHeaderCellDef() {\n      _classCallCheck(this, MatHeaderCellDef);\n\n      return _super3.apply(this, arguments);\n    }\n\n    return _createClass(MatHeaderCellDef);\n  }(CdkHeaderCellDef);\n\n  MatHeaderCellDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatHeaderCellDef_BaseFactory;\n    return function MatHeaderCellDef_Factory(t) {\n      return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef);\n    };\n  }();\n\n  MatHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar MatFooterCellDef = /*#__PURE__*/(function () {\n  var MatFooterCellDef = /*#__PURE__*/function (_CdkFooterCellDef) {\n    _inherits(MatFooterCellDef, _CdkFooterCellDef);\n\n    var _super4 = _createSuper(MatFooterCellDef);\n\n    function MatFooterCellDef() {\n      _classCallCheck(this, MatFooterCellDef);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return _createClass(MatFooterCellDef);\n  }(CdkFooterCellDef);\n\n  MatFooterCellDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatFooterCellDef_BaseFactory;\n    return function MatFooterCellDef_Factory(t) {\n      return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef);\n    };\n  }();\n\n  MatFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar MatColumnDef = /*#__PURE__*/(function () {\n  var MatColumnDef = /*#__PURE__*/function (_CdkColumnDef) {\n    _inherits(MatColumnDef, _CdkColumnDef);\n\n    var _super5 = _createSuper(MatColumnDef);\n\n    function MatColumnDef() {\n      _classCallCheck(this, MatColumnDef);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(MatColumnDef, [{\n      key: \"name\",\n      get:\n      /** Unique name for this column. */\n      function get() {\n        return this._name;\n      },\n      set: function set(name) {\n        this._setNameInput(name);\n      }\n      /**\n       * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n       * In the future, this will only add \"mat-column-\" and columnCssClassName\n       * will change from type string[] to string.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_updateColumnCssClassName\",\n      value: function _updateColumnCssClassName() {\n        _get(_getPrototypeOf(MatColumnDef.prototype), \"_updateColumnCssClassName\", this).call(this);\n\n        this._columnCssClassName.push(\"mat-column-\".concat(this.cssClassFriendlyName));\n      }\n    }]);\n\n    return MatColumnDef;\n  }(CdkColumnDef);\n\n  MatColumnDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatColumnDef_BaseFactory;\n    return function MatColumnDef_Factory(t) {\n      return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef);\n    };\n  }();\n\n  MatColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"matColumnDef\", \"name\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatColumnDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatColumnDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header cell template container that adds the right classes and role. */\n\n\nvar MatHeaderCell = /*#__PURE__*/(function () {\n  var MatHeaderCell = /*#__PURE__*/function (_CdkHeaderCell) {\n    _inherits(MatHeaderCell, _CdkHeaderCell);\n\n    var _super6 = _createSuper(MatHeaderCell);\n\n    function MatHeaderCell() {\n      _classCallCheck(this, MatHeaderCell);\n\n      return _super6.apply(this, arguments);\n    }\n\n    return _createClass(MatHeaderCell);\n  }(CdkHeaderCell);\n\n  MatHeaderCell.ɵfac = /* @__PURE__ */function () {\n    var ɵMatHeaderCell_BaseFactory;\n    return function MatHeaderCell_Factory(t) {\n      return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell);\n    };\n  }();\n\n  MatHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar MatFooterCell = /*#__PURE__*/(function () {\n  var MatFooterCell = /*#__PURE__*/function (_CdkFooterCell) {\n    _inherits(MatFooterCell, _CdkFooterCell);\n\n    var _super7 = _createSuper(MatFooterCell);\n\n    function MatFooterCell() {\n      _classCallCheck(this, MatFooterCell);\n\n      return _super7.apply(this, arguments);\n    }\n\n    return _createClass(MatFooterCell);\n  }(CdkFooterCell);\n\n  MatFooterCell.ɵfac = /* @__PURE__ */function () {\n    var ɵMatFooterCell_BaseFactory;\n    return function MatFooterCell_Factory(t) {\n      return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell);\n    };\n  }();\n\n  MatFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar MatCell = /*#__PURE__*/(function () {\n  var MatCell = /*#__PURE__*/function (_CdkCell) {\n    _inherits(MatCell, _CdkCell);\n\n    var _super8 = _createSuper(MatCell);\n\n    function MatCell() {\n      _classCallCheck(this, MatCell);\n\n      return _super8.apply(this, arguments);\n    }\n\n    return _createClass(MatCell);\n  }(CdkCell);\n\n  MatCell.ɵfac = /* @__PURE__ */function () {\n    var ɵMatCell_BaseFactory;\n    return function MatCell_Factory(t) {\n      return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell);\n    };\n  }();\n\n  MatCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar MatHeaderRowDef = /*#__PURE__*/(function () {\n  var MatHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDef) {\n    _inherits(MatHeaderRowDef, _CdkHeaderRowDef);\n\n    var _super9 = _createSuper(MatHeaderRowDef);\n\n    function MatHeaderRowDef() {\n      _classCallCheck(this, MatHeaderRowDef);\n\n      return _super9.apply(this, arguments);\n    }\n\n    return _createClass(MatHeaderRowDef);\n  }(CdkHeaderRowDef);\n\n  MatHeaderRowDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatHeaderRowDef_BaseFactory;\n    return function MatHeaderRowDef_Factory(t) {\n      return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef);\n    };\n  }();\n\n  MatHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matHeaderRowDef\", \"columns\"],\n      sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar MatFooterRowDef = /*#__PURE__*/(function () {\n  var MatFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDef) {\n    _inherits(MatFooterRowDef, _CdkFooterRowDef);\n\n    var _super10 = _createSuper(MatFooterRowDef);\n\n    function MatFooterRowDef() {\n      _classCallCheck(this, MatFooterRowDef);\n\n      return _super10.apply(this, arguments);\n    }\n\n    return _createClass(MatFooterRowDef);\n  }(CdkFooterRowDef);\n\n  MatFooterRowDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatFooterRowDef_BaseFactory;\n    return function MatFooterRowDef_Factory(t) {\n      return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef);\n    };\n  }();\n\n  MatFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matFooterRowDef\", \"columns\"],\n      sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar MatRowDef = /*#__PURE__*/(function () {\n  var MatRowDef = /*#__PURE__*/function (_CdkRowDef) {\n    _inherits(MatRowDef, _CdkRowDef);\n\n    var _super11 = _createSuper(MatRowDef);\n\n    function MatRowDef() {\n      _classCallCheck(this, MatRowDef);\n\n      return _super11.apply(this, arguments);\n    }\n\n    return _createClass(MatRowDef);\n  }(CdkRowDef);\n\n  MatRowDef.ɵfac = /* @__PURE__ */function () {\n    var ɵMatRowDef_BaseFactory;\n    return function MatRowDef_Factory(t) {\n      return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef);\n    };\n  }();\n\n  MatRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matRowDefColumns\", \"columns\"],\n      when: [\"matRowDefWhen\", \"when\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatHeaderRow = /*#__PURE__*/(function () {\n  var MatHeaderRow = /*#__PURE__*/function (_CdkHeaderRow) {\n    _inherits(MatHeaderRow, _CdkHeaderRow);\n\n    var _super12 = _createSuper(MatHeaderRow);\n\n    function MatHeaderRow() {\n      _classCallCheck(this, MatHeaderRow);\n\n      return _super12.apply(this, arguments);\n    }\n\n    return _createClass(MatHeaderRow);\n  }(CdkHeaderRow);\n\n  MatHeaderRow.ɵfac = /* @__PURE__ */function () {\n    var ɵMatHeaderRow_BaseFactory;\n    return function MatHeaderRow_Factory(t) {\n      return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow);\n    };\n  }();\n\n  MatHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatHeaderRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatFooterRow = /*#__PURE__*/(function () {\n  var MatFooterRow = /*#__PURE__*/function (_CdkFooterRow) {\n    _inherits(MatFooterRow, _CdkFooterRow);\n\n    var _super13 = _createSuper(MatFooterRow);\n\n    function MatFooterRow() {\n      _classCallCheck(this, MatFooterRow);\n\n      return _super13.apply(this, arguments);\n    }\n\n    return _createClass(MatFooterRow);\n  }(CdkFooterRow);\n\n  MatFooterRow.ɵfac = /* @__PURE__ */function () {\n    var ɵMatFooterRow_BaseFactory;\n    return function MatFooterRow_Factory(t) {\n      return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow);\n    };\n  }();\n\n  MatFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatFooterRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatRow = /*#__PURE__*/(function () {\n  var MatRow = /*#__PURE__*/function (_CdkRow) {\n    _inherits(MatRow, _CdkRow);\n\n    var _super14 = _createSuper(MatRow);\n\n    function MatRow() {\n      _classCallCheck(this, MatRow);\n\n      return _super14.apply(this, arguments);\n    }\n\n    return _createClass(MatRow);\n  }(CdkRow);\n\n  MatRow.ɵfac = /* @__PURE__ */function () {\n    var ɵMatRow_BaseFactory;\n    return function MatRow_Factory(t) {\n      return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow);\n    };\n  }();\n\n  MatRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n    exportAs: [\"matRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar MatNoDataRow = /*#__PURE__*/(function () {\n  var MatNoDataRow = /*#__PURE__*/function (_CdkNoDataRow) {\n    _inherits(MatNoDataRow, _CdkNoDataRow);\n\n    var _super15 = _createSuper(MatNoDataRow);\n\n    function MatNoDataRow() {\n      var _this2;\n\n      _classCallCheck(this, MatNoDataRow);\n\n      _this2 = _super15.apply(this, arguments);\n      _this2._contentClassName = 'mat-no-data-row';\n      return _this2;\n    }\n\n    return _createClass(MatNoDataRow);\n  }(CdkNoDataRow);\n\n  MatNoDataRow.ɵfac = /* @__PURE__ */function () {\n    var ɵMatNoDataRow_BaseFactory;\n    return function MatNoDataRow_Factory(t) {\n      return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow);\n    };\n  }();\n\n  MatNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatNoDataRow,\n    selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNoDataRow,\n      useExisting: MatNoDataRow\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNoDataRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar MatTextColumn = /*#__PURE__*/(function () {\n  var MatTextColumn = /*#__PURE__*/function (_CdkTextColumn) {\n    _inherits(MatTextColumn, _CdkTextColumn);\n\n    var _super16 = _createSuper(MatTextColumn);\n\n    function MatTextColumn() {\n      _classCallCheck(this, MatTextColumn);\n\n      return _super16.apply(this, arguments);\n    }\n\n    return _createClass(MatTextColumn);\n  }(CdkTextColumn);\n\n  MatTextColumn.ɵfac = /* @__PURE__ */function () {\n    var ɵMatTextColumn_BaseFactory;\n    return function MatTextColumn_Factory(t) {\n      return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn);\n    };\n  }();\n\n  MatTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTextColumn,\n    selectors: [[\"mat-text-column\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n    template: function MatTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        i0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        i0.ɵɵelementContainerEnd();\n      }\n    },\n    directives: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n    encapsulation: 2\n  });\n  return MatTextColumn;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [// Table\nMatTable, MatRecycleRows, // Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, // Cell directives\nMatHeaderCell, MatCell, MatFooterCell, // Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\nvar MatTableModule = /*#__PURE__*/(function () {\n  var MatTableModule = /*#__PURE__*/_createClass(function MatTableModule() {\n    _classCallCheck(this, MatTableModule);\n  });\n\n  MatTableModule.ɵfac = function MatTableModule_Factory(t) {\n    return new (t || MatTableModule)();\n  };\n\n  MatTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTableModule\n  });\n  MatTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CdkTableModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\n\nvar _MatTableDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(_MatTableDataSource, _DataSource);\n\n  var _super17 = _createSuper(_MatTableDataSource);\n\n  function _MatTableDataSource() {\n    var _this3;\n\n    var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, _MatTableDataSource);\n\n    _this3 = _super17.call(this);\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n\n    _this3._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n\n    _this3._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n\n    _this3._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n\n    _this3._renderChangesSubscription = null;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n\n    _this3.sortingDataAccessor = function (data, sortHeaderId) {\n      var value = data[sortHeaderId];\n\n      if (_isNumberValue(value)) {\n        var numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n\n\n    _this3.sortData = function (data, sort) {\n      var active = sort.active;\n      var direction = sort.direction;\n\n      if (!active || direction == '') {\n        return data;\n      }\n\n      return data.sort(function (a, b) {\n        var valueA = _this3.sortingDataAccessor(a, active);\n\n        var valueB = _this3.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n\n\n        var valueAType = typeof valueA;\n        var valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n\n\n        var comparatorResult = 0;\n\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n\n\n    _this3.filterPredicate = function (data, filter) {\n      // Transform the data into a lowercase string of all property values.\n      var dataStr = Object.keys(data).reduce(function (currentTerm, key) {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.\n\n      var transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n\n    _this3._data = new BehaviorSubject(initialData);\n\n    _this3._updateChangeSubscription();\n\n    return _this3;\n  }\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n\n\n  _createClass(_MatTableDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(data) {\n      data = Array.isArray(data) ? data : [];\n\n      this._data.next(data); // Normally the `filteredData` is updated by the re-render\n      // subscription, but that won't happen if it's inactive.\n\n\n      if (!this._renderChangesSubscription) {\n        this._filterData(data);\n      }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n\n  }, {\n    key: \"filter\",\n    get: function get() {\n      return this._filter.value;\n    },\n    set: function set(filter) {\n      this._filter.next(filter); // Normally the `filteredData` is updated by the re-render\n      // subscription, but that won't happen if it's inactive.\n\n\n      if (!this._renderChangesSubscription) {\n        this._filterData(this.data);\n      }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n\n  }, {\n    key: \"sort\",\n    get: function get() {\n      return this._sort;\n    },\n    set: function set(sort) {\n      this._sort = sort;\n\n      this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n\n  }, {\n    key: \"paginator\",\n    get: function get() {\n      return this._paginator;\n    },\n    set: function set(paginator) {\n      this._paginator = paginator;\n\n      this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n\n  }, {\n    key: \"_updateChangeSubscription\",\n    value: function _updateChangeSubscription() {\n      var _this4 = this;\n\n      var _a; // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n      // The events should emit whenever the component emits a change or initializes, or if no\n      // component is provided, a stream with just a null event should be provided.\n      // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n      // pipeline can progress to the next step. Note that the value from these streams are not used,\n      // they purely act as a signal to progress in the pipeline.\n\n\n      var sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n      var pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n      var dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.\n\n      var filteredData = combineLatest([dataStream, this._filter]).pipe(map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            data = _ref2[0];\n\n        return _this4._filterData(data);\n      })); // Watch for filtered data or sort changes to provide an ordered set of data.\n\n      var orderedData = combineLatest([filteredData, sortChange]).pipe(map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            data = _ref4[0];\n\n        return _this4._orderData(data);\n      })); // Watch for ordered data or page changes to provide a paged set of data.\n\n      var paginatedData = combineLatest([orderedData, pageChange]).pipe(map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            data = _ref6[0];\n\n        return _this4._pageData(data);\n      })); // Watched for paged data changes and send the result to the table to render.\n\n      (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this._renderChangesSubscription = paginatedData.subscribe(function (data) {\n        return _this4._renderData.next(data);\n      });\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n\n  }, {\n    key: \"_filterData\",\n    value: function _filterData(data) {\n      var _this5 = this;\n\n      // If there is a filter string, filter out data that does not contain it.\n      // Each data object is converted to a string using the function defined by filterTermAccessor.\n      // May be overridden for customization.\n      this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(function (obj) {\n        return _this5.filterPredicate(obj, _this5.filter);\n      });\n\n      if (this.paginator) {\n        this._updatePaginator(this.filteredData.length);\n      }\n\n      return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n\n  }, {\n    key: \"_orderData\",\n    value: function _orderData(data) {\n      // If there is no active sort or direction, return the data without trying to sort.\n      if (!this.sort) {\n        return data;\n      }\n\n      return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n\n  }, {\n    key: \"_pageData\",\n    value: function _pageData(data) {\n      if (!this.paginator) {\n        return data;\n      }\n\n      var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n\n  }, {\n    key: \"_updatePaginator\",\n    value: function _updatePaginator(filteredDataLength) {\n      var _this6 = this;\n\n      Promise.resolve().then(function () {\n        var paginator = _this6.paginator;\n\n        if (!paginator) {\n          return;\n        }\n\n        paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.\n\n        if (paginator.pageIndex > 0) {\n          var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n          var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n          if (newPageIndex !== paginator.pageIndex) {\n            paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,\n            // we need our own stream so we know to should re-render the data.\n\n            _this6._internalPageChanges.next();\n          }\n        }\n      });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (!this._renderChangesSubscription) {\n        this._updateChangeSubscription();\n      }\n\n      return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _a;\n\n      (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this._renderChangesSubscription = null;\n    }\n  }]);\n\n  return _MatTableDataSource;\n}(DataSource);\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\n\n\nvar MatTableDataSource = /*#__PURE__*/function (_MatTableDataSource2) {\n  _inherits(MatTableDataSource, _MatTableDataSource2);\n\n  var _super18 = _createSuper(MatTableDataSource);\n\n  function MatTableDataSource() {\n    _classCallCheck(this, MatTableDataSource);\n\n    return _super18.apply(this, arguments);\n  }\n\n  return _createClass(MatTableDataSource);\n}(_MatTableDataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource }; //# sourceMappingURL=table.mjs.map","map":null,"metadata":{},"sourceType":"module"}