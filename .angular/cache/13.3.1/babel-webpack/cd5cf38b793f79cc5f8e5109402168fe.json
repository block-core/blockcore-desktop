{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbortError } from \"./Errors\";\nimport { HttpClient } from \"./HttpClient\";\nimport { NodeHttpClient } from \"./NodeHttpClient\";\nimport { XhrHttpClient } from \"./XhrHttpClient\";\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\n\nvar DefaultHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(DefaultHttpClient, _super);\n  /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\n\n\n  function DefaultHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    if (typeof XMLHttpRequest !== \"undefined\") {\n      _this.httpClient = new XhrHttpClient(logger);\n    } else {\n      _this.httpClient = new NodeHttpClient(logger);\n    }\n\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  DefaultHttpClient.prototype.send = function (request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return this.httpClient.send(request);\n  };\n\n  DefaultHttpClient.prototype.getCookieString = function (url) {\n    return this.httpClient.getCookieString(url);\n  };\n\n  return DefaultHttpClient;\n}(HttpClient);\n\nexport { DefaultHttpClient }; //# sourceMappingURL=DefaultHttpClient.js.map","map":null,"metadata":{},"sourceType":"module"}