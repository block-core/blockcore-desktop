{"ast":null,"code":"import Dexie from 'dexie';\nimport * as i0 from \"@angular/core\";\n/** The storage service will recognice the current wallet and storage wallet-dependent items isolated. */\n\nexport class StorageService {\n  walletName;\n  coinType;\n\n  constructor() {}\n\n  setWalletName(walletName, coinType) {\n    this.walletName = walletName;\n    this.coinType = coinType;\n  }\n\n  getIsolatedKey(key) {\n    return this.coinType + ':' + this.walletName + ':' + key;\n  }\n\n  getValue(key, defaultValue, isolated) {\n    if (isolated) {\n      key = this.getIsolatedKey(key);\n    }\n\n    return localStorage.getItem(key) || defaultValue;\n  }\n\n  getNumber(key, defaultValue, isolated) {\n    if (isolated) {\n      key = this.getIsolatedKey(key);\n    }\n\n    const val = localStorage.getItem(key);\n\n    if (val == null) {\n      return defaultValue;\n    }\n\n    return Number(val);\n  }\n\n  setValue(key, value, isolated) {\n    if (isolated) {\n      key = this.getIsolatedKey(key);\n    }\n\n    localStorage.setItem(key, value);\n  }\n\n  getJSON(key, defaultValue, isolated) {\n    if (isolated) {\n      key = this.getIsolatedKey(key);\n    }\n\n    let value = localStorage.getItem(key);\n\n    if (value == null) {\n      // null or undefined\n      value = defaultValue || '{}'; // if we don't have a default value, we make it empty JSON object.\n    }\n\n    return JSON.parse(value);\n  }\n\n  setJSON(key, value, isolated) {\n    if (isolated) {\n      key = this.getIsolatedKey(key);\n    }\n\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  static ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport class DatabaseStorageService extends Dexie {\n  wallets;\n\n  constructor(databaseName) {\n    super(databaseName); //\n    // Define tables and indexes\n    // (Here's where the implicit table props are dynamically created)\n    //\n\n    this.version(1).stores({\n      wallets: '++id, name, network, coinType'\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}