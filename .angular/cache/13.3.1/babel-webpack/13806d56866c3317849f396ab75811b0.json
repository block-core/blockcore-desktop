{"ast":null,"code":"// <scriptSig> {serialized scriptPubKey script}\nconst Buffer = require('safe-buffer').Buffer;\n\nconst bscript = require('../../script');\n\nconst p2ms = require('../multisig/');\n\nconst p2pk = require('../pubkey/');\n\nconst p2pkh = require('../pubkeyhash/');\n\nconst p2wpkho = require('../witnesspubkeyhash/output');\n\nconst p2wsho = require('../witnessscripthash/output');\n\nfunction check(script, allowIncomplete) {\n  const chunks = bscript.decompile(script);\n  if (chunks.length < 1) return false;\n  const lastChunk = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(lastChunk)) return false;\n  const scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));\n  const redeemScriptChunks = bscript.decompile(lastChunk); // is redeemScript a valid script?\n\n  if (!redeemScriptChunks) return false; // is redeemScriptSig push only?\n\n  if (!bscript.isPushOnly(scriptSigChunks)) return false; // is witness?\n\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) || p2wpkho.check(redeemScriptChunks);\n  } // match types\n\n\n  if (p2pkh.input.check(scriptSigChunks) && p2pkh.output.check(redeemScriptChunks)) return true;\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) && p2ms.output.check(redeemScriptChunks)) return true;\n  if (p2pk.input.check(scriptSigChunks) && p2pk.output.check(redeemScriptChunks)) return true;\n  return false;\n}\n\ncheck.toJSON = function () {\n  return 'scriptHash input';\n};\n\nmodule.exports = {\n  check\n};","map":null,"metadata":{},"sourceType":"script"}