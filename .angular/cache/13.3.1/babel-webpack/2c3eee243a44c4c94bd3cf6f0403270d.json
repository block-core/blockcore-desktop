{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a, _b;\n\nimport { Component, ViewEncapsulation, HostBinding, ChangeDetectorRef } from '@angular/core';\nimport { GlobalService } from '../../services/global.service';\nimport { ApiService } from '../../services/api.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WalletService } from '../../services/wallet.service';\nimport { Router } from '@angular/router';\nimport { ChainService } from 'src/app/services/chain.service';\nimport { ApplicationStateService } from 'src/app/services/application-state.service';\nimport { NetworkAddNodeComponent } from './network-add-node.component';\nimport { NetworkBanNodeComponent } from './network-ban-node.component';\n\nvar NetworkDetailsComponent = /*#__PURE__*/function () {\n  function NetworkDetailsComponent(globalService, apiService, cd, appState, chains, router, dialog, walletService) {\n    _classCallCheck(this, NetworkDetailsComponent);\n\n    this.globalService = globalService;\n    this.apiService = apiService;\n    this.cd = cd;\n    this.appState = appState;\n    this.chains = chains;\n    this.router = router;\n    this.dialog = dialog;\n    this.walletService = walletService;\n    this.hostClass = true;\n    this.columns = 4;\n    this.gridByBreakpoint = {\n      xl: 8,\n      lg: 6,\n      md: 4,\n      sm: 2,\n      xs: 1\n    };\n    this.chain = this.chains.getChain(this.appState.daemon.network);\n  }\n\n  _createClass(NetworkDetailsComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.subscription = this.apiService.getNodeStatusCustomInterval(10000).subscribe(function (response) {\n        _this.status = response;\n      });\n      this.subscription2 = this.apiService.getBannedNodesCustomInterval(10000).subscribe(function (response) {\n        _this.bans = response;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscription.unsubscribe();\n      this.subscription2.unsubscribe();\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode() {\n      var _this2 = this;\n\n      var dialogRef = this.dialog.open(NetworkAddNodeComponent, {\n        width: '250px',\n        data: {\n          ip: ''\n        }\n      });\n      dialogRef.afterClosed().subscribe(function (result) {\n        console.log('The dialog was closed', result);\n\n        if (result) {\n          _this2.apiService.addNode(result).subscribe(function (success) {\n            console.log('Result from add node:', success);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(ip) {\n      this.apiService.removeNode(ip).subscribe(function (result) {\n        console.log('Result from add node:', result);\n      });\n    }\n  }, {\n    key: \"banNode\",\n    value: function banNode(ip) {\n      var _this3 = this;\n\n      var dialogRef = this.dialog.open(NetworkBanNodeComponent, {\n        width: '250px',\n        data: {\n          ip: ip,\n          seconds: 86400\n        }\n      });\n      dialogRef.afterClosed().subscribe(function (result) {\n        console.log('The dialog was closed', result);\n\n        if (result) {\n          _this3.apiService.banNode(result.ip, result.seconds).subscribe(function (success) {\n            console.log('Result from ban node:', success);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"removeBan\",\n    value: function removeBan(ip) {\n      this.apiService.unbanNode(ip).subscribe(function (result) {\n        console.log('Result from unban node:', result);\n      });\n    }\n  }, {\n    key: \"removeBans\",\n    value: function removeBans() {\n      this.apiService.removeBans().subscribe(function (result) {\n        console.log('Result from remove bans:', result);\n      });\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.router.navigateByUrl('/network');\n    }\n  }]);\n\n  return NetworkDetailsComponent;\n}();\n\n__decorate([HostBinding('class.network'), __metadata(\"design:type\", Object)], NetworkDetailsComponent.prototype, \"hostClass\", void 0);\n\nNetworkDetailsComponent = __decorate([Component({\n  selector: 'app-network-details',\n  templateUrl: './network-details.component.html',\n  styleUrls: ['./network.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [GlobalService, ApiService, ChangeDetectorRef, typeof (_a = typeof ApplicationStateService !== \"undefined\" && ApplicationStateService) === \"function\" ? _a : Object, typeof (_b = typeof ChainService !== \"undefined\" && ChainService) === \"function\" ? _b : Object, Router, MatDialog, WalletService])], NetworkDetailsComponent);\nexport { NetworkDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}