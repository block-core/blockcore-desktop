{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from \"@angular/core\";\nexport var GlobalService = /*#__PURE__*/(function () {\n  var GlobalService = /*#__PURE__*/function () {\n    function GlobalService() {\n      _classCallCheck(this, GlobalService);\n\n      this.decimalLimit = 8;\n\n      if (!GlobalService.singletonInstance) {\n        GlobalService.singletonInstance = this;\n      }\n\n      return GlobalService.singletonInstance;\n    }\n\n    _createClass(GlobalService, [{\n      key: \"getWalletPath\",\n      value: function getWalletPath() {\n        return this.walletPath;\n      }\n    }, {\n      key: \"getWalletFullPath\",\n      value: function getWalletFullPath() {\n        // Forward slash to be more universal? This must be tested on all OS.\n        return this.walletPath + '/' + this.currentWalletName + '.wallet.json';\n      }\n    }, {\n      key: \"setWalletPath\",\n      value: function setWalletPath(walletPath) {\n        this.walletPath = walletPath;\n      }\n    }, {\n      key: \"getNetwork\",\n      value: function getNetwork() {\n        return this.network;\n      }\n    }, {\n      key: \"setNetwork\",\n      value: function setNetwork(network) {\n        this.network = network;\n      }\n    }, {\n      key: \"getWalletName\",\n      value: function getWalletName() {\n        return this.currentWalletName;\n      }\n    }, {\n      key: \"setWalletName\",\n      value: function setWalletName(currentWalletName) {\n        this.currentWalletName = currentWalletName;\n      }\n    }, {\n      key: \"getCoinType\",\n      value: function getCoinType() {\n        return this.coinType;\n      }\n    }, {\n      key: \"setCoinType\",\n      value: function setCoinType(coinType) {\n        this.coinType = coinType;\n      }\n    }, {\n      key: \"getCoinName\",\n      value: function getCoinName() {\n        return this.coinName;\n      }\n    }, {\n      key: \"setCoinName\",\n      value: function setCoinName(coinName) {\n        this.coinName = coinName;\n      }\n    }, {\n      key: \"getCoinUnit\",\n      value: function getCoinUnit() {\n        return this.coinUnit;\n      }\n    }, {\n      key: \"setCoinUnit\",\n      value: function setCoinUnit(coinUnit) {\n        this.coinUnit = coinUnit;\n      }\n    }, {\n      key: \"transform\",\n      value: function transform(value) {\n        var temp;\n\n        if (typeof value === 'number') {\n          switch (this.getCoinUnit()) {\n            case 'BTC':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'mBTC':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'uBTC':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TBTC':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TmBTC':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TuBTC':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'CITY':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'mCITY':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'uCITY':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TCITY':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TmCITY':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TuCITY':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'STRAT':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'mSTRAT':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'uSTRAT':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TSTRAT':\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TmSTRAT':\n              temp = value / 100000;\n              return temp.toFixed(this.decimalLimit);\n\n            case 'TuSTRAT':\n              temp = value / 100;\n              return temp.toFixed(this.decimalLimit);\n\n            default:\n              temp = value / 100000000;\n              return temp.toFixed(this.decimalLimit);\n          }\n        }\n\n        return '';\n      }\n    }]);\n\n    return GlobalService;\n  }();\n\n  GlobalService.ɵfac = function GlobalService_Factory(t) {\n    return new (t || GlobalService)();\n  };\n\n  GlobalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalService,\n    factory: GlobalService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalService;\n})();","map":null,"metadata":{},"sourceType":"module"}