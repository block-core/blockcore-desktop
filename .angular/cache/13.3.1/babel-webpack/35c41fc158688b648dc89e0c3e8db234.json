{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { WalletInfo } from '../../classes/wallet-info';\nimport { WalletLoad } from '../../classes/wallet-load';\nimport { environment } from '../../../environments/environment';\nimport { DatabaseStorageService } from '../../services/storage.service';\nimport * as bip38 from '../../../libs/bip38';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/authentication.service\";\nimport * as i3 from \"../../services/wallet.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../services/global.service\";\nimport * as i6 from \"../../services/identity.service\";\nimport * as i7 from \"../../services/storage.service\";\nimport * as i8 from \"ngx-electron\";\nimport * as i9 from \"../../services/chain.service\";\nimport * as i10 from \"../../services/logger.service\";\nimport * as i11 from \"../../services/api.service\";\nimport * as i12 from \"../../services/application-state.service\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/form-field\";\nimport * as i15 from \"@angular/material/select\";\nimport * as i16 from \"@angular/forms\";\nimport * as i17 from \"@angular/material/core\";\nimport * as i18 from \"@angular/material/input\";\nimport * as i19 from \"@angular/material/button\";\nimport * as i20 from \"@angular/material/divider\";\n\nfunction LoginComponent_div_2_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const account_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", account_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", account_r7.name, \" \");\n  }\n}\n\nfunction LoginComponent_div_2_span_4_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"The password is not correct.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"mat-form-field\", 18)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Wallet password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 19);\n    i0.ɵɵlistener(\"keyup.enter\", function LoginComponent_div_2_span_4_Template_input_keyup_enter_5_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.unlock();\n    })(\"ngModelChange\", function LoginComponent_div_2_span_4_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.password = $event;\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementStart(7, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_2_span_4_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.unlock();\n    });\n    i0.ɵɵtext(8, \"Unlock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\u00A0 \");\n    i0.ɵɵelementStart(10, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_2_span_4_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.cancel();\n    });\n    i0.ɵɵtext(11, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"br\")(13, \"br\");\n    i0.ɵɵtemplate(14, LoginComponent_div_2_span_4_div_14_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.password);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.unlocking);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.invalidPassword);\n  }\n}\n\nfunction LoginComponent_div_2_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.errorMessage, \" \");\n  }\n}\n\nfunction LoginComponent_div_2_mat_divider_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-divider\");\n  }\n}\n\nfunction LoginComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"mat-form-field\")(2, \"mat-select\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_div_2_Template_mat_select_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.selectedAccount = $event;\n    });\n    i0.ɵɵtemplate(3, LoginComponent_div_2_mat_option_3_Template, 2, 2, \"mat-option\", 16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, LoginComponent_div_2_span_4_Template, 15, 3, \"span\", 12);\n    i0.ɵɵtemplate(5, LoginComponent_div_2_span_5_Template, 3, 1, \"span\", 12);\n    i0.ɵɵtemplate(6, LoginComponent_div_2_mat_divider_6_Template, 1, 0, \"mat-divider\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedAccount);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.accounts);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.selectedAccount !== null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.selectedAccount === null);\n  }\n}\n\nfunction LoginComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\")(2, \"button\", 23);\n    i0.ɵɵtext(3, \"Create\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" or \");\n    i0.ɵɵelementStart(5, \"button\", 24);\n    i0.ɵɵtext(6, \"Restore\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" your account \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Height: \", ctx_r2.status.consensusHeight, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Connections: \", ctx_r2.status.inboundPeers.length + ctx_r2.status.outboundPeers.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Node version: \", ctx_r2.status.version, \" \");\n  }\n}\n\nexport class LoginComponent {\n  http;\n  cd;\n  authService;\n  walletService;\n  router;\n  globalService;\n  identityService;\n  wallet;\n  storageService;\n  electronService;\n  chains;\n  log;\n  apiService;\n  appState;\n  hostClass = true;\n  wallets;\n  selectedAccount;\n  hasWallet = false;\n  accounts = [];\n  unlocking;\n  password = ''; // Default to empty string, not null/undefined.\n\n  invalidPassword;\n  unlockPercentage;\n  errorMessage;\n  subscription;\n  status;\n  ipc;\n\n  constructor(http, cd, authService, walletService, router, globalService, identityService, wallet, storageService, electronService, chains, log, apiService, appState) {\n    this.http = http;\n    this.cd = cd;\n    this.authService = authService;\n    this.walletService = walletService;\n    this.router = router;\n    this.globalService = globalService;\n    this.identityService = identityService;\n    this.wallet = wallet;\n    this.storageService = storageService;\n    this.electronService = electronService;\n    this.chains = chains;\n    this.log = log;\n    this.apiService = apiService;\n    this.appState = appState;\n\n    if (electronService.ipcRenderer) {\n      this.ipc = electronService.ipcRenderer;\n    }\n  }\n\n  ngOnInit() {\n    this.loadWallets();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  loadWallets() {\n    if (this.appState.isSimpleMode) {\n      this.getLocalWalletFiles();\n    } else {\n      this.subscription = this.apiService.getNodeStatusCustomInterval(10000).subscribe(response => {\n        this.status = response;\n        this.log.info('Status update result: ', this.status);\n      });\n      this.getWalletFiles();\n    }\n  }\n\n  getLocalWalletFiles() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        // Read accounts from localStorage.\n        const db = new DatabaseStorageService('cityhub');\n        const list = yield db.wallets.toArray();\n        const wallets = list.map(item => ({\n          id: item.name,\n          name: item.name\n        }));\n        _this.accounts = wallets;\n        _this.appState.accounts = wallets;\n        console.log(list);\n        _this.hasWallet = list.length > 0;\n      } catch (error) {\n        _this.log.error(error);\n      }\n    })();\n  }\n\n  changeMode() {\n    let currentMode = localStorage.getItem('Network:Mode');\n    let shouldExitNode = currentMode !== 'manual'; // Persist the current mode as PreviousMode.\n\n    localStorage.setItem('Network:ModePrevious', localStorage.getItem('Network:Mode'));\n    localStorage.removeItem('Network:Mode');\n    this.appState.changingMode = true;\n    this.electronService.ipcRenderer.send('daemon-change'); // Do not send shutdown command if we're in manual mode.\n\n    if (shouldExitNode) {\n      // Make sure we shut down the existing node when user choose the change mode action.\n      this.apiService.shutdownNode().subscribe(response => {// The response from shutdown is returned before the node is fully exited, so put a small delay here.\n        // setTimeout(() => {\n        //     this.router.navigate(['/load']);\n        // }, 1500);\n      });\n    }\n\n    this.electronService.ipcRenderer.send('update-icon', null); // Navigate and show loading indicator.\n\n    this.router.navigate(['/load'], {\n      queryParams: {\n        loading: shouldExitNode\n      }\n    });\n  }\n\n  cancel() {\n    this.errorMessage = '';\n    this.selectedAccount = null;\n    this.password = '';\n  }\n\n  getWalletFiles() {\n    this.apiService.getWalletFiles().subscribe(response => {\n      // if (response.status >= 200 && response.status < 400) {\n      this.wallets = response.walletsFiles;\n      this.globalService.setWalletPath(response.walletsPath);\n\n      if (this.wallets.length > 0) {\n        this.hasWallet = true;\n        const lastUsedWallet = localStorage.getItem('Network:Wallet'); // eslint-disable-next-line guard-for-in\n\n        for (const wallet in this.wallets) {\n          const id = wallet;\n          const name = this.wallets[wallet].slice(0, -12);\n          const account = {\n            id,\n            name\n          };\n          this.accounts.push(account);\n          this.appState.accounts = this.accounts;\n\n          if (lastUsedWallet && lastUsedWallet === name) {\n            this.selectedAccount = account;\n\n            if (environment.password) {\n              setTimeout(() => {\n                this.password = environment.password;\n                this.unlock();\n              }, 500);\n            }\n          } // this.wallets[wallet] = this.wallets[wallet].slice(0, -12);\n\n        } // If no wallet has been selected, pick the first one.\n\n\n        if (!this.selectedAccount) {\n          this.selectedAccount = this.accounts[0];\n        }\n      } else {\n        this.hasWallet = false;\n      }\n\n      this.cd.markForCheck(); // }\n    }, error => {\n      this.apiService.handleException(error);\n    });\n  }\n\n  unlock() {\n    this.errorMessage = '';\n    this.unlocking = true;\n    this.invalidPassword = false;\n    const chain = this.chains.getChain(this.appState.daemon.network);\n    const coinUnit = chain.unit || chain.chain;\n\n    if (!chain.coin) {\n      chain.coin = chain.name;\n    }\n\n    this.globalService.setWalletName(this.selectedAccount.name);\n    this.storageService.setWalletName(this.selectedAccount.name, coinUnit);\n    this.globalService.setCoinName(chain.coin);\n    this.globalService.setCoinUnit(coinUnit);\n    this.getCurrentNetwork();\n    const walletLoad = new WalletLoad(this.selectedAccount.name, this.password);\n\n    if (this.appState.isSimpleMode) {\n      this.loadLocalWallet(walletLoad);\n    } else {\n      this.loadWallet(walletLoad);\n    }\n  }\n\n  loadLocalWallet(walletLoad) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const db = new DatabaseStorageService('cityhub');\n      const wallet = yield db.wallets.get({\n        name: walletLoad.name\n      });\n      const self = _this2;\n      console.log('Load Local Wallet...');\n\n      try {\n        const start = new Date().getTime();\n        console.log(wallet); // bip38.decryptAsync(wallet.encryptedSeed, walletLoad.password, (decryptedKey) => {\n        // }, null, this.appState.networkParams);\n\n        const decryptedKey = bip38.decrypt(wallet.encryptedSeed, walletLoad.password, null, null, _this2.appState.networkParams);\n        console.log('decrypted!');\n        console.log(decryptedKey);\n        const stop = new Date().getTime();\n        const diff = stop - start;\n        console.log(diff + 'ms taken to decrypt.'); // console.log('decryptedKey:', decryptedKey);\n\n        self.authService.setAuthenticated();\n        self.unlocking = false;\n        localStorage.setItem('Network:Wallet', wallet.name); // Make sure the unlocked wallet is available, especially the extpubkey is required to generate addresses.\n\n        _this2.wallet.activeWallet = wallet;\n        self.router.navigateByUrl('/dashboard');\n      } catch (err) {\n        if (err.message !== 'AssertionError [ERR_ASSERTION]') {\n          self.log.error('Unknown failure on wallet unlock', err);\n        }\n\n        self.unlocking = false;\n        self.invalidPassword = true;\n      }\n    })();\n  }\n\n  getCurrentNetwork() {\n    const walletInfo = new WalletInfo(this.globalService.getWalletName());\n    this.apiService.getGeneralInfoOnce(walletInfo).subscribe(response => {\n      // if (response.status >= 200 && response.status < 400) {\n      const responseMessage = response; // TODO: Figure out what we want to do with this node call. The coin name and unit is now being set by the definitions.\n\n      this.globalService.setNetwork(responseMessage.network); // if (responseMessage.network === 'CityMain') {\n      //     this.globalService.setCoinName('City');\n      //     this.globalService.setCoinUnit('CITY');\n      // } else if (responseMessage.network === 'CityTest') {\n      //     this.globalService.setCoinName('CityTest');\n      //     this.globalService.setCoinUnit('TCITY');\n      // } else if (responseMessage.network === 'CityRegTest') {\n      //     this.globalService.setCoinName('CityRegTest');\n      //     this.globalService.setCoinUnit('TCITY');\n      // } else if (responseMessage.network === 'StratisMain') {\n      //     this.globalService.setCoinName('Stratis');\n      //     this.globalService.setCoinUnit('STRAT');\n      // } else if (responseMessage.network === 'StratisTest') {\n      //     this.globalService.setCoinName('TestStratis');\n      //     this.globalService.setCoinUnit('TSTRAT');\n      // } else if (responseMessage.network === 'Main') {\n      //     this.globalService.setCoinName('Bitcoin');\n      //     this.globalService.setCoinUnit('BTC');\n      // } else if (responseMessage.network === 'Test') {\n      //     this.globalService.setCoinName('BitcoinTest');\n      //     this.globalService.setCoinUnit('TBTC');\n      // }\n      // }\n    }, error => {\n      this.apiService.handleException(error);\n    });\n  }\n\n  loadWallet(walletLoad) {\n    this.apiService.loadWallet(walletLoad).subscribe(response => {\n      this.unlocking = false; // if (response.status >= 200 && response.status < 400) {\n\n      this.authService.setAuthenticated();\n      this.wallet.start();\n      localStorage.setItem('Network:Wallet', this.wallet.walletName); // Get the physical path to the wallet file.\n\n      const fullPath = this.globalService.getWalletFullPath();\n      this.identityService.unlock(fullPath, walletLoad.password);\n      this.router.navigateByUrl('/dashboard'); // }\n    }, error => {\n      if (error.status === 403) {\n        // Invalid password\n        const msg = error.error.errors[0].message;\n        this.errorMessage = msg;\n      }\n\n      if (error.status === 400) {\n        // Empty password\n        const msg = error.error.errors.password[0];\n        this.errorMessage = msg;\n      }\n\n      this.wallet.stop();\n      this.authService.setAnonymous();\n      this.unlocking = false;\n      this.apiService.handleException(error);\n    });\n  }\n\n  static ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.WalletService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.GlobalService), i0.ɵɵdirectiveInject(i6.IdentityService), i0.ɵɵdirectiveInject(i3.WalletService), i0.ɵɵdirectiveInject(i7.StorageService), i0.ɵɵdirectiveInject(i8.ElectronService), i0.ɵɵdirectiveInject(i9.ChainService), i0.ɵɵdirectiveInject(i10.Logger), i0.ɵɵdirectiveInject(i11.ApiService), i0.ɵɵdirectiveInject(i12.ApplicationStateService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    hostVars: 2,\n    hostBindings: function LoginComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"login\", ctx.hostClass);\n      }\n    },\n    decls: 37,\n    vars: 8,\n    consts: [[1, \"login-container\", \"not-selectable\"], [1, \"login-content\"], [\"class\", \"login-accounts\", 4, \"ngIf\"], [\"class\", \"login-actions\", 4, \"ngIf\"], [1, \"login-mode\"], [\"mat-button\", \"\", 3, \"click\"], [1, \"material-icons\"], [\"mat-button\", \"\", \"routerLink\", \"/advanced\"], [\"id\", \"login-banner-wallpaper\", 1, \"login-banner\", 3, \"ngClass\"], [1, \"login-banner-content\"], [1, \"login-logo\", 3, \"src\"], [1, \"login-banner-text\"], [4, \"ngIf\"], [1, \"login-mode-mobile\"], [1, \"login-accounts\"], [\"placeholder\", \"Select wallet\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Fill out to unlock account\", 3, \"ngModel\", \"keyup.enter\", \"ngModelChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"login-unlock-button\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", 1, \"login-cancel-button\", 3, \"click\"], [1, \"login-actions\"], [\"routerLink\", \"/account/create\", \"mat-stroked-button\", \"\"], [\"routerLink\", \"/account/recover\", \"mat-stroked-button\", \"\", \"color\", \"primary\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, LoginComponent_div_2_Template, 7, 5, \"div\", 2);\n        i0.ɵɵtemplate(3, LoginComponent_div_3_Template, 8, 0, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_5_listener() {\n          return ctx.changeMode();\n        });\n        i0.ɵɵelementStart(6, \"span\", 6);\n        i0.ɵɵtext(7, \"public\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \" Change network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \" \\u00A0 \");\n        i0.ɵɵelementStart(10, \"button\", 7)(11, \"span\", 6);\n        i0.ɵɵtext(12, \"settings\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \" Advanced\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 8)(15, \"div\", 9);\n        i0.ɵɵelement(16, \"img\", 10)(17, \"br\")(18, \"br\");\n        i0.ɵɵelementStart(19, \"p\", 11);\n        i0.ɵɵtext(20);\n        i0.ɵɵelement(21, \"br\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelement(23, \"br\");\n        i0.ɵɵtext(24);\n        i0.ɵɵelement(25, \"br\");\n        i0.ɵɵtemplate(26, LoginComponent_span_26_Template, 6, 3, \"span\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 13)(28, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_28_listener() {\n          return ctx.changeMode();\n        });\n        i0.ɵɵelementStart(29, \"span\", 6);\n        i0.ɵɵtext(30, \"public\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(31, \" Change network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(32, \" \\u00A0 \");\n        i0.ɵɵelementStart(33, \"button\", 7)(34, \"span\", 6);\n        i0.ɵɵtext(35, \"settings\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(36, \" Advanced\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasWallet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedAccount === null);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngClass\", \"login-banner-\" + ctx.appState.chain);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate1(\"src\", \"assets/\", ctx.appState.chain, \"/logo-full-light.png\", i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" Release \", ctx.appState.release, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Network: \", ctx.appState.daemon.network, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Mode: \", ctx.appState.daemon.mode, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.status);\n      }\n    },\n    directives: [i13.NgIf, i14.MatFormField, i15.MatSelect, i16.NgControlStatus, i16.NgModel, i13.NgForOf, i17.MatOption, i14.MatLabel, i18.MatInput, i16.DefaultValueAccessor, i19.MatButton, i20.MatDivider, i4.RouterLink, i13.NgClass],\n    styles: [\".login {\\n  height: 100%;\\n  width: 100%;\\n}\\n.login .login-container {\\n  height: 100%;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: row;\\n}\\n.login .login-content {\\n  width: 44%;\\n  min-width: 240px;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: stretch;\\n  min-height: 260px;\\n  margin-top: 10%;\\n}\\n.login .login-unlock-button {\\n  margin-bottom: 20px;\\n}\\n.login .login-cancel-button {\\n  margin-right: 10px;\\n}\\n.login .login-logo {\\n  margin-top: 4em;\\n  max-height: 100px;\\n}\\n.login .login-header {\\n  flex-grow: 1;\\n}\\n.login .login-accounts {\\n  flex-grow: 0;\\n}\\n.login .login-actions {\\n  flex-grow: 0;\\n  align-items: center;\\n  justify-content: center;\\n  display: flex;\\n  margin-top: 20px;\\n}\\n.login .login-mode {\\n  flex-grow: 2;\\n  align-items: flex-end;\\n  justify-content: center;\\n  display: flex;\\n  margin-bottom: 20px;\\n}\\n.login .login-banner {\\n  background-color: #dfab3c;\\n  width: 56%;\\n  background-repeat: no-repeat;\\n  background-position: center;\\n  background-size: cover;\\n  text-align: center;\\n}\\n.login .login-banner-city {\\n  background-image: url('splash-image.jpg');\\n}\\n.login .login-banner-btc {\\n  background-image: url('_-_-_-assets-btc-splash-image.jpg');\\n}\\n.login .login-banner-x42 {\\n  background-image: url('_-_-_-assets-splash-image.jpg');\\n}\\n.login .login-banner-ruta {\\n  background-image: url('_-_-_-assets-splash-image.jpg');\\n}\\n.login .login-banner-exos {\\n  background-image: url('_-_-_-assets-splash-image.jpg');\\n}\\n.login .login-banner-implx {\\n  background-image: url('_-_-_-assets-splash-image.jpg');\\n}\\n.login .login-banner-xrc {\\n  background-image: url('_-_-_-assets-xrc-splash-image.jpg');\\n}\\n.login .login-banner-x1 {\\n  background-image: url('_-_-_-assets-x1-splash-image.jpg');\\n}\\n.login .login-banner-home {\\n  background-image: url('_-_-_-assets-home-splash-image.jpg');\\n}\\n.login .login-banner-sbc {\\n  background-image: url('_-_-_-assets-sbc-splash-image.jpg');\\n}\\n.login .login-banner-rsc {\\n  background-image: url('_-_-_-assets-rsc-splash-image.jpg');\\n}\\n.login .login-banner-cybits {\\n  background-image: url('_-_-_-assets-cybits-splash-image.jpg');\\n}\\n.login .login-banner-content {\\n  height: 100%;\\n}\\n.login .login-banner-text {\\n  text-align: right;\\n  bottom: 1em;\\n  right: 1em;\\n  position: absolute;\\n}\\n.login .login-mode-mobile {\\n  display: none;\\n}\\n@media screen and (max-width: 599px) {\\n  .login .login-banner-text {\\n    bottom: 8em;\\n  }\\n  .login .login-container {\\n    flex-direction: column;\\n  }\\n  .login .login-content {\\n    width: 100%;\\n  }\\n  .login .login-banner {\\n    width: 100%;\\n    flex-grow: 1;\\n  }\\n  .login .login-mode-mobile {\\n    display: block;\\n    bottom: 10px;\\n    position: absolute;\\n    min-width: 200px;\\n    margin-left: 25%;\\n    margin-right: 25%;\\n  }\\n  .login .login-mode {\\n    display: none;\\n  }\\n}\"],\n    encapsulation: 2\n  });\n}","map":null,"metadata":{},"sourceType":"module"}