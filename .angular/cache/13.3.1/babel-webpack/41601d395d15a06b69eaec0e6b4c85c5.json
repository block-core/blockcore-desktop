{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from \"@angular/core\";\nexport var LogLevel = /*#__PURE__*/(function () {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"Verbose\"] = 0] = \"Verbose\";\n    LogLevel[LogLevel[\"Info\"] = 1] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n    LogLevel[LogLevel[\"Critical\"] = 4] = \"Critical\";\n  })(LogLevel || (LogLevel = {}));\n\n  return LogLevel;\n})();\nexport var Logger = /*#__PURE__*/(function () {\n  var Logger = /*#__PURE__*/function () {\n    function Logger() {\n      _classCallCheck(this, Logger);\n\n      this.logLevel = LogLevel.Info;\n      this.messages = [];\n    }\n\n    _createClass(Logger, [{\n      key: \"setLogLevel\",\n      value: function setLogLevel(logLevel) {\n        this.logLevel = logLevel;\n      }\n    }, {\n      key: \"verbose\",\n      value: function verbose(message) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        this.log.apply(this, [LogLevel.Verbose, message].concat(args));\n      }\n    }, {\n      key: \"info\",\n      value: function info(message) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        this.log.apply(this, [LogLevel.Info, message].concat(args));\n      }\n    }, {\n      key: \"warn\",\n      value: function warn(message) {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        this.log.apply(this, [LogLevel.Warn, message].concat(args));\n      }\n    }, {\n      key: \"error\",\n      value: function error(message) {\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        this.log.apply(this, [LogLevel.Error, message].concat(args));\n      }\n    }, {\n      key: \"critical\",\n      value: function critical(message) {\n        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          args[_key5 - 1] = arguments[_key5];\n        }\n\n        this.log.apply(this, [LogLevel.Critical, message].concat(args));\n      }\n    }, {\n      key: \"shouldLog\",\n      value: function shouldLog(logLevel) {\n        return this.logLevel <= logLevel;\n      }\n    }, {\n      key: \"lastEntries\",\n      value: function lastEntries() {\n        return this.messages;\n      }\n    }, {\n      key: \"log\",\n      value: function log(logLevel, message) {\n        var _console, _console2, _console3, _console4, _console5;\n\n        if (this.messages.length > 29) {\n          this.messages.shift();\n        }\n\n        for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n          args[_key6 - 2] = arguments[_key6];\n        }\n\n        this.messages.push({\n          timestamp: new Date(),\n          level: logLevel,\n          message: message,\n          args: args\n        });\n\n        if (!this.shouldLog(logLevel)) {\n          return;\n        }\n\n        switch (logLevel) {\n          case LogLevel.Verbose:\n            (_console = console).log.apply(_console, [\"[Hub] \".concat(message)].concat(args));\n\n            break;\n\n          case LogLevel.Info:\n            // eslint-disable-next-line no-console\n            (_console2 = console).info.apply(_console2, [\"[Hub] \".concat(message)].concat(args));\n\n            break;\n\n          case LogLevel.Warn:\n            (_console3 = console).warn.apply(_console3, [\"[Hub] \".concat(message)].concat(args));\n\n            break;\n\n          case LogLevel.Error:\n            (_console4 = console).error.apply(_console4, [\"[Hub] \".concat(message)].concat(args));\n\n            break;\n\n          case LogLevel.Critical:\n            (_console5 = console).error.apply(_console5, [\"[Hub] [CRITICAL] \".concat(message)].concat(args));\n\n            break;\n\n          default:\n            break;\n        }\n      }\n    }]);\n\n    return Logger;\n  }();\n\n  /** @nocollapse */\n  Logger.ɵfac = function Logger_Factory(t) {\n    return new (t || Logger)();\n  };\n  /** @nocollapse */\n\n\n  Logger.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: Logger,\n    factory: Logger.ɵfac,\n    providedIn: 'root'\n  });\n  return Logger;\n})();","map":null,"metadata":{},"sourceType":"module"}