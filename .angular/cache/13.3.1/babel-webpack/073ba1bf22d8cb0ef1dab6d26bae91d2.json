{"ast":null,"code":"import { interval, throwError } from 'rxjs';\nimport { map, startWith, switchMap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./application-state.service\";\nimport * as i3 from \"./notification.service\";\nimport * as i4 from \"./logger.service\";\nimport * as i5 from \"@angular/material/snack-bar\";\nexport class CoinService {\n  http;\n  appState;\n  notifications;\n  log;\n  snackBar;\n  pollingInterval = 60000 * 5;\n  apiUrl = 'https://insight.city-chain.org/';\n\n  constructor(http, appState, notifications, log, snackBar) {\n    this.http = http;\n    this.appState = appState;\n    this.notifications = notifications;\n    this.log = log;\n    this.snackBar = snackBar;\n  }\n\n  getTicker(ticker) {\n    return interval(this.pollingInterval).pipe(startWith(0)).pipe(switchMap(() => this.http.get(this.apiUrl + 'api/market/' + ticker))).pipe(catchError(this.handleError.bind(this))).pipe(map(response => response));\n  }\n  /** Use this to handle error (exceptions) that happens in RXJS pipes. This handler will rethrow the error. */\n\n\n  handleError(error) {\n    this.handleException(error);\n    return throwError(error);\n  }\n  /** Use this to handle errors (exceptions) that happens outside of an RXJS pipe. See the \"handleError\" for pipeline error handling. */\n\n\n  handleException(error) {\n    let errorMessage = '';\n\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = 'An error occurred:' + error.error.message; // A client-side or network error occurred. Handle it accordingly.\n    } else if (error.error?.errors) {\n      errorMessage = `${error.error.errors[0].message} (Code: ${error.error.errors[0].status})`;\n    } else if (error.name === 'HttpErrorResponse') {\n      errorMessage = `Unable to connect with background daemon: ${error.message} (${error.status})`; // if (error.error.target.__zone_symbol__xhrURL.indexOf('api/wallet/files') > -1) {\n      // }\n    } else {\n      errorMessage = `Error: ${error.message} (${error.status})`;\n    }\n\n    this.log.error(errorMessage);\n    this.notifications.add({\n      title: 'Coin ticker communication issue',\n      hint: 'p2pb2b is our provider of exchange rates, and this notification indicates issues with this integration',\n      message: errorMessage,\n      icon: 'warning'\n    }); // if (errorMessage.indexOf('Http failure response for') === -1) {\n    // this.snackBar.open(errorMessage, null, { duration: 5000, panelClass: 'error-snackbar' });\n    // }\n  }\n\n  static ɵfac = function CoinService_Factory(t) {\n    return new (t || CoinService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationStateService), i0.ɵɵinject(i3.NotificationService), i0.ɵɵinject(i4.Logger), i0.ɵɵinject(i5.MatSnackBar));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoinService,\n    factory: CoinService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}