{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Github\\\\Miladsoft\\\\blockcore-hub-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/* eslint-disable */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a;\n\nimport { Component, ViewEncapsulation, HostBinding } from '@angular/core';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { GlobalService } from '../../../services/global.service';\nimport { ApiService } from '../../../services/api.service';\nimport { PasswordValidationDirective } from '../../../shared/directives/password-validation.directive';\nimport { WalletCreation } from '../../../classes/wallet-creation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Logger } from '../../../services/logger.service';\nimport { ApplicationStateService } from 'src/app/services/application-state.service';\nimport * as bip39 from 'bip39';\nimport * as bip32 from 'bip32';\nimport * as bip38 from '../../../../libs/bip38';\nimport * as city from 'city-lib';\nimport { DatabaseStorageService } from 'src/app/services/storage.service';\n\nvar CreateAccountComponent = /*#__PURE__*/function () {\n  function CreateAccountComponent(authService, appState, router, fb, log, dialog, snackBar, globalService, apiService) {\n    _classCallCheck(this, CreateAccountComponent);\n\n    this.authService = authService;\n    this.appState = appState;\n    this.router = router;\n    this.fb = fb;\n    this.log = log;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.globalService = globalService;\n    this.apiService = apiService;\n    this.hostClass = true;\n    this.password1 = '';\n    this.password2 = '';\n    this.seedExtension = '';\n    this.accountName = 'main';\n    this.onGenerate();\n  }\n\n  _createClass(CreateAccountComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.accountSeedForm = this.fb.group({\n        seedExtension: ['', {\n          updateOn: 'blur'\n        }]\n      });\n      this.accountPasswordForm = this.fb.group({\n        accountPassword: ['', {\n          validators: Validators.compose([Validators.required, Validators.minLength(1)])\n        }],\n        accountPasswordConfirmation: ['']\n      }, {\n        updateOn: 'blur',\n        validator: PasswordValidationDirective.MatchPassword\n      });\n      this.accountNameForm = this.fb.group({\n        accountName: new FormControl('', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(24), Validators.pattern(/^[a-zA-Z0-9]*$/)]))\n      });\n    }\n  }, {\n    key: \"onPrint\",\n    value: function onPrint() {\n      window.print();\n    }\n  }, {\n    key: \"onGenerate\",\n    value: function onGenerate() {\n      if (this.appState.isSimpleMode) {\n        this.getNewMnemonicLocal();\n      } else {\n        this.getNewMnemonic();\n      }\n\n      this.currentDate = new Date().toDateString();\n    }\n  }, {\n    key: \"getNewMnemonicLocal\",\n    value: function getNewMnemonicLocal() {\n      this.mnemonic = bip39.generateMnemonic();\n      this.mnemonic = 'mystery problem faith negative member bottom concert bundle asthma female process twelve';\n      this.verification = this.mnemonic.split(' ')[2];\n    }\n  }, {\n    key: \"getNewMnemonic\",\n    value: function getNewMnemonic() {\n      var _this = this;\n\n      this.apiService.getNewMnemonic().subscribe(function (response) {\n        // if (response.status >= 200 && response.status < 400) {\n        _this.mnemonic = response;\n        _this.verification = _this.mnemonic.split(' ')[2]; // }\n      }, function (error) {\n        _this.apiService.handleException(error);\n      });\n    }\n  }, {\n    key: \"createAccount\",\n    value: function createAccount() {\n      this.saving = true;\n      this.log.info('Create account:', this.accountName);\n      this.createWallet(new WalletCreation(this.accountName, this.mnemonic, this.password1, this.seedExtension));\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(node, network) {\n      return city.payments.p2pkh({\n        pubkey: node.publicKey,\n        network: network\n      }).address;\n    }\n  }, {\n    key: \"createWallet\",\n    value: function createWallet(wallet) {\n      var _this2 = this;\n\n      this.log.info('Creating wallet with: ', wallet);\n\n      if (this.appState.isSimpleMode) {\n        // C#: HdOperations.GetExtendedKey(recoveryPhrase, string.Empty);\n        bip39.mnemonicToSeed(this.mnemonic, wallet.passPhrase).then(function (masterSeed) {\n          var self = _this2;\n          var masterNode = bip32.fromSeed(masterSeed, _this2.appState.networkDefinition); // eslint-disable-next-line\n\n          var accountNode = masterNode.derivePath(\"m/44'/1926'/0'\"); // TODO: Get the coin type from network definition.\n\n          var xpub = accountNode.neutered().toBase58(); // bip38.encryptAsync(masterNode.privateKey, true, wallet.password, (out) => {\n          // }, null, this.appState.networkParams);\n          // eslint-disable-next-line prefer-const\n\n          var encryptedKeySeed = bip38.encrypt(masterNode.privateKey, true, wallet.password, null, null, _this2.appState.networkParams); // Instantiate it\n\n          var db = new DatabaseStorageService('cityhub'); // Open it\n\n          db.open().catch(function (err) {\n            console.error(\"Open failed: \".concat(err.stack));\n          });\n          db.wallets.add({\n            name: wallet.name,\n            isExtPubKeyWallet: false,\n            extPubKey: xpub,\n            encryptedSeed: encryptedKeySeed,\n            chainCode: masterNode.chainCode,\n            network: 'CityMain',\n            creationTime: Date.now() / 1000,\n            coinType: 1926,\n            lastBlockSyncedHeight: 0,\n            lastBlockSyncedHash: ''\n          });\n          self.saving = false;\n          self.log.info('Wallet Created!');\n          self.snackBar.open('Account successfully created!', null, {\n            duration: 3000\n          });\n          self.router.navigateByUrl('/login');\n        });\n      } else {\n        this.apiService.createWallet(wallet).subscribe(function (response) {\n          _this2.saving = false;\n\n          _this2.log.info('Wallet Created!');\n\n          _this2.snackBar.open('Account successfully created!', null, {\n            duration: 3000\n          });\n\n          _this2.router.navigateByUrl('/login');\n        }, function (error) {\n          _this2.saving = false;\n\n          _this2.apiService.handleException(error);\n        });\n      }\n    }\n  }]);\n\n  return CreateAccountComponent;\n}();\n\n__decorate([HostBinding('class.account-create'), __metadata(\"design:type\", Object)], CreateAccountComponent.prototype, \"hostClass\", void 0);\n\nCreateAccountComponent = __decorate([Component({\n  selector: 'app-account-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __metadata(\"design:paramtypes\", [AuthenticationService, typeof (_a = typeof ApplicationStateService !== \"undefined\" && ApplicationStateService) === \"function\" ? _a : Object, Router, FormBuilder, Logger, MatDialog, MatSnackBar, GlobalService, ApiService])], CreateAccountComponent);\nexport { CreateAccountComponent };","map":null,"metadata":{},"sourceType":"module"}