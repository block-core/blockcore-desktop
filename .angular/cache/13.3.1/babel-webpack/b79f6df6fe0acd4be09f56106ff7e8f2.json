{"ast":null,"code":"var lazy = require('./lazy');\n\nvar typef = require('typeforce');\n\nvar OPS = require('bitcoin-ops');\n\nvar bech32 = require('bech32');\n\nvar bcrypto = require('../crypto');\n\nvar bscript = require('../script');\n\nvar BITCOIN_NETWORK = require('../networks').bitcoin;\n\nvar EMPTY_BUFFER = Buffer.alloc(0);\n\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every(function (x, i) {\n    return x.equals(b[i]);\n  });\n} // input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\n\n\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness) throw new TypeError('Not enough data');\n  opts = Object.assign({\n    validate: true\n  }, opts || {});\n  typef({\n    network: typef.maybe(typef.Object),\n    address: typef.maybe(typef.String),\n    hash: typef.maybe(typef.BufferN(32)),\n    output: typef.maybe(typef.BufferN(34)),\n    redeem: typef.maybe({\n      input: typef.maybe(typef.Buffer),\n      network: typef.maybe(typef.Object),\n      output: typef.maybe(typef.Buffer),\n      witness: typef.maybe(typef.arrayOf(typef.Buffer))\n    }),\n    input: typef.maybe(typef.BufferN(0)),\n    witness: typef.maybe(typef.arrayOf(typef.Buffer))\n  }, a);\n\n  var _address = lazy.value(function () {\n    var result = bech32.decode(a.address);\n    var version = result.words.shift();\n    var data = bech32.fromWords(result.words);\n    return {\n      version: version,\n      prefix: result.prefix,\n      data: Buffer.from(data)\n    };\n  });\n\n  var _rchunks = lazy.value(function () {\n    return bscript.decompile(a.redeem.input);\n  });\n\n  var network = a.network;\n\n  if (!network) {\n    network = a.redeem && a.redeem.network || BITCOIN_NETWORK;\n  }\n\n  var o = {\n    network: network\n  };\n  lazy.prop(o, 'address', function () {\n    if (!o.hash) return;\n    var words = bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', function () {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', function () {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', function () {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1)\n    };\n  });\n  lazy.prop(o, 'input', function () {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', function () {\n    // transform redeem input to witness stack?\n    if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {\n      var stack = bscript.toStack(_rchunks()); // assign, and blank the existing input\n\n      o.redeem = Object.assign({\n        witness: stack\n      }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  }); // extended validation\n\n  if (opts.validate) {\n    var hash;\n\n    if (a.address) {\n      if (_address().prefix !== network.bech32) throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00) throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32) throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n\n    if (a.hash) {\n      if (hash && !hash.equals(a.hash)) throw new TypeError('Hash mismatch');else hash = a.hash;\n    }\n\n    if (a.output) {\n      if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');\n      var hash2 = a.output.slice(2);\n      if (hash && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n    }\n\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch'); // is there two redeem sources?\n\n      if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0) throw new TypeError('Ambiguous witness source'); // is the redeem output non-empty?\n\n      if (a.redeem.output) {\n        if (bscript.decompile(a.redeem.output).length === 0) throw new TypeError('Redeem.output is invalid'); // match hash against other sources\n\n        var _hash = bcrypto.sha256(a.redeem.output);\n\n        if (hash && !hash.equals(_hash)) throw new TypeError('Hash mismatch');else hash = _hash;\n      }\n\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks())) throw new TypeError('Non push-only scriptSig');\n      if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness)) throw new TypeError('Witness and redeem.witness mismatch');\n    }\n\n    if (a.witness) {\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(a.witness[a.witness.length - 1])) throw new TypeError('Witness and redeem.output mismatch');\n    }\n  }\n\n  return Object.assign(o, a);\n}\n\nmodule.exports = p2wsh;","map":null,"metadata":{},"sourceType":"script"}